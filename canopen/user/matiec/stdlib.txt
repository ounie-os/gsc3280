# 1 "iec_std_lib.h"
 
















 



 






# 1 "/usr/lib/gcc-lib/i386-redhat-linux/2.95.3/include/limits.h" 1 3
 


 





 
# 1 "/usr/lib/gcc-lib/i386-redhat-linux/2.95.3/include/syslimits.h" 1 3
 





# 1 "/usr/lib/gcc-lib/i386-redhat-linux/2.95.3/include/limits.h" 1 3
 


 

# 114 "/usr/lib/gcc-lib/i386-redhat-linux/2.95.3/include/limits.h" 3



# 1 "/usr/include/limits.h" 1 3
 

















 






# 1 "/usr/include/features.h" 1 3
 




















 






























































 




















 





 



 







 
# 142 "/usr/include/features.h" 3


 









 








 



























# 208 "/usr/include/features.h" 3


































 



 


 








 




 
















 







 


# 1 "/usr/include/sys/cdefs.h" 1 3
 




















 




 






 





 








 



# 65 "/usr/include/sys/cdefs.h" 3


 





 




 









 







 

















 















 







 






 








 








 










 











 










 







 




 


















# 291 "/usr/include/features.h" 2 3



 








 





 

 








# 1 "/usr/include/gnu/stubs.h" 1 3
 



















# 320 "/usr/include/features.h" 2 3




# 26 "/usr/include/limits.h" 2 3



 





 

# 113 "/usr/include/limits.h" 3




  




# 140 "/usr/include/limits.h" 3



 
# 1 "/usr/include/bits/posix1_lim.h" 1 3
 

















 









 

 


 


 


 


 


 


 


 



 


 


 


 


 



 


 


 


 


 


 


 


 


 


 


 


 



 


 


 


 


 



 
# 1 "/usr/include/bits/local_lim.h" 1 3
 


















 














 
# 1 "/usr/include/linux/limits.h" 1 3



















# 36 "/usr/include/bits/local_lim.h" 2 3


 




 




 





 

 


 

 


 

 


 



 


 


 

# 126 "/usr/include/bits/posix1_lim.h" 2 3








 







# 144 "/usr/include/limits.h" 2 3




# 1 "/usr/include/bits/posix2_lim.h" 1 3
 

















 







 


 


 


 


 



 



 


 



 




 




























 



# 148 "/usr/include/limits.h" 2 3






# 117 "/usr/lib/gcc-lib/i386-redhat-linux/2.95.3/include/limits.h" 2 3




# 7 "/usr/lib/gcc-lib/i386-redhat-linux/2.95.3/include/syslimits.h" 2 3


# 11 "/usr/lib/gcc-lib/i386-redhat-linux/2.95.3/include/limits.h" 2 3





 



 



 




 





 



 












 

 




 



 








 



 













 



# 107 "/usr/lib/gcc-lib/i386-redhat-linux/2.95.3/include/limits.h" 3




 









# 29 "iec_std_lib.h" 2

# 1 "/usr/lib/gcc-lib/i386-redhat-linux/2.95.3/include/float.h" 1 3
 



 

    


    


    


    


    


    


    


    


    


    


    



    


    


    


    


    


    


    


    


    



    


    


    



union __convert_long_double {
  unsigned __convert_long_double_i[4];
  long double __convert_long_double_d;
};


    


    


    


    


    


    




# 30 "iec_std_lib.h" 2

# 1 "/usr/include/math.h" 1 3
 


















 








 

 

# 1 "/usr/include/bits/huge_val.h" 1 3
 

























 

















 

# 81 "/usr/include/bits/huge_val.h" 3

# 33 "/usr/include/math.h" 2 3


 



 
# 1 "/usr/include/bits/mathdef.h" 1 3
 





















# 41 "/usr/include/bits/mathdef.h" 3

# 40 "/usr/include/math.h" 2 3



 



















# 1 "/usr/include/bits/mathcalls.h" 1 3
 


















 






























 

 
extern   double          acos          (double  __x)      ; extern   double         __acos          (double  __x)        ;
 
extern   double          asin          (double  __x)      ; extern   double         __asin          (double  __x)        ;
 
extern   double          atan          (double  __x)      ; extern   double         __atan          (double  __x)        ;
 
extern   double          atan2          (double  __y, double  __x)      ; extern   double         __atan2          (double  __y, double  __x)        ;

 
extern   double          cos          (double  __x)      ; extern   double         __cos          (double  __x)        ;
 
extern   double          sin          (double  __x)      ; extern   double         __sin          (double  __x)        ;
 
extern   double          tan          (double  __x)      ; extern   double         __tan          (double  __x)        ;







 

 
extern   double          cosh          (double  __x)      ; extern   double         __cosh          (double  __x)        ;
 
extern   double          sinh          (double  __x)      ; extern   double         __sinh          (double  __x)        ;
 
extern   double          tanh          (double  __x)      ; extern   double         __tanh          (double  __x)        ;


 
extern   double          acosh          (double  __x)      ; extern   double         __acosh          (double  __x)        ;
 
extern   double          asinh          (double  __x)      ; extern   double         __asinh          (double  __x)        ;
 
extern   double          atanh          (double  __x)      ; extern   double         __atanh          (double  __x)        ;


 

 
extern   double          exp          (double  __x)      ; extern   double         __exp          (double  __x)        ;








 
extern   double          frexp          (double  __x, int *__exponent)      ; extern   double         __frexp          (double  __x, int *__exponent)        ;

 
extern   double          ldexp          (double  __x, int __exponent)      ; extern   double         __ldexp          (double  __x, int __exponent)        ;

 
extern   double          log          (double  __x)      ; extern   double         __log          (double  __x)        ;

 
extern   double          log10          (double  __x)      ; extern   double         __log10          (double  __x)        ;

 
extern   double          modf          (double  __x, double  *__iptr)      ; extern   double         __modf          (double  __x, double  *__iptr)        ;


 
extern   double          expm1          (double  __x)      ; extern   double         __expm1          (double  __x)        ;

 
extern   double          log1p          (double  __x)      ; extern   double         __log1p          (double  __x)        ;

 
extern   double          logb          (double  __x)      ; extern   double         __logb          (double  __x)        ;











 

 
extern   double          pow          (double  __x, double  __y)      ; extern   double         __pow          (double  __x, double  __y)        ;

 
extern   double          sqrt          (double  __x)      ; extern   double         __sqrt          (double  __x)        ;


 
extern   double          hypot          (double  __x, double  __y)      ; extern   double         __hypot          (double  __x, double  __y)        ;



 
extern   double          cbrt          (double  __x)      ; extern   double         __cbrt          (double  __x)        ;



 

 
extern   double          ceil          (double  __x)       __attribute__ (    (__const__)  ); extern   double         __ceil          (double  __x)       __attribute__ (    (__const__)  )  ;

 
extern   double          fabs          (double  __x)       __attribute__ (    (__const__)  ); extern   double         __fabs          (double  __x)       __attribute__ (    (__const__)  )  ;

 
extern   double          floor          (double  __x)       __attribute__ (    (__const__)  ); extern   double         __floor          (double  __x)       __attribute__ (    (__const__)  )  ;

 
extern   double          fmod          (double  __x, double  __y)      ; extern   double         __fmod          (double  __x, double  __y)        ;


 

extern  int     __isinf      (double  __value)     __attribute__ ((__const__));

 
extern  int     __finite      (double  __value)     __attribute__ ((__const__));


 

extern  int     isinf      (double  __value)     __attribute__ ((__const__));

 
extern  int     finite      (double  __value)     __attribute__ ((__const__));

 
extern   double          drem          (double  __x, double  __y)      ; extern   double         __drem          (double  __x, double  __y)        ;


 
extern   double          significand          (double  __x)      ; extern   double         __significand          (double  __x)        ;



 
extern   double          copysign          (double  __x, double  __y)       __attribute__ (    (__const__)  ); extern   double         __copysign          (double  __x, double  __y)       __attribute__ (    (__const__)  )  ;








 
extern  int     __isnan      (double  __value)     __attribute__ ((__const__));


 
extern  int     isnan      (double  __value)     __attribute__ ((__const__));

 
extern   double          j0          (double )      ; extern   double         __j0          (double )        ;
extern   double          j1          (double )      ; extern   double         __j1          (double )        ;
extern   double          jn          (int, double )      ; extern   double         __jn          (int, double )        ;
extern   double          y0          (double )      ; extern   double         __y0          (double )        ;
extern   double          y1          (double )      ; extern   double         __y1          (double )        ;
extern   double          yn          (int, double )      ; extern   double         __yn          (int, double )        ;




 
extern   double          erf          (double )      ; extern   double         __erf          (double )        ;
extern   double          erfc          (double )      ; extern   double         __erfc          (double )        ;
extern   double          lgamma          (double )      ; extern   double         __lgamma          (double )        ;







 
extern   double          gamma          (double )      ; extern   double         __gamma          (double )        ;



 


extern   double          lgamma_r              (double , int *__signgamp)      ; extern   double         __lgamma_r              (double , int *__signgamp)        ;




 

extern   double          rint          (double  __x)      ; extern   double         __rint          (double  __x)        ;

 
extern   double          nextafter          (double  __x, double  __y)       __attribute__ (    (__const__)  ); extern   double         __nextafter          (double  __x, double  __y)       __attribute__ (    (__const__)  )  ;




 
extern   double          remainder          (double  __x, double  __y)      ; extern   double         __remainder          (double  __x, double  __y)        ;


 
extern   double          scalb          (double  __x, double  __n)      ; extern   double         __scalb          (double  __x, double  __n)        ;



 
extern   double          scalbn          (double  __x, int __n)      ; extern   double         __scalbn          (double  __x, int __n)        ;


 
extern   int        ilogb        (double  __x)     ; extern   int        __ilogb        (double  __x)      ;


# 333 "/usr/include/bits/mathcalls.h" 3

# 63 "/usr/include/math.h" 2 3







 











# 1 "/usr/include/bits/mathcalls.h" 1 3
 


















 






























 

 
extern   float          acosf         (float   __x)      ; extern   float         __acosf         (float   __x)        ;
 
extern   float          asinf         (float   __x)      ; extern   float         __asinf         (float   __x)        ;
 
extern   float          atanf         (float   __x)      ; extern   float         __atanf         (float   __x)        ;
 
extern   float          atan2f         (float   __y, float   __x)      ; extern   float         __atan2f         (float   __y, float   __x)        ;

 
extern   float          cosf         (float   __x)      ; extern   float         __cosf         (float   __x)        ;
 
extern   float          sinf         (float   __x)      ; extern   float         __sinf         (float   __x)        ;
 
extern   float          tanf         (float   __x)      ; extern   float         __tanf         (float   __x)        ;







 

 
extern   float          coshf         (float   __x)      ; extern   float         __coshf         (float   __x)        ;
 
extern   float          sinhf         (float   __x)      ; extern   float         __sinhf         (float   __x)        ;
 
extern   float          tanhf         (float   __x)      ; extern   float         __tanhf         (float   __x)        ;


 
extern   float          acoshf         (float   __x)      ; extern   float         __acoshf         (float   __x)        ;
 
extern   float          asinhf         (float   __x)      ; extern   float         __asinhf         (float   __x)        ;
 
extern   float          atanhf         (float   __x)      ; extern   float         __atanhf         (float   __x)        ;


 

 
extern   float          expf         (float   __x)      ; extern   float         __expf         (float   __x)        ;








 
extern   float          frexpf         (float   __x, int *__exponent)      ; extern   float         __frexpf         (float   __x, int *__exponent)        ;

 
extern   float          ldexpf         (float   __x, int __exponent)      ; extern   float         __ldexpf         (float   __x, int __exponent)        ;

 
extern   float          logf         (float   __x)      ; extern   float         __logf         (float   __x)        ;

 
extern   float          log10f         (float   __x)      ; extern   float         __log10f         (float   __x)        ;

 
extern   float          modff         (float   __x, float   *__iptr)      ; extern   float         __modff         (float   __x, float   *__iptr)        ;


 
extern   float          expm1f         (float   __x)      ; extern   float         __expm1f         (float   __x)        ;

 
extern   float          log1pf         (float   __x)      ; extern   float         __log1pf         (float   __x)        ;

 
extern   float          logbf         (float   __x)      ; extern   float         __logbf         (float   __x)        ;











 

 
extern   float          powf         (float   __x, float   __y)      ; extern   float         __powf         (float   __x, float   __y)        ;

 
extern   float          sqrtf         (float   __x)      ; extern   float         __sqrtf         (float   __x)        ;


 
extern   float          hypotf         (float   __x, float   __y)      ; extern   float         __hypotf         (float   __x, float   __y)        ;



 
extern   float          cbrtf         (float   __x)      ; extern   float         __cbrtf         (float   __x)        ;



 

 
extern   float          ceilf         (float   __x)       __attribute__ (    (__const__)  ); extern   float         __ceilf         (float   __x)       __attribute__ (    (__const__)  )  ;

 
extern   float          fabsf         (float   __x)       __attribute__ (    (__const__)  ); extern   float         __fabsf         (float   __x)       __attribute__ (    (__const__)  )  ;

 
extern   float          floorf         (float   __x)       __attribute__ (    (__const__)  ); extern   float         __floorf         (float   __x)       __attribute__ (    (__const__)  )  ;

 
extern   float          fmodf         (float   __x, float   __y)      ; extern   float         __fmodf         (float   __x, float   __y)        ;


 

extern  int    __isinff     (float   __value)     __attribute__ ((__const__));

 
extern  int    __finitef     (float   __value)     __attribute__ ((__const__));


 

extern  int    isinff     (float   __value)     __attribute__ ((__const__));

 
extern  int    finitef     (float   __value)     __attribute__ ((__const__));

 
extern   float          dremf         (float   __x, float   __y)      ; extern   float         __dremf         (float   __x, float   __y)        ;


 
extern   float          significandf         (float   __x)      ; extern   float         __significandf         (float   __x)        ;



 
extern   float          copysignf         (float   __x, float   __y)       __attribute__ (    (__const__)  ); extern   float         __copysignf         (float   __x, float   __y)       __attribute__ (    (__const__)  )  ;








 
extern  int    __isnanf     (float   __value)     __attribute__ ((__const__));


 
extern  int    isnanf     (float   __value)     __attribute__ ((__const__));

 
extern   float          j0f         (float  )      ; extern   float         __j0f         (float  )        ;
extern   float          j1f         (float  )      ; extern   float         __j1f         (float  )        ;
extern   float          jnf         (int, float  )      ; extern   float         __jnf         (int, float  )        ;
extern   float          y0f         (float  )      ; extern   float         __y0f         (float  )        ;
extern   float          y1f         (float  )      ; extern   float         __y1f         (float  )        ;
extern   float          ynf         (int, float  )      ; extern   float         __ynf         (int, float  )        ;




 
extern   float          erff         (float  )      ; extern   float         __erff         (float  )        ;
extern   float          erfcf         (float  )      ; extern   float         __erfcf         (float  )        ;
extern   float          lgammaf         (float  )      ; extern   float         __lgammaf         (float  )        ;







 
extern   float          gammaf         (float  )      ; extern   float         __gammaf         (float  )        ;



 


extern   float          lgammaf_r            (float  , int *__signgamp)      ; extern   float         __lgammaf_r            (float  , int *__signgamp)        ;




 

extern   float          rintf         (float   __x)      ; extern   float         __rintf         (float   __x)        ;

 
extern   float          nextafterf         (float   __x, float   __y)       __attribute__ (    (__const__)  ); extern   float         __nextafterf         (float   __x, float   __y)       __attribute__ (    (__const__)  )  ;




 
extern   float          remainderf         (float   __x, float   __y)      ; extern   float         __remainderf         (float   __x, float   __y)        ;


 
extern   float          scalbf         (float   __x, float   __n)      ; extern   float         __scalbf         (float   __x, float   __n)        ;



 
extern   float          scalbnf         (float   __x, int __n)      ; extern   float         __scalbnf         (float   __x, int __n)        ;


 
extern   int       ilogbf       (float   __x)     ; extern   int       __ilogbf       (float   __x)      ;


# 333 "/usr/include/bits/mathcalls.h" 3

# 82 "/usr/include/math.h" 2 3





 











# 1 "/usr/include/bits/mathcalls.h" 1 3
 


















 






























 

 
extern   long double          acosl         (long double   __x)      ; extern   long double         __acosl         (long double   __x)        ;
 
extern   long double          asinl         (long double   __x)      ; extern   long double         __asinl         (long double   __x)        ;
 
extern   long double          atanl         (long double   __x)      ; extern   long double         __atanl         (long double   __x)        ;
 
extern   long double          atan2l         (long double   __y, long double   __x)      ; extern   long double         __atan2l         (long double   __y, long double   __x)        ;

 
extern   long double          cosl         (long double   __x)      ; extern   long double         __cosl         (long double   __x)        ;
 
extern   long double          sinl         (long double   __x)      ; extern   long double         __sinl         (long double   __x)        ;
 
extern   long double          tanl         (long double   __x)      ; extern   long double         __tanl         (long double   __x)        ;







 

 
extern   long double          coshl         (long double   __x)      ; extern   long double         __coshl         (long double   __x)        ;
 
extern   long double          sinhl         (long double   __x)      ; extern   long double         __sinhl         (long double   __x)        ;
 
extern   long double          tanhl         (long double   __x)      ; extern   long double         __tanhl         (long double   __x)        ;


 
extern   long double          acoshl         (long double   __x)      ; extern   long double         __acoshl         (long double   __x)        ;
 
extern   long double          asinhl         (long double   __x)      ; extern   long double         __asinhl         (long double   __x)        ;
 
extern   long double          atanhl         (long double   __x)      ; extern   long double         __atanhl         (long double   __x)        ;


 

 
extern   long double          expl         (long double   __x)      ; extern   long double         __expl         (long double   __x)        ;








 
extern   long double          frexpl         (long double   __x, int *__exponent)      ; extern   long double         __frexpl         (long double   __x, int *__exponent)        ;

 
extern   long double          ldexpl         (long double   __x, int __exponent)      ; extern   long double         __ldexpl         (long double   __x, int __exponent)        ;

 
extern   long double          logl         (long double   __x)      ; extern   long double         __logl         (long double   __x)        ;

 
extern   long double          log10l         (long double   __x)      ; extern   long double         __log10l         (long double   __x)        ;

 
extern   long double          modfl         (long double   __x, long double   *__iptr)      ; extern   long double         __modfl         (long double   __x, long double   *__iptr)        ;


 
extern   long double          expm1l         (long double   __x)      ; extern   long double         __expm1l         (long double   __x)        ;

 
extern   long double          log1pl         (long double   __x)      ; extern   long double         __log1pl         (long double   __x)        ;

 
extern   long double          logbl         (long double   __x)      ; extern   long double         __logbl         (long double   __x)        ;











 

 
extern   long double          powl         (long double   __x, long double   __y)      ; extern   long double         __powl         (long double   __x, long double   __y)        ;

 
extern   long double          sqrtl         (long double   __x)      ; extern   long double         __sqrtl         (long double   __x)        ;


 
extern   long double          hypotl         (long double   __x, long double   __y)      ; extern   long double         __hypotl         (long double   __x, long double   __y)        ;



 
extern   long double          cbrtl         (long double   __x)      ; extern   long double         __cbrtl         (long double   __x)        ;



 

 
extern   long double          ceill         (long double   __x)       __attribute__ (    (__const__)  ); extern   long double         __ceill         (long double   __x)       __attribute__ (    (__const__)  )  ;

 
extern   long double          fabsl         (long double   __x)       __attribute__ (    (__const__)  ); extern   long double         __fabsl         (long double   __x)       __attribute__ (    (__const__)  )  ;

 
extern   long double          floorl         (long double   __x)       __attribute__ (    (__const__)  ); extern   long double         __floorl         (long double   __x)       __attribute__ (    (__const__)  )  ;

 
extern   long double          fmodl         (long double   __x, long double   __y)      ; extern   long double         __fmodl         (long double   __x, long double   __y)        ;


 

extern  int    __isinfl     (long double   __value)     __attribute__ ((__const__));

 
extern  int    __finitel     (long double   __value)     __attribute__ ((__const__));


 

extern  int    isinfl     (long double   __value)     __attribute__ ((__const__));

 
extern  int    finitel     (long double   __value)     __attribute__ ((__const__));

 
extern   long double          dreml         (long double   __x, long double   __y)      ; extern   long double         __dreml         (long double   __x, long double   __y)        ;


 
extern   long double          significandl         (long double   __x)      ; extern   long double         __significandl         (long double   __x)        ;



 
extern   long double          copysignl         (long double   __x, long double   __y)       __attribute__ (    (__const__)  ); extern   long double         __copysignl         (long double   __x, long double   __y)       __attribute__ (    (__const__)  )  ;








 
extern  int    __isnanl     (long double   __value)     __attribute__ ((__const__));


 
extern  int    isnanl     (long double   __value)     __attribute__ ((__const__));

 
extern   long double          j0l         (long double  )      ; extern   long double         __j0l         (long double  )        ;
extern   long double          j1l         (long double  )      ; extern   long double         __j1l         (long double  )        ;
extern   long double          jnl         (int, long double  )      ; extern   long double         __jnl         (int, long double  )        ;
extern   long double          y0l         (long double  )      ; extern   long double         __y0l         (long double  )        ;
extern   long double          y1l         (long double  )      ; extern   long double         __y1l         (long double  )        ;
extern   long double          ynl         (int, long double  )      ; extern   long double         __ynl         (int, long double  )        ;




 
extern   long double          erfl         (long double  )      ; extern   long double         __erfl         (long double  )        ;
extern   long double          erfcl         (long double  )      ; extern   long double         __erfcl         (long double  )        ;
extern   long double          lgammal         (long double  )      ; extern   long double         __lgammal         (long double  )        ;







 
extern   long double          gammal         (long double  )      ; extern   long double         __gammal         (long double  )        ;



 


extern   long double          lgammal_r            (long double  , int *__signgamp)      ; extern   long double         __lgammal_r            (long double  , int *__signgamp)        ;




 

extern   long double          rintl         (long double   __x)      ; extern   long double         __rintl         (long double   __x)        ;

 
extern   long double          nextafterl         (long double   __x, long double   __y)       __attribute__ (    (__const__)  ); extern   long double         __nextafterl         (long double   __x, long double   __y)       __attribute__ (    (__const__)  )  ;




 
extern   long double          remainderl         (long double   __x, long double   __y)      ; extern   long double         __remainderl         (long double   __x, long double   __y)        ;


 
extern   long double          scalbl         (long double   __x, long double   __n)      ; extern   long double         __scalbl         (long double   __x, long double   __n)        ;



 
extern   long double          scalbnl         (long double   __x, int __n)      ; extern   long double         __scalbnl         (long double   __x, int __n)        ;


 
extern   int       ilogbl       (long double   __x)     ; extern   int       __ilogbl       (long double   __x)      ;


# 333 "/usr/include/bits/mathcalls.h" 3

# 99 "/usr/include/math.h" 2 3













 
extern int signgam;



 
# 236 "/usr/include/math.h" 3



 
typedef enum
{
  _IEEE_ = -1,	 
  _SVID_,	 
  _XOPEN_,	 
  _POSIX_,
  _ISOC_	 
} _LIB_VERSION_TYPE;

 


extern _LIB_VERSION_TYPE _LIB_VERSION;




 







struct exception

  {
    int type;
    char *name;
    double arg1;
    double arg2;
    double retval;
  };




extern int matherr (struct exception *__exc);




 







 












 
















 


# 338 "/usr/include/math.h" 3



 






 





# 409 "/usr/include/math.h" 3


 



# 31 "iec_std_lib.h" 2

# 1 "/usr/include/time.h" 1 3
 

















 










 




 


# 1 "/usr/lib/gcc-lib/i386-redhat-linux/2.95.3/include/stddef.h" 1 3






 


# 19 "/usr/lib/gcc-lib/i386-redhat-linux/2.95.3/include/stddef.h" 3



 


 





 


# 61 "/usr/lib/gcc-lib/i386-redhat-linux/2.95.3/include/stddef.h" 3


 





 


















 





 

 

# 131 "/usr/lib/gcc-lib/i386-redhat-linux/2.95.3/include/stddef.h" 3


 

 


































typedef unsigned int size_t;






















 




 

# 271 "/usr/lib/gcc-lib/i386-redhat-linux/2.95.3/include/stddef.h" 3


# 283 "/usr/lib/gcc-lib/i386-redhat-linux/2.95.3/include/stddef.h" 3


 

 

# 317 "/usr/lib/gcc-lib/i386-redhat-linux/2.95.3/include/stddef.h" 3




 





















# 38 "/usr/include/time.h" 2 3


 

# 1 "/usr/include/bits/time.h" 1 3
 


















 







 


 





 

# 1 "/usr/include/bits/types.h" 1 3
 

















 









# 1 "/usr/lib/gcc-lib/i386-redhat-linux/2.95.3/include/stddef.h" 1 3






 


# 19 "/usr/lib/gcc-lib/i386-redhat-linux/2.95.3/include/stddef.h" 3



 


 





 


# 61 "/usr/lib/gcc-lib/i386-redhat-linux/2.95.3/include/stddef.h" 3


 





 


















 





 

 

# 131 "/usr/lib/gcc-lib/i386-redhat-linux/2.95.3/include/stddef.h" 3


 

 


# 188 "/usr/lib/gcc-lib/i386-redhat-linux/2.95.3/include/stddef.h" 3





 




 

# 271 "/usr/lib/gcc-lib/i386-redhat-linux/2.95.3/include/stddef.h" 3


# 283 "/usr/lib/gcc-lib/i386-redhat-linux/2.95.3/include/stddef.h" 3


 

 

# 317 "/usr/lib/gcc-lib/i386-redhat-linux/2.95.3/include/stddef.h" 3




 





















# 29 "/usr/include/bits/types.h" 2 3


 
typedef unsigned char __u_char;
typedef unsigned short __u_short;
typedef unsigned int __u_int;
typedef unsigned long __u_long;

__extension__ typedef unsigned long long int __u_quad_t;
__extension__ typedef long long int __quad_t;
# 48 "/usr/include/bits/types.h" 3

typedef signed char __int8_t;
typedef unsigned char __uint8_t;
typedef signed short int __int16_t;
typedef unsigned short int __uint16_t;
typedef signed int __int32_t;
typedef unsigned int __uint32_t;

__extension__ typedef signed long long int __int64_t;
__extension__ typedef unsigned long long int __uint64_t;

typedef __quad_t *__qaddr_t;

typedef __u_quad_t __dev_t;		 
typedef __u_int __uid_t;		 
typedef __u_int __gid_t;		 
typedef __u_long __ino_t;		 
typedef __u_int __mode_t;		 
typedef __u_int __nlink_t;		 
typedef long int __off_t;		 
typedef __quad_t __loff_t;		 
typedef int __pid_t;			 
typedef int __ssize_t;			 
typedef __u_long __rlim_t;		 
typedef __u_quad_t __rlim64_t;		 
typedef __u_int __id_t;			 

typedef struct
  {
    int __val[2];
  } __fsid_t;				 

 
typedef int __daddr_t;			 
typedef char *__caddr_t;
typedef long int __time_t;
typedef unsigned int __useconds_t;
typedef long int __suseconds_t;
typedef long int __swblk_t;		 

typedef long int __clock_t;

 
typedef int __clockid_t;

 
typedef int __timer_t;


 



typedef int __key_t;

 
typedef unsigned short int __ipc_pid_t;


 
typedef long int __blksize_t;

 

 
typedef long int __blkcnt_t;
typedef __quad_t __blkcnt64_t;

 
typedef __u_long __fsblkcnt_t;
typedef __u_quad_t __fsblkcnt64_t;

 
typedef __u_long __fsfilcnt_t;
typedef __u_quad_t __fsfilcnt64_t;

 
typedef __u_quad_t __ino64_t;

 
typedef __loff_t __off64_t;

 
typedef long int __t_scalar_t;
typedef unsigned long int __t_uscalar_t;

 
typedef int __intptr_t;

 
typedef unsigned int __socklen_t;


 

# 1 "/usr/include/bits/pthreadtypes.h" 1 3
 
 
 
 
 
 
 
 
 
 
 
 
 









# 1 "/usr/include/bits/sched.h" 1 3
 



















# 62 "/usr/include/bits/sched.h" 3





 
struct __sched_param
  {
    int __sched_priority;
  };


# 23 "/usr/include/bits/pthreadtypes.h" 2 3


 
struct _pthread_fastlock
{
  long int __status;    
  int __spinlock;       

};


 
typedef struct _pthread_descr_struct *_pthread_descr;




 
typedef struct __pthread_attr_s
{
  int __detachstate;
  int __schedpolicy;
  struct __sched_param __schedparam;
  int __inheritsched;
  int __scope;
  size_t __guardsize;
  int __stackaddr_set;
  void *__stackaddr;
  size_t __stacksize;
} pthread_attr_t;


 
typedef struct
{
  struct _pthread_fastlock __c_lock;  
  _pthread_descr __c_waiting;         
} pthread_cond_t;


 
typedef struct
{
  int __dummy;
} pthread_condattr_t;

 
typedef unsigned int pthread_key_t;


 
 

typedef struct
{
  int __m_reserved;                
  int __m_count;                   
  _pthread_descr __m_owner;        
  int __m_kind;                    
  struct _pthread_fastlock __m_lock;  
} pthread_mutex_t;


 
typedef struct
{
  int __mutexkind;
} pthread_mutexattr_t;


 
typedef int pthread_once_t;


# 117 "/usr/include/bits/pthreadtypes.h" 3


# 136 "/usr/include/bits/pthreadtypes.h" 3



 
typedef unsigned long int pthread_t;


# 143 "/usr/include/bits/types.h" 2 3




# 39 "/usr/include/bits/time.h" 2 3

extern long int __sysconf (int);




 

 

 


 






# 73 "/usr/include/bits/time.h" 3

# 42 "/usr/include/time.h" 2 3


 













 
typedef __clock_t clock_t;









 
typedef __time_t time_t;










 
typedef __clockid_t clockid_t;










 
typedef __timer_t timer_t;









 

struct timespec
  {
    __time_t tv_sec;		 
    long int tv_nsec;		 
  };






 
struct tm
{
  int tm_sec;			 
  int tm_min;			 
  int tm_hour;			 
  int tm_mday;			 
  int tm_mon;			 
  int tm_year;			 
  int tm_wday;			 
  int tm_yday;			 
  int tm_isdst;			 


  long int tm_gmtoff;		 
  __const char *tm_zone;	 




};



 
struct itimerspec
  {
    struct timespec it_interval;
    struct timespec it_value;
  };

 
struct sigevent;











 

extern clock_t clock (void)  ;

 
extern time_t time (time_t *__timer)  ;

 
extern double difftime (time_t __time1, time_t __time0)
       __attribute__ ((__const__));

 
extern time_t mktime (struct tm *__tp)  ;


 


extern size_t strftime (char *__restrict __s, size_t __maxsize,
			__const char *__restrict __format,
			__const struct tm *__restrict __tp)  ;










 

extern struct tm *gmtime (__const time_t *__timer)  ;

 

extern struct tm *localtime (__const time_t *__timer)  ;


 

extern struct tm *gmtime_r (__const time_t *__restrict __timer,
			    struct tm *__restrict __tp)  ;

 

extern struct tm *localtime_r (__const time_t *__restrict __timer,
			       struct tm *__restrict __tp)  ;


 

extern char *asctime (__const struct tm *__tp)  ;

 
extern char *ctime (__const time_t *__timer)  ;


 

 

extern char *asctime_r (__const struct tm *__restrict __tp,
			char *__restrict __buf)  ;

 
extern char *ctime_r (__const time_t *__restrict __timer,
		      char *__restrict __buf)  ;



 
extern char *__tzname[2];	 
extern int __daylight;		 
extern long int __timezone;	 



 
extern char *tzname[2];

 

extern void tzset (void)  ;



extern int daylight;
extern long int timezone;



 

extern int stime (__const time_t *__when)  ;



 






 


 
extern time_t timegm (struct tm *__tp)  ;

 
extern time_t timelocal (struct tm *__tp)  ;

 
extern int dysize (int __year)    __attribute__ ((__const__));




 
extern int nanosleep (__const struct timespec *__requested_time,
		      struct timespec *__remaining)  ;


 
extern int clock_getres (clockid_t __clock_id, struct timespec *__res)  ;

 
extern int clock_gettime (clockid_t __clock_id, struct timespec *__tp)  ;

 
extern int clock_settime (clockid_t __clock_id, __const struct timespec *__tp)
      ;

# 305 "/usr/include/time.h" 3



 
extern int timer_create (clockid_t __clock_id,
			 struct sigevent *__restrict __evp,
			 timer_t *__restrict __timerid)  ;

 
extern int timer_delete (timer_t __timerid)  ;

 
extern int timer_settime (timer_t __timerid, int __flags,
			  __const struct itimerspec *__restrict __value,
			  struct itimerspec *__restrict __ovalue)  ;

 
extern int timer_gettime (timer_t __timerid, struct itimerspec *__value)
      ;

 
extern int timer_getoverrun (timer_t __timerid)  ;



# 349 "/usr/include/time.h" 3


# 359 "/usr/include/time.h" 3



 




# 32 "iec_std_lib.h" 2

# 1 "/usr/include/stdint.h" 1 3
 

















 







# 1 "/usr/include/bits/wchar.h" 1 3
 

























# 27 "/usr/include/stdint.h" 2 3

# 1 "/usr/include/bits/wordsize.h" 1 3
 


















# 28 "/usr/include/stdint.h" 2 3


 

 

 


typedef signed char		int8_t;
typedef short int		int16_t;
typedef int			int32_t;



__extension__
typedef long long int		int64_t;



 
typedef unsigned char		uint8_t;
typedef unsigned short int	uint16_t;

typedef unsigned int		uint32_t;





__extension__
typedef unsigned long long int	uint64_t;



 

 
typedef signed char		int_least8_t;
typedef short int		int_least16_t;
typedef int			int_least32_t;



__extension__
typedef long long int		int_least64_t;


 
typedef unsigned char		uint_least8_t;
typedef unsigned short int	uint_least16_t;
typedef unsigned int		uint_least32_t;



__extension__
typedef unsigned long long int	uint_least64_t;



 

 
typedef signed char		int_fast8_t;





typedef int			int_fast16_t;
typedef int			int_fast32_t;
__extension__
typedef long long int		int_fast64_t;


 
typedef unsigned char		uint_fast8_t;





typedef unsigned int		uint_fast16_t;
typedef unsigned int		uint_fast32_t;
__extension__
typedef unsigned long long int	uint_fast64_t;



 








typedef int			intptr_t;


typedef unsigned int		uintptr_t;



 




__extension__
typedef long long int		intmax_t;
__extension__
typedef unsigned long long int	uintmax_t;



 











 

 




 





 






 




 





 






 









 










 











 











 

 


 



 

 








 



 






 

 




 






 



 









 









 











# 33 "iec_std_lib.h" 2


# 1 "/usr/include/stdio.h" 1 3
 


















 









 



# 1 "/usr/lib/gcc-lib/i386-redhat-linux/2.95.3/include/stddef.h" 1 3






 


# 19 "/usr/lib/gcc-lib/i386-redhat-linux/2.95.3/include/stddef.h" 3



 


 





 


# 61 "/usr/lib/gcc-lib/i386-redhat-linux/2.95.3/include/stddef.h" 3


 





 


















 





 

 

# 131 "/usr/lib/gcc-lib/i386-redhat-linux/2.95.3/include/stddef.h" 3


 

 


# 188 "/usr/lib/gcc-lib/i386-redhat-linux/2.95.3/include/stddef.h" 3





 




 

# 271 "/usr/lib/gcc-lib/i386-redhat-linux/2.95.3/include/stddef.h" 3


# 283 "/usr/lib/gcc-lib/i386-redhat-linux/2.95.3/include/stddef.h" 3


 

 

# 317 "/usr/lib/gcc-lib/i386-redhat-linux/2.95.3/include/stddef.h" 3




 





















# 34 "/usr/include/stdio.h" 2 3










 
typedef struct _IO_FILE FILE;








 
typedef struct _IO_FILE __FILE;









# 1 "/usr/include/libio.h" 1 3
 






























# 1 "/usr/include/_G_config.h" 1 3
 





 






# 1 "/usr/lib/gcc-lib/i386-redhat-linux/2.95.3/include/stddef.h" 1 3






 


# 19 "/usr/lib/gcc-lib/i386-redhat-linux/2.95.3/include/stddef.h" 3



 


 





 


# 61 "/usr/lib/gcc-lib/i386-redhat-linux/2.95.3/include/stddef.h" 3


 





 


















 





 

 

# 131 "/usr/lib/gcc-lib/i386-redhat-linux/2.95.3/include/stddef.h" 3


 

 


# 188 "/usr/lib/gcc-lib/i386-redhat-linux/2.95.3/include/stddef.h" 3





 




 





























 


























typedef long int wchar_t;
























typedef unsigned int  wint_t;




 

 

# 317 "/usr/lib/gcc-lib/i386-redhat-linux/2.95.3/include/stddef.h" 3




 





















# 14 "/usr/include/_G_config.h" 2 3










# 1 "/usr/include/wchar.h" 1 3
 

















 











# 46 "/usr/include/wchar.h" 3


# 1 "/usr/lib/gcc-lib/i386-redhat-linux/2.95.3/include/stddef.h" 1 3






 


# 19 "/usr/lib/gcc-lib/i386-redhat-linux/2.95.3/include/stddef.h" 3



 


 





 


# 61 "/usr/lib/gcc-lib/i386-redhat-linux/2.95.3/include/stddef.h" 3


 





 


















 





 

 

# 131 "/usr/lib/gcc-lib/i386-redhat-linux/2.95.3/include/stddef.h" 3


 

 

# 190 "/usr/lib/gcc-lib/i386-redhat-linux/2.95.3/include/stddef.h" 3



 




 

# 271 "/usr/lib/gcc-lib/i386-redhat-linux/2.95.3/include/stddef.h" 3














 

 

# 317 "/usr/lib/gcc-lib/i386-redhat-linux/2.95.3/include/stddef.h" 3




 





















# 48 "/usr/include/wchar.h" 2 3




 













 
typedef struct
{
  int __count;
  union
  {
    wint_t __wch;
    char __wchb[4];
  } __value;		 
} __mbstate_t;




 

# 682 "/usr/include/wchar.h" 3



# 24 "/usr/include/_G_config.h" 2 3


typedef struct
{
  __off_t __pos;
  __mbstate_t __state;
} _G_fpos_t;
typedef struct
{
  __off64_t __pos;
  __mbstate_t __state;
} _G_fpos64_t;








# 1 "/usr/include/gconv.h" 1 3
 

















 








# 1 "/usr/include/wchar.h" 1 3
 

















 











# 46 "/usr/include/wchar.h" 3


# 1 "/usr/lib/gcc-lib/i386-redhat-linux/2.95.3/include/stddef.h" 1 3






 


# 19 "/usr/lib/gcc-lib/i386-redhat-linux/2.95.3/include/stddef.h" 3



 


 





 


# 61 "/usr/lib/gcc-lib/i386-redhat-linux/2.95.3/include/stddef.h" 3


 





 


















 





 

 

# 131 "/usr/lib/gcc-lib/i386-redhat-linux/2.95.3/include/stddef.h" 3


 

 

# 190 "/usr/lib/gcc-lib/i386-redhat-linux/2.95.3/include/stddef.h" 3



 




 

# 271 "/usr/lib/gcc-lib/i386-redhat-linux/2.95.3/include/stddef.h" 3














 

 

# 317 "/usr/lib/gcc-lib/i386-redhat-linux/2.95.3/include/stddef.h" 3




 





















# 48 "/usr/include/wchar.h" 2 3




 











# 76 "/usr/include/wchar.h" 3




 

# 682 "/usr/include/wchar.h" 3



# 28 "/usr/include/gconv.h" 2 3



# 1 "/usr/lib/gcc-lib/i386-redhat-linux/2.95.3/include/stddef.h" 1 3






 


# 19 "/usr/lib/gcc-lib/i386-redhat-linux/2.95.3/include/stddef.h" 3



 


 





 


# 61 "/usr/lib/gcc-lib/i386-redhat-linux/2.95.3/include/stddef.h" 3


 





 


















 





 

 

# 131 "/usr/lib/gcc-lib/i386-redhat-linux/2.95.3/include/stddef.h" 3


 

 


# 188 "/usr/lib/gcc-lib/i386-redhat-linux/2.95.3/include/stddef.h" 3





 




 


# 269 "/usr/lib/gcc-lib/i386-redhat-linux/2.95.3/include/stddef.h" 3




# 283 "/usr/lib/gcc-lib/i386-redhat-linux/2.95.3/include/stddef.h" 3


 

 

# 317 "/usr/lib/gcc-lib/i386-redhat-linux/2.95.3/include/stddef.h" 3




 





















# 31 "/usr/include/gconv.h" 2 3


 


 
enum
{
  __GCONV_OK = 0,
  __GCONV_NOCONV,
  __GCONV_NODB,
  __GCONV_NOMEM,

  __GCONV_EMPTY_INPUT,
  __GCONV_FULL_OUTPUT,
  __GCONV_ILLEGAL_INPUT,
  __GCONV_INCOMPLETE_INPUT,

  __GCONV_ILLEGAL_DESCRIPTOR,
  __GCONV_INTERNAL_ERROR
};


 
enum
{
  __GCONV_IS_LAST = 0x0001,
  __GCONV_IGNORE_ERRORS = 0x0002
};


 
struct __gconv_step;
struct __gconv_step_data;
struct __gconv_loaded_object;
struct __gconv_trans_data;


 
typedef int (*__gconv_fct) (struct __gconv_step *, struct __gconv_step_data *,
			    __const unsigned char **, __const unsigned char *,
			    unsigned char **, size_t *, int, int);

 
typedef int (*__gconv_init_fct) (struct __gconv_step *);
typedef void (*__gconv_end_fct) (struct __gconv_step *);


 
typedef int (*__gconv_trans_fct) (struct __gconv_step *,
				  struct __gconv_step_data *, void *,
				  __const unsigned char *,
				  __const unsigned char **,
				  __const unsigned char *, unsigned char **,
				  size_t *);

 
typedef int (*__gconv_trans_context_fct) (void *, __const unsigned char *,
					  __const unsigned char *,
					  unsigned char *, unsigned char *);

 
typedef int (*__gconv_trans_query_fct) (__const char *, __const char ***,
					size_t *);

 
typedef int (*__gconv_trans_init_fct) (void **, const char *);
typedef void (*__gconv_trans_end_fct) (void *);

struct __gconv_trans_data
{
   
  __gconv_trans_fct __trans_fct;
  __gconv_trans_context_fct __trans_context_fct;
  __gconv_trans_end_fct __trans_end_fct;
  void *__data;
  struct __gconv_trans_data *__next;
};


 
struct __gconv_step
{
  struct __gconv_loaded_object *__shlib_handle;
  __const char *__modname;

  int __counter;

  char *__from_name;
  char *__to_name;

  __gconv_fct __fct;
  __gconv_init_fct __init_fct;
  __gconv_end_fct __end_fct;

   

  int __min_needed_from;
  int __max_needed_from;
  int __min_needed_to;
  int __max_needed_to;

   
  int __stateful;

  void *__data;		 
};

 

struct __gconv_step_data
{
  unsigned char *__outbuf;     
  unsigned char *__outbufend;  


   
  int __flags;

   

  int __invocation_counter;

   

  int __internal_use;

  __mbstate_t *__statep;
  __mbstate_t __state;	 


   
  struct __gconv_trans_data *__trans;
};


 
typedef struct __gconv_info
{
  size_t __nsteps;
  struct __gconv_step *__steps;
  __extension__ struct __gconv_step_data __data [0] ;
} *__gconv_t;


# 44 "/usr/include/_G_config.h" 2 3

typedef union
{
  struct __gconv_info __cd;
  struct
  {
    struct __gconv_info __cd;
    struct __gconv_step_data __data;
  } __combined;
} _G_iconv_t;

typedef int _G_int16_t __attribute__ ((__mode__ (__HI__)));
typedef int _G_int32_t __attribute__ ((__mode__ (__SI__)));
typedef unsigned int _G_uint16_t __attribute__ ((__mode__ (__HI__)));
typedef unsigned int _G_uint32_t __attribute__ ((__mode__ (__SI__)));




 



















 




 














# 32 "/usr/include/libio.h" 2 3

 

















 

# 1 "/usr/lib/gcc-lib/i386-redhat-linux/2.95.3/include/stdarg.h" 1 3
 
































































 






typedef void *__gnuc_va_list;



 

# 122 "/usr/lib/gcc-lib/i386-redhat-linux/2.95.3/include/stdarg.h" 3




















# 209 "/usr/lib/gcc-lib/i386-redhat-linux/2.95.3/include/stdarg.h" 3




# 53 "/usr/include/libio.h" 2 3







# 72 "/usr/include/libio.h" 3


 

















# 103 "/usr/include/libio.h" 3











 

























 



















struct _IO_jump_t;  struct _IO_FILE;

 







typedef void _IO_lock_t;



 

struct _IO_marker {
  struct _IO_marker *_next;
  struct _IO_FILE *_sbuf;
   

   
  int _pos;
# 192 "/usr/include/libio.h" 3

};

 
enum __codecvt_result
{
  __codecvt_ok,
  __codecvt_partial,
  __codecvt_error,
  __codecvt_noconv
};

# 259 "/usr/include/libio.h" 3


struct _IO_FILE {
  int _flags;		 


   
   
  char* _IO_read_ptr;	 
  char* _IO_read_end;	 
  char* _IO_read_base;	 
  char* _IO_write_base;	 
  char* _IO_write_ptr;	 
  char* _IO_write_end;	 
  char* _IO_buf_base;	 
  char* _IO_buf_end;	 
   
  char *_IO_save_base;  
  char *_IO_backup_base;   
  char *_IO_save_end;  

  struct _IO_marker *_markers;

  struct _IO_FILE *_chain;

  int _fileno;
  int _blksize;
  __off_t   _old_offset;  


   
  unsigned short _cur_column;
  signed char _vtable_offset;
  char _shortbuf[1];

   

  _IO_lock_t *_lock;








  __off64_t   _offset;





  void *__pad1;
  void *__pad2;

  int _mode;
   
  char _unused2[15 * sizeof (int) - 2 * sizeof (void *)];

};


typedef struct _IO_FILE _IO_FILE;


struct _IO_FILE_plus;

extern struct _IO_FILE_plus _IO_2_1_stdin_;
extern struct _IO_FILE_plus _IO_2_1_stdout_;
extern struct _IO_FILE_plus _IO_2_1_stderr_;











 

 

typedef __ssize_t __io_read_fn (void *__cookie, char *__buf, size_t __nbytes);

 





typedef __ssize_t __io_write_fn (void *__cookie, __const char *__buf,
				 size_t __n);

 





typedef int __io_seek_fn (void *__cookie, __off64_t   *__pos, int __w);

 
typedef int __io_close_fn (void *__cookie);


# 389 "/usr/include/libio.h" 3







extern int __underflow (_IO_FILE *)  ;
extern int __uflow (_IO_FILE *)  ;
extern int __overflow (_IO_FILE *, int)  ;
extern wint_t   __wunderflow (_IO_FILE *)  ;
extern wint_t   __wuflow (_IO_FILE *)  ;
extern wint_t   __woverflow (_IO_FILE *, wint_t  )  ;
























extern int _IO_getc (_IO_FILE *__fp)  ;
extern int _IO_putc (int __c, _IO_FILE *__fp)  ;
extern int _IO_feof (_IO_FILE *__fp)  ;
extern int _IO_ferror (_IO_FILE *__fp)  ;

extern int _IO_peekc_locked (_IO_FILE *__fp)  ;

 



extern void _IO_flockfile (_IO_FILE *)  ;
extern void _IO_funlockfile (_IO_FILE *)  ;
extern int _IO_ftrylockfile (_IO_FILE *)  ;
















extern int _IO_vfscanf (_IO_FILE * __restrict, const char * __restrict,
			__gnuc_va_list , int *__restrict)  ;
extern int _IO_vfprintf (_IO_FILE *__restrict, const char *__restrict,
			 __gnuc_va_list )  ;
extern __ssize_t   _IO_padn (_IO_FILE *, int, __ssize_t  )  ;
extern size_t   _IO_sgetn (_IO_FILE *, void *, size_t  )  ;

extern __off64_t   _IO_seekoff (_IO_FILE *, __off64_t  , int, int)  ;
extern __off64_t   _IO_seekpos (_IO_FILE *, __off64_t  , int)  ;

extern void _IO_free_backup_area (_IO_FILE *)  ;

# 511 "/usr/include/libio.h" 3







# 65 "/usr/include/stdio.h" 2 3


# 76 "/usr/include/stdio.h" 3


 

typedef _G_fpos_t fpos_t;







 





 





 






 







 




 








# 1 "/usr/include/bits/stdio_lim.h" 1 3
 








































# 129 "/usr/include/stdio.h" 2 3



 
extern FILE *stdin;		 
extern FILE *stdout;		 
extern FILE *stderr;		 

 





 
extern int remove (__const char *__filename)  ;
 
extern int rename (__const char *__old, __const char *__new)  ;


 

extern FILE *tmpfile (void)  ;










 
extern char *tmpnam (char *__s)  ;


 

extern char *tmpnam_r (char *__s)  ;




 






extern char *tempnam (__const char *__dir, __const char *__pfx)
        ;



 
extern int fclose (FILE *__stream)  ;
 
extern int fflush (FILE *__stream)  ;


 
extern int fflush_unlocked (FILE *__stream)  ;









 
extern FILE *fopen (__const char *__restrict __filename,
		    __const char *__restrict __modes)  ;
 
extern FILE *freopen (__const char *__restrict __filename,
		      __const char *__restrict __modes,
		      FILE *__restrict __stream)  ;
# 222 "/usr/include/stdio.h" 3










 
extern FILE *fdopen (int __fd, __const char *__modes)  ;


# 251 "/usr/include/stdio.h" 3



 

extern void setbuf (FILE *__restrict __stream, char *__restrict __buf)  ;
 


extern int setvbuf (FILE *__restrict __stream, char *__restrict __buf,
		    int __modes, size_t __n)  ;


 

extern void setbuffer (FILE *__restrict __stream, char *__restrict __buf,
		       size_t __size)  ;

 
extern void setlinebuf (FILE *__stream)  ;



 
extern int fprintf (FILE *__restrict __stream,
		    __const char *__restrict __format, ...)  ;
 
extern int printf (__const char *__restrict __format, ...)  ;
 
extern int sprintf (char *__restrict __s,
		    __const char *__restrict __format, ...)  ;

 
extern int vfprintf (FILE *__restrict __s, __const char *__restrict __format,
		     __gnuc_va_list  __arg)  ;
 
extern int vprintf (__const char *__restrict __format, __gnuc_va_list  __arg)
      ;
 
extern int vsprintf (char *__restrict __s, __const char *__restrict __format,
		     __gnuc_va_list  __arg)  ;


 
extern int snprintf (char *__restrict __s, size_t __maxlen,
		     __const char *__restrict __format, ...)
       __attribute__ ((__format__ (__printf__, 3, 4)));

extern int vsnprintf (char *__restrict __s, size_t __maxlen,
		      __const char *__restrict __format, __gnuc_va_list  __arg)
       __attribute__ ((__format__ (__printf__, 3, 0)));


# 323 "/usr/include/stdio.h" 3



 
extern int fscanf (FILE *__restrict __stream,
		   __const char *__restrict __format, ...)  ;
 
extern int scanf (__const char *__restrict __format, ...)  ;
 
extern int sscanf (__const char *__restrict __s,
		   __const char *__restrict __format, ...)  ;

# 349 "/usr/include/stdio.h" 3



 
extern int fgetc (FILE *__stream)  ;
extern int getc (FILE *__stream)  ;

 
extern int getchar (void)  ;

 




 
extern int getc_unlocked (FILE *__stream)  ;
extern int getchar_unlocked (void)  ;



 
extern int fgetc_unlocked (FILE *__stream)  ;



 
extern int fputc (int __c, FILE *__stream)  ;
extern int putc (int __c, FILE *__stream)  ;

 
extern int putchar (int __c)  ;

 




 
extern int fputc_unlocked (int __c, FILE *__stream)  ;



 
extern int putc_unlocked (int __c, FILE *__stream)  ;
extern int putchar_unlocked (int __c)  ;




 
extern int getw (FILE *__stream)  ;

 
extern int putw (int __w, FILE *__stream)  ;



 
extern char *fgets (char *__restrict __s, int __n, FILE *__restrict __stream)
      ;







 

extern char *gets (char *__s)  ;


# 439 "/usr/include/stdio.h" 3



 
extern int fputs (__const char *__restrict __s, FILE *__restrict __stream)
      ;







 
extern int puts (__const char *__s)  ;


 
extern int ungetc (int __c, FILE *__stream)  ;


 
extern size_t fread (void *__restrict __ptr, size_t __size,
		     size_t __n, FILE *__restrict __stream)  ;
 
extern size_t fwrite (__const void *__restrict __ptr, size_t __size,
		      size_t __n, FILE *__restrict __s)  ;


 
extern size_t fread_unlocked (void *__restrict __ptr, size_t __size,
			      size_t __n, FILE *__restrict __stream)  ;
extern size_t fwrite_unlocked (__const void *__restrict __ptr, size_t __size,
			       size_t __n, FILE *__restrict __stream)  ;



 
extern int fseek (FILE *__stream, long int __off, int __whence)  ;
 
extern long int ftell (FILE *__stream)  ;
 
extern void rewind (FILE *__stream)  ;

 












 
extern int fgetpos (FILE *__restrict __stream, fpos_t *__restrict __pos)
      ;
 
extern int fsetpos (FILE *__stream, __const fpos_t *__pos)  ;
# 522 "/usr/include/stdio.h" 3










 
extern void clearerr (FILE *__stream)  ;
 
extern int feof (FILE *__stream)  ;
 
extern int ferror (FILE *__stream)  ;


 
extern void clearerr_unlocked (FILE *__stream)  ;
extern int feof_unlocked (FILE *__stream)  ;
extern int ferror_unlocked (FILE *__stream)  ;



 
extern void perror (__const char *__s)  ;

 


extern int sys_nerr;
extern __const char *__const sys_errlist[];








 
extern int fileno (FILE *__stream)  ;



 
extern int fileno_unlocked (FILE *__stream)  ;





 
extern FILE *popen (__const char *__command, __const char *__modes)  ;

 
extern int pclose (FILE *__stream)  ;




 
extern char *ctermid (char *__s)  ;









# 604 "/usr/include/stdio.h" 3




 

 
extern void flockfile (FILE *__stream)  ;

 

extern int ftrylockfile (FILE *__stream)  ;

 
extern void funlockfile (FILE *__stream)  ;










 





 




# 35 "iec_std_lib.h" 2

# 1 "/usr/include/stdlib.h" 1 3
 

















 







 





# 1 "/usr/lib/gcc-lib/i386-redhat-linux/2.95.3/include/stddef.h" 1 3






 


# 19 "/usr/lib/gcc-lib/i386-redhat-linux/2.95.3/include/stddef.h" 3



 


 





 


# 61 "/usr/lib/gcc-lib/i386-redhat-linux/2.95.3/include/stddef.h" 3


 





 


















 





 

 

# 131 "/usr/lib/gcc-lib/i386-redhat-linux/2.95.3/include/stddef.h" 3


 

 


# 188 "/usr/lib/gcc-lib/i386-redhat-linux/2.95.3/include/stddef.h" 3





 




 


# 269 "/usr/lib/gcc-lib/i386-redhat-linux/2.95.3/include/stddef.h" 3




# 283 "/usr/lib/gcc-lib/i386-redhat-linux/2.95.3/include/stddef.h" 3


 

 

# 317 "/usr/lib/gcc-lib/i386-redhat-linux/2.95.3/include/stddef.h" 3




 





















# 33 "/usr/include/stdlib.h" 2 3


 




# 91 "/usr/include/stdlib.h" 3


 
typedef struct
  {
    int quot;			 
    int rem;			 
  } div_t;

 

typedef struct
  {
    long int quot;		 
    long int rem;		 
  } ldiv_t;



# 118 "/usr/include/stdlib.h" 3



 



 





 

extern size_t __ctype_get_mb_cur_max (void)  ;


 
extern double atof (__const char *__nptr)    ;
 
extern int atoi (__const char *__nptr)    ;
 
extern long int atol (__const char *__nptr)    ;


 
__extension__ extern long long int atoll (__const char *__nptr)
        ;


 
extern double strtod (__const char *__restrict __nptr,
		      char **__restrict __endptr)  ;










 
extern long int strtol (__const char *__restrict __nptr,
			char **__restrict __endptr, int __base)  ;
 
extern unsigned long int strtoul (__const char *__restrict __nptr,
				  char **__restrict __endptr, int __base)
      ;


 
__extension__
extern long long int strtoq (__const char *__restrict __nptr,
			     char **__restrict __endptr, int __base)  ;
 
__extension__
extern unsigned long long int strtouq (__const char *__restrict __nptr,
				       char **__restrict __endptr, int __base)
      ;



 

 
__extension__
extern long long int strtoll (__const char *__restrict __nptr,
			      char **__restrict __endptr, int __base)  ;
 
__extension__
extern unsigned long long int strtoull (__const char *__restrict __nptr,
					char **__restrict __endptr, int __base)
      ;



# 244 "/usr/include/stdlib.h" 3



 


extern double __strtod_internal (__const char *__restrict __nptr,
				 char **__restrict __endptr, int __group)
      ;
extern float __strtof_internal (__const char *__restrict __nptr,
				char **__restrict __endptr, int __group)
      ;
extern long double __strtold_internal (__const char *__restrict __nptr,
				       char **__restrict __endptr,
				       int __group)  ;

extern long int __strtol_internal (__const char *__restrict __nptr,
				   char **__restrict __endptr,
				   int __base, int __group)  ;



extern unsigned long int __strtoul_internal (__const char *__restrict __nptr,
					     char **__restrict __endptr,
					     int __base, int __group)  ;




__extension__
extern long long int __strtoll_internal (__const char *__restrict __nptr,
					 char **__restrict __endptr,
					 int __base, int __group)  ;



__extension__
extern unsigned long long int __strtoull_internal (__const char *
						   __restrict __nptr,
						   char **__restrict __endptr,
						   int __base, int __group)
      ;




# 377 "/usr/include/stdlib.h" 3




 


extern char *l64a (long int __n)  ;

 
extern long int a64l (__const char *__s)    ;


# 1 "/usr/include/sys/types.h" 1 3
 

















 








 





typedef __u_char u_char;
typedef __u_short u_short;
typedef __u_int u_int;
typedef __u_long u_long;
typedef __quad_t quad_t;
typedef __u_quad_t u_quad_t;
typedef __fsid_t fsid_t;




typedef __loff_t loff_t;



typedef __ino_t ino_t;











typedef __dev_t dev_t;




typedef __gid_t gid_t;




typedef __mode_t mode_t;




typedef __nlink_t nlink_t;




typedef __uid_t uid_t;





typedef __off_t off_t;











typedef __pid_t pid_t;




typedef __id_t id_t;




typedef __ssize_t ssize_t;





typedef __daddr_t daddr_t;
typedef __caddr_t caddr_t;





typedef __key_t key_t;











# 143 "/usr/include/sys/types.h" 3



# 1 "/usr/lib/gcc-lib/i386-redhat-linux/2.95.3/include/stddef.h" 1 3






 


# 19 "/usr/lib/gcc-lib/i386-redhat-linux/2.95.3/include/stddef.h" 3



 


 





 


# 61 "/usr/lib/gcc-lib/i386-redhat-linux/2.95.3/include/stddef.h" 3


 





 


















 





 

 

# 131 "/usr/lib/gcc-lib/i386-redhat-linux/2.95.3/include/stddef.h" 3


 

 


# 188 "/usr/lib/gcc-lib/i386-redhat-linux/2.95.3/include/stddef.h" 3





 




 

# 271 "/usr/lib/gcc-lib/i386-redhat-linux/2.95.3/include/stddef.h" 3


# 283 "/usr/lib/gcc-lib/i386-redhat-linux/2.95.3/include/stddef.h" 3


 

 

# 317 "/usr/lib/gcc-lib/i386-redhat-linux/2.95.3/include/stddef.h" 3




 





















# 146 "/usr/include/sys/types.h" 2 3



 
typedef unsigned long int ulong;
typedef unsigned short int ushort;
typedef unsigned int uint;


 

# 180 "/usr/include/sys/types.h" 3


 













typedef unsigned int u_int8_t __attribute__ ((__mode__ (  __QI__ ))) ;
typedef unsigned int u_int16_t __attribute__ ((__mode__ (  __HI__ ))) ;
typedef unsigned int u_int32_t __attribute__ ((__mode__ (  __SI__ ))) ;
typedef unsigned int u_int64_t __attribute__ ((__mode__ (  __DI__ ))) ;

typedef int register_t __attribute__ ((__mode__ (__word__)));


 






 
# 1 "/usr/include/endian.h" 1 3
 






















 











 
# 1 "/usr/include/bits/endian.h" 1 3
 






# 37 "/usr/include/endian.h" 2 3


 



















# 212 "/usr/include/sys/types.h" 2 3


 
# 1 "/usr/include/sys/select.h" 1 3
 


















 






 


 
# 1 "/usr/include/bits/select.h" 1 3
 

























# 36 "/usr/include/bits/select.h" 3












# 56 "/usr/include/bits/select.h" 3

# 72 "/usr/include/bits/select.h" 3

# 31 "/usr/include/sys/select.h" 2 3


 
# 1 "/usr/include/bits/sigset.h" 1 3
 





















typedef int __sig_atomic_t;

 


typedef struct
  {
    unsigned long int __val[(1024 / (8 * sizeof (unsigned long int))) ];
  } __sigset_t;




 





# 125 "/usr/include/bits/sigset.h" 3

# 34 "/usr/include/sys/select.h" 2 3




typedef __sigset_t sigset_t;


 




# 1 "/usr/include/bits/time.h" 1 3
 


















 



# 57 "/usr/include/bits/time.h" 3








 

struct timeval
  {
    __time_t tv_sec;		 
    __suseconds_t tv_usec;	 
  };


# 46 "/usr/include/sys/select.h" 2 3



typedef __suseconds_t suseconds_t;




 
typedef long int __fd_mask;

 




 
typedef struct
  {
     





    __fd_mask __fds_bits[1024  / (8 * sizeof (__fd_mask)) ];


  } fd_set;

 



 
typedef __fd_mask fd_mask;

 




 






 

 




extern int select (int __nfds, fd_set *__restrict __readfds,
		   fd_set *__restrict __writefds,
		   fd_set *__restrict __exceptfds,
		   struct timeval *__restrict __timeout)  ;

# 116 "/usr/include/sys/select.h" 3


 


# 215 "/usr/include/sys/types.h" 2 3


 
# 1 "/usr/include/sys/sysmacros.h" 1 3
 





















 








# 47 "/usr/include/sys/sysmacros.h" 3



# 218 "/usr/include/sys/types.h" 2 3









 


typedef __blkcnt_t blkcnt_t;	  



typedef __fsblkcnt_t fsblkcnt_t;  



typedef __fsfilcnt_t fsfilcnt_t;  


# 254 "/usr/include/sys/types.h" 3








 


# 390 "/usr/include/stdlib.h" 2 3


 



 
extern long int random (void)  ;

 
extern void srandom (unsigned int __seed)  ;

 



extern char *initstate (unsigned int __seed, char *__statebuf,
			size_t __statelen)  ;

 

extern char *setstate (char *__statebuf)  ;



 



struct random_data
  {
    int32_t *fptr;		 
    int32_t *rptr;		 
    int32_t *state;		 
    int rand_type;		 
    int rand_deg;		 
    int rand_sep;		 
    int32_t *end_ptr;		 
  };

extern int random_r (struct random_data *__restrict __buf,
		     int32_t *__restrict __result)  ;

extern int srandom_r (unsigned int __seed, struct random_data *__buf)  ;

extern int initstate_r (unsigned int __seed, char *__restrict __statebuf,
			size_t __statelen,
			struct random_data *__restrict __buf)  ;

extern int setstate_r (char *__restrict __statebuf,
		       struct random_data *__restrict __buf)  ;




 
extern int rand (void)  ;
 
extern void srand (unsigned int __seed)  ;


 
extern int rand_r (unsigned int *__seed)  ;




 

 
extern double drand48 (void)  ;
extern double erand48 (unsigned short int __xsubi[3])  ;

 
extern long int lrand48 (void)  ;
extern long int nrand48 (unsigned short int __xsubi[3])  ;

 
extern long int mrand48 (void)  ;
extern long int jrand48 (unsigned short int __xsubi[3])  ;

 
extern void srand48 (long int __seedval)  ;
extern unsigned short int *seed48 (unsigned short int __seed16v[3])  ;
extern void lcong48 (unsigned short int __param[7])  ;


 


struct drand48_data
  {
    unsigned short int __x[3];	 
    unsigned short int __old_x[3];  
    unsigned short int __c;	 
    unsigned short int __init;	 
    unsigned long long int __a;	 
  };

 
extern int drand48_r (struct drand48_data *__restrict __buffer,
		      double *__restrict __result)  ;
extern int erand48_r (unsigned short int __xsubi[3],
		      struct drand48_data *__restrict __buffer,
		      double *__restrict __result)  ;

 
extern int lrand48_r (struct drand48_data *__restrict __buffer,
		      long int *__restrict __result)  ;
extern int nrand48_r (unsigned short int __xsubi[3],
		      struct drand48_data *__restrict __buffer,
		      long int *__restrict __result)  ;

 
extern int mrand48_r (struct drand48_data *__restrict __buffer,
		      long int *__restrict __result)  ;
extern int jrand48_r (unsigned short int __xsubi[3],
		      struct drand48_data *__restrict __buffer,
		      long int *__restrict __result)  ;

 
extern int srand48_r (long int __seedval, struct drand48_data *__buffer)
      ;

extern int seed48_r (unsigned short int __seed16v[3],
		     struct drand48_data *__buffer)  ;

extern int lcong48_r (unsigned short int __param[7],
		      struct drand48_data *__buffer)  ;







 
extern void *malloc (size_t __size)    ;
 
extern void *calloc (size_t __nmemb, size_t __size)
        ;



 

extern void *realloc (void *__ptr, size_t __size)    ;
 
extern void free (void *__ptr)  ;


 
extern void cfree (void *__ptr)  ;



# 1 "/usr/include/alloca.h" 1 3
 























# 1 "/usr/lib/gcc-lib/i386-redhat-linux/2.95.3/include/stddef.h" 1 3






 


# 19 "/usr/lib/gcc-lib/i386-redhat-linux/2.95.3/include/stddef.h" 3



 


 





 


# 61 "/usr/lib/gcc-lib/i386-redhat-linux/2.95.3/include/stddef.h" 3


 





 


















 





 

 

# 131 "/usr/lib/gcc-lib/i386-redhat-linux/2.95.3/include/stddef.h" 3


 

 


# 188 "/usr/lib/gcc-lib/i386-redhat-linux/2.95.3/include/stddef.h" 3





 




 

# 271 "/usr/lib/gcc-lib/i386-redhat-linux/2.95.3/include/stddef.h" 3


# 283 "/usr/lib/gcc-lib/i386-redhat-linux/2.95.3/include/stddef.h" 3


 

 

# 317 "/usr/lib/gcc-lib/i386-redhat-linux/2.95.3/include/stddef.h" 3




 





















# 25 "/usr/include/alloca.h" 2 3


 

 


 
extern void *alloca (size_t __size)  ;





 


# 546 "/usr/include/stdlib.h" 2 3




 
extern void *valloc (size_t __size)    ;








 
extern void abort (void)   __attribute__ ((__noreturn__));


 
extern int atexit (void (*__func) (void))  ;


 

extern int on_exit (void (*__func) (int __status, void *__arg), void *__arg)
      ;


 


extern void exit (int __status)   __attribute__ ((__noreturn__));








 
extern char *getenv (__const char *__name)  ;

 

extern char *__secure_getenv (__const char *__name)  ;


 
 

extern int putenv (char *__string)  ;



 

extern int setenv (__const char *__name, __const char *__value, int __replace)
      ;

 
extern int unsetenv (__const char *__name)  ;



 


extern int clearenv (void)  ;




 



extern char *mktemp (char *__template)  ;

 





extern int mkstemp (char *__template)  ;













 




extern char *mkdtemp (char *__template)  ;



 
extern int system (__const char *__command)  ;










 





extern char *realpath (__const char *__restrict __name,
		       char *__restrict __resolved)  ;



 


typedef int (*__compar_fn_t) (__const void *, __const void *);






 

extern void *bsearch (__const void *__key, __const void *__base,
		      size_t __nmemb, size_t __size, __compar_fn_t __compar);

 

extern void qsort (void *__base, size_t __nmemb, size_t __size,
		   __compar_fn_t __compar);


 
extern int abs (int __x)   __attribute__ ((__const__));
extern long int labs (long int __x)   __attribute__ ((__const__));






 

 
extern div_t div (int __numer, int __denom)
       __attribute__ ((__const__));
extern ldiv_t ldiv (long int __numer, long int __denom)
       __attribute__ ((__const__));








 


 


extern char *ecvt (double __value, int __ndigit, int *__restrict __decpt,
		   int *__restrict __sign)  ;

 


extern char *fcvt (double __value, int __ndigit, int *__restrict __decpt,
		   int *__restrict __sign)  ;

 


extern char *gcvt (double __value, int __ndigit, char *__buf)  ;



 
extern char *qecvt (long double __value, int __ndigit,
		    int *__restrict __decpt, int *__restrict __sign)  ;
extern char *qfcvt (long double __value, int __ndigit,
		    int *__restrict __decpt, int *__restrict __sign)  ;
extern char *qgcvt (long double __value, int __ndigit, char *__buf)  ;


 

extern int ecvt_r (double __value, int __ndigit, int *__restrict __decpt,
		   int *__restrict __sign, char *__restrict __buf,
		   size_t __len)  ;
extern int fcvt_r (double __value, int __ndigit, int *__restrict __decpt,
		   int *__restrict __sign, char *__restrict __buf,
		   size_t __len)  ;

extern int qecvt_r (long double __value, int __ndigit,
		    int *__restrict __decpt, int *__restrict __sign,
		    char *__restrict __buf, size_t __len)  ;
extern int qfcvt_r (long double __value, int __ndigit,
		    int *__restrict __decpt, int *__restrict __sign,
		    char *__restrict __buf, size_t __len)  ;




 

extern int mblen (__const char *__s, size_t __n)  ;
 

extern int mbtowc (wchar_t *__restrict __pwc,
		   __const char *__restrict __s, size_t __n)  ;
 

extern int wctomb (char *__s, wchar_t __wchar)  ;


 
extern size_t mbstowcs (wchar_t *__restrict  __pwcs,
			__const char *__restrict __s, size_t __n)  ;
 
extern size_t wcstombs (char *__restrict __s,
			__const wchar_t *__restrict __pwcs, size_t __n)
      ;



 



extern int rpmatch (__const char *__response)  ;



# 811 "/usr/include/stdlib.h" 3









 






# 842 "/usr/include/stdlib.h" 3


# 852 "/usr/include/stdlib.h" 3



 


extern int getloadavg (double __loadavg[], int __nelem)  ;





 


# 36 "iec_std_lib.h" 2

# 1 "/usr/include/string.h" 1 3
 

















 








 

 


# 1 "/usr/lib/gcc-lib/i386-redhat-linux/2.95.3/include/stddef.h" 1 3






 


# 19 "/usr/lib/gcc-lib/i386-redhat-linux/2.95.3/include/stddef.h" 3



 


 





 


# 61 "/usr/lib/gcc-lib/i386-redhat-linux/2.95.3/include/stddef.h" 3


 





 


















 





 

 

# 131 "/usr/lib/gcc-lib/i386-redhat-linux/2.95.3/include/stddef.h" 3


 

 


# 188 "/usr/lib/gcc-lib/i386-redhat-linux/2.95.3/include/stddef.h" 3





 




 

# 271 "/usr/lib/gcc-lib/i386-redhat-linux/2.95.3/include/stddef.h" 3


# 283 "/usr/lib/gcc-lib/i386-redhat-linux/2.95.3/include/stddef.h" 3


 

 

# 317 "/usr/lib/gcc-lib/i386-redhat-linux/2.95.3/include/stddef.h" 3




 





















# 33 "/usr/include/string.h" 2 3



 
extern void *memcpy (void *__restrict __dest,
		     __const void *__restrict __src, size_t __n)  ;
 

extern void *memmove (void *__dest, __const void *__src, size_t __n)
      ;

 



extern void *memccpy (void *__restrict __dest, __const void *__restrict __src,
		      int __c, size_t __n)
      ;



 
extern void *memset (void *__s, int __c, size_t __n)  ;

 
extern int memcmp (__const void *__s1, __const void *__s2, size_t __n)
        ;

 
extern void *memchr (__const void *__s, int __c, size_t __n)
         ;

# 73 "/usr/include/string.h" 3



 
extern char *strcpy (char *__restrict __dest, __const char *__restrict __src)
      ;
 
extern char *strncpy (char *__restrict __dest,
		      __const char *__restrict __src, size_t __n)  ;

 
extern char *strcat (char *__restrict __dest, __const char *__restrict __src)
      ;
 
extern char *strncat (char *__restrict __dest, __const char *__restrict __src,
		      size_t __n)  ;

 
extern int strcmp (__const char *__s1, __const char *__s2)
        ;
 
extern int strncmp (__const char *__s1, __const char *__s2, size_t __n)
        ;

 
extern int strcoll (__const char *__s1, __const char *__s2)
        ;
 
extern size_t strxfrm (char *__restrict __dest,
		       __const char *__restrict __src, size_t __n)  ;

# 116 "/usr/include/string.h" 3



 
extern char *strdup (__const char *__s)    ;


 







# 152 "/usr/include/string.h" 3


 
extern char *strchr (__const char *__s, int __c)    ;
 
extern char *strrchr (__const char *__s, int __c)    ;







 

extern size_t strcspn (__const char *__s, __const char *__reject)
        ;
 

extern size_t strspn (__const char *__s, __const char *__accept)
        ;
 
extern char *strpbrk (__const char *__s, __const char *__accept)
        ;
 
extern char *strstr (__const char *__haystack, __const char *__needle)
        ;







 
extern char *strtok (char *__restrict __s, __const char *__restrict __delim)
      ;

 

extern char *__strtok_r (char *__restrict __s,
			 __const char *__restrict __delim,
			 char **__restrict __save_ptr)  ;

extern char *strtok_r (char *__restrict __s, __const char *__restrict __delim,
		       char **__restrict __save_ptr)  ;


# 214 "/usr/include/string.h" 3



 
extern size_t strlen (__const char *__s)    ;









 
extern char *strerror (int __errnum)  ;

 

extern char *strerror_r (int __errnum, char *__buf, size_t __buflen)  ;


 

extern void __bzero (void *__s, size_t __n)  ;


 
extern void bcopy (__const void *__src, void *__dest, size_t __n)  ;

 
extern void bzero (void *__s, size_t __n)  ;

 
extern int bcmp (__const void *__s1, __const void *__s2, size_t __n)
        ;

 
extern char *index (__const char *__s, int __c)    ;

 
extern char *rindex (__const char *__s, int __c)    ;

 

extern int ffs (int __i)   __attribute__ ((__const__));

 









 
extern int strcasecmp (__const char *__s1, __const char *__s2)
        ;

 
extern int strncasecmp (__const char *__s1, __const char *__s2, size_t __n)
        ;


# 289 "/usr/include/string.h" 3



 

extern char *strsep (char **__restrict __stringp,
		     __const char *__restrict __delim)  ;


# 332 "/usr/include/string.h" 3




# 361 "/usr/include/string.h" 3



 


# 37 "iec_std_lib.h" 2

# 1 "/usr/lib/gcc-lib/i386-redhat-linux/2.95.3/include/stdarg.h" 1 3
 
































































 










 



 

















void va_end (__gnuc_va_list);		 


 



 












 























 
 













# 175 "/usr/lib/gcc-lib/i386-redhat-linux/2.95.3/include/stdarg.h" 3


 




 

 

 

typedef __gnuc_va_list va_list;
























# 38 "iec_std_lib.h" 2










 


# 1 "iec_types_all.h" 1
 























 















 
















 
 
 

 
# 1 "iec_types.h" 1



# 1 "/usr/lib/gcc-lib/i386-redhat-linux/2.95.3/include/limits.h" 1 3
 


 

# 114 "/usr/lib/gcc-lib/i386-redhat-linux/2.95.3/include/limits.h" 3







# 4 "iec_types.h" 2




 
 
 

typedef uint8_t  IEC_BOOL;

typedef int8_t    IEC_SINT;
typedef int16_t   IEC_INT;
typedef int32_t   IEC_DINT;
typedef int64_t   IEC_LINT;

typedef uint8_t    IEC_USINT;
typedef uint16_t   IEC_UINT;
typedef uint32_t   IEC_UDINT;
typedef uint64_t   IEC_ULINT;

typedef uint8_t    IEC_BYTE;
typedef uint16_t   IEC_WORD;
typedef uint32_t   IEC_DWORD;
typedef uint64_t   IEC_LWORD;

typedef float    IEC_REAL;
typedef double   IEC_LREAL;

typedef struct {
    long int tv_sec;             
    long int tv_nsec;            
}__attribute__((packed)) IEC_TIMESPEC;

typedef IEC_TIMESPEC IEC_TIME;
typedef IEC_TIMESPEC IEC_DATE;
typedef IEC_TIMESPEC IEC_DT;
typedef IEC_TIMESPEC IEC_TOD;









typedef int8_t  __strlen_t;
typedef struct {
    __strlen_t len;
    uint8_t body[126 ];
} __attribute__((packed)) IEC_STRING;


# 63 "iec_types_all.h" 2











# 86 "iec_types_all.h"






# 102 "iec_types_all.h"



















 
 
       typedef IEC_REAL   REAL ;typedef struct { IEC_REAL  value; IEC_BYTE flags;} __IEC_REAL_t;typedef struct { IEC_REAL  *value; IEC_BYTE flags; IEC_REAL  fvalue;} __IEC_REAL_p;       typedef IEC_LREAL   LREAL ;typedef struct { IEC_LREAL  value; IEC_BYTE flags;} __IEC_LREAL_t;typedef struct { IEC_LREAL  *value; IEC_BYTE flags; IEC_LREAL  fvalue;} __IEC_LREAL_p;         typedef IEC_SINT   SINT ;typedef struct { IEC_SINT  value; IEC_BYTE flags;} __IEC_SINT_t;typedef struct { IEC_SINT  *value; IEC_BYTE flags; IEC_SINT  fvalue;} __IEC_SINT_p;        typedef IEC_INT   INT ;typedef struct { IEC_INT  value; IEC_BYTE flags;} __IEC_INT_t;typedef struct { IEC_INT  *value; IEC_BYTE flags; IEC_INT  fvalue;} __IEC_INT_p;        typedef IEC_DINT   DINT ;typedef struct { IEC_DINT  value; IEC_BYTE flags;} __IEC_DINT_t;typedef struct { IEC_DINT  *value; IEC_BYTE flags; IEC_DINT  fvalue;} __IEC_DINT_p;        typedef IEC_LINT   LINT ;typedef struct { IEC_LINT  value; IEC_BYTE flags;} __IEC_LINT_t;typedef struct { IEC_LINT  *value; IEC_BYTE flags; IEC_LINT  fvalue;} __IEC_LINT_p;         typedef IEC_USINT   USINT ;typedef struct { IEC_USINT  value; IEC_BYTE flags;} __IEC_USINT_t;typedef struct { IEC_USINT  *value; IEC_BYTE flags; IEC_USINT  fvalue;} __IEC_USINT_p;        typedef IEC_UINT   UINT ;typedef struct { IEC_UINT  value; IEC_BYTE flags;} __IEC_UINT_t;typedef struct { IEC_UINT  *value; IEC_BYTE flags; IEC_UINT  fvalue;} __IEC_UINT_p;        typedef IEC_UDINT   UDINT ;typedef struct { IEC_UDINT  value; IEC_BYTE flags;} __IEC_UDINT_t;typedef struct { IEC_UDINT  *value; IEC_BYTE flags; IEC_UDINT  fvalue;} __IEC_UDINT_p;        typedef IEC_ULINT   ULINT ;typedef struct { IEC_ULINT  value; IEC_BYTE flags;} __IEC_ULINT_t;typedef struct { IEC_ULINT  *value; IEC_BYTE flags; IEC_ULINT  fvalue;} __IEC_ULINT_p;        typedef IEC_TIME   TIME ;typedef struct { IEC_TIME  value; IEC_BYTE flags;} __IEC_TIME_t;typedef struct { IEC_TIME  *value; IEC_BYTE flags; IEC_TIME  fvalue;} __IEC_TIME_p;       typedef IEC_BYTE   BYTE ;typedef struct { IEC_BYTE  value; IEC_BYTE flags;} __IEC_BYTE_t;typedef struct { IEC_BYTE  *value; IEC_BYTE flags; IEC_BYTE  fvalue;} __IEC_BYTE_p;      typedef IEC_WORD   WORD ;typedef struct { IEC_WORD  value; IEC_BYTE flags;} __IEC_WORD_t;typedef struct { IEC_WORD  *value; IEC_BYTE flags; IEC_WORD  fvalue;} __IEC_WORD_p;      typedef IEC_DWORD   DWORD ;typedef struct { IEC_DWORD  value; IEC_BYTE flags;} __IEC_DWORD_t;typedef struct { IEC_DWORD  *value; IEC_BYTE flags; IEC_DWORD  fvalue;} __IEC_DWORD_p;      typedef IEC_LWORD   LWORD ;typedef struct { IEC_LWORD  value; IEC_BYTE flags;} __IEC_LWORD_t;typedef struct { IEC_LWORD  *value; IEC_BYTE flags; IEC_LWORD  fvalue;} __IEC_LWORD_p;      typedef IEC_BOOL   BOOL ;typedef struct { IEC_BOOL  value; IEC_BYTE flags;} __IEC_BOOL_t;typedef struct { IEC_BOOL  *value; IEC_BYTE flags; IEC_BOOL  fvalue;} __IEC_BOOL_p;      typedef IEC_STRING   STRING ;typedef struct { IEC_STRING  value; IEC_BYTE flags;} __IEC_STRING_t;typedef struct { IEC_STRING  *value; IEC_BYTE flags; IEC_STRING  fvalue;} __IEC_STRING_p;      typedef IEC_DATE   DATE ;typedef struct { IEC_DATE  value; IEC_BYTE flags;} __IEC_DATE_t;typedef struct { IEC_DATE  *value; IEC_BYTE flags; IEC_DATE  fvalue;} __IEC_DATE_p;     typedef IEC_TOD   TOD ;typedef struct { IEC_TOD  value; IEC_BYTE flags;} __IEC_TOD_t;typedef struct { IEC_TOD  *value; IEC_BYTE flags; IEC_TOD  fvalue;} __IEC_TOD_p;     typedef IEC_DT   DT ;typedef struct { IEC_DT  value; IEC_BYTE flags;} __IEC_DT_t;typedef struct { IEC_DT  *value; IEC_BYTE flags; IEC_DT  fvalue;} __IEC_DT_p;    

typedef struct {
  __IEC_BOOL_t state;      
  BOOL prev_state;   
  TIME elapsed_time;   
} STEP;

typedef struct {
  BOOL stored;   
  BOOL state;  
  BOOL set;    
  BOOL reset;  
  TIME set_remaining_time;     
  TIME reset_remaining_time;   
} ACTION;

 


 



typedef enum{
          REAL_ENUM,        LREAL_ENUM,          SINT_ENUM,         INT_ENUM,         DINT_ENUM,         LINT_ENUM,          USINT_ENUM,         UINT_ENUM,         UDINT_ENUM,         ULINT_ENUM,         TIME_ENUM,        BYTE_ENUM,       WORD_ENUM,       DWORD_ENUM,       LWORD_ENUM,       BOOL_ENUM,       STRING_ENUM,       DATE_ENUM,      TOD_ENUM,      DT_ENUM,    
          REAL_P_ENUM,        LREAL_P_ENUM,          SINT_P_ENUM,         INT_P_ENUM,         DINT_P_ENUM,         LINT_P_ENUM,          USINT_P_ENUM,         UINT_P_ENUM,         UDINT_P_ENUM,         ULINT_P_ENUM,         TIME_P_ENUM,        BYTE_P_ENUM,       WORD_P_ENUM,       DWORD_P_ENUM,       LWORD_P_ENUM,       BOOL_P_ENUM,       STRING_P_ENUM,       DATE_P_ENUM,      TOD_P_ENUM,      DT_P_ENUM,    
          REAL_O_ENUM,        LREAL_O_ENUM,          SINT_O_ENUM,         INT_O_ENUM,         DINT_O_ENUM,         LINT_O_ENUM,          USINT_O_ENUM,         UINT_O_ENUM,         UDINT_O_ENUM,         ULINT_O_ENUM,         TIME_O_ENUM,        BYTE_O_ENUM,       WORD_O_ENUM,       DWORD_O_ENUM,       LWORD_O_ENUM,       BOOL_O_ENUM,       STRING_O_ENUM,       DATE_O_ENUM,      TOD_O_ENUM,      DT_O_ENUM,    
   
  UNKNOWN_ENUM
} __IEC_types_enum;

 





static inline USINT __get_type_enum_size(__IEC_types_enum t){
 switch(t){
         case  REAL_ENUM:	case  REAL_O_ENUM:	case  REAL_P_ENUM:	return sizeof( REAL );       case  LREAL_ENUM:	case  LREAL_O_ENUM:	case  LREAL_P_ENUM:	return sizeof( LREAL );         case  SINT_ENUM:	case  SINT_O_ENUM:	case  SINT_P_ENUM:	return sizeof( SINT );        case  INT_ENUM:	case  INT_O_ENUM:	case  INT_P_ENUM:	return sizeof( INT );        case  DINT_ENUM:	case  DINT_O_ENUM:	case  DINT_P_ENUM:	return sizeof( DINT );        case  LINT_ENUM:	case  LINT_O_ENUM:	case  LINT_P_ENUM:	return sizeof( LINT );         case  USINT_ENUM:	case  USINT_O_ENUM:	case  USINT_P_ENUM:	return sizeof( USINT );        case  UINT_ENUM:	case  UINT_O_ENUM:	case  UINT_P_ENUM:	return sizeof( UINT );        case  UDINT_ENUM:	case  UDINT_O_ENUM:	case  UDINT_P_ENUM:	return sizeof( UDINT );        case  ULINT_ENUM:	case  ULINT_O_ENUM:	case  ULINT_P_ENUM:	return sizeof( ULINT );        case  TIME_ENUM:	case  TIME_O_ENUM:	case  TIME_P_ENUM:	return sizeof( TIME );       case  BYTE_ENUM:	case  BYTE_O_ENUM:	case  BYTE_P_ENUM:	return sizeof( BYTE );      case  WORD_ENUM:	case  WORD_O_ENUM:	case  WORD_P_ENUM:	return sizeof( WORD );      case  DWORD_ENUM:	case  DWORD_O_ENUM:	case  DWORD_P_ENUM:	return sizeof( DWORD );      case  LWORD_ENUM:	case  LWORD_O_ENUM:	case  LWORD_P_ENUM:	return sizeof( LWORD );      case  BOOL_ENUM:	case  BOOL_O_ENUM:	case  BOOL_P_ENUM:	return sizeof( BOOL );      case  STRING_ENUM:	case  STRING_O_ENUM:	case  STRING_P_ENUM:	return sizeof( STRING );      case  DATE_ENUM:	case  DATE_O_ENUM:	case  DATE_P_ENUM:	return sizeof( DATE );     case  TOD_ENUM:	case  TOD_O_ENUM:	case  TOD_P_ENUM:	return sizeof( TOD );     case  DT_ENUM:	case  DT_O_ENUM:	case  DT_P_ENUM:	return sizeof( DT );    
   

  default:
	  return 0;
 }
 return 0;
}


# 51 "iec_std_lib.h" 2


extern TIME __CURRENT_TIME;
extern BOOL __DEBUG;

 





 














 







 










































 




typedef union __IL_DEFVAR_T {
    BOOL    BOOLvar;

    SINT    SINTvar;
    INT     INTvar;
    DINT    DINTvar;
    LINT    LINTvar;

    USINT   USINTvar;
    UINT    UINTvar;
    UDINT   UDINTvar;
    ULINT   ULINTvar;

    BYTE    BYTEvar;
    WORD    WORDvar;
    DWORD   DWORDvar;
    LWORD   LWORDvar;

    REAL    REALvar;
    LREAL   LREALvar;

    TIME    TIMEvar;
    TOD TODvar;
    DT  DTvar;
    DATE    DATEvar;
} __IL_DEFVAR_T;


 
 
 
 
 
 
 
 
 
 


 
 
 

 
static inline void __iec_error(void) {
   
  fprintf(stderr , "IEC 61131-3 runtime error.\n");
   
}

 
 
 

static inline void __normalize_timespec (IEC_TIMESPEC *ts) {
  if( ts->tv_nsec < -1000000000 || (( ts->tv_sec > 0 ) && ( ts->tv_nsec < 0 ))){
    ts->tv_sec--;
    ts->tv_nsec += 1000000000;
  }
  if( ts->tv_nsec > 1000000000 || (( ts->tv_sec < 0 ) && ( ts->tv_nsec > 0 ))){
    ts->tv_sec++;
    ts->tv_nsec -= 1000000000;
  }
}

 
 
 

static inline IEC_TIMESPEC __time_to_timespec(int sign, double mseconds, double seconds, double minutes, double hours, double days) {
  IEC_TIMESPEC ts;

   
  long double total_sec = ((days*24 + hours)*60 + minutes)*60 + seconds + mseconds/1e3;
  if (sign >= 0) sign = 1; else sign = -1;
  ts.tv_sec = sign * (long int)total_sec;
  ts.tv_nsec = sign * (long int)((total_sec - ts.tv_sec)*1e9);

  return ts;
}


static inline IEC_TIMESPEC __tod_to_timespec(double seconds, double minutes, double hours) {
  IEC_TIMESPEC ts;

  long double total_sec = (hours*60 + minutes)*60 + seconds;
  ts.tv_sec = (long int)total_sec;
  ts.tv_nsec = (long int)((total_sec - ts.tv_sec)*1e9);

  return ts;
}

static inline IEC_TIMESPEC __date_to_timespec(int day, int month, int year) {
  IEC_TIMESPEC ts;
  struct tm broken_down_time;
  time_t epoch_seconds;

  broken_down_time.tm_sec = 0;
  broken_down_time.tm_min = 0;
  broken_down_time.tm_hour = 0;
  broken_down_time.tm_mday = day;   
  broken_down_time.tm_mon = month - 1;    
  broken_down_time.tm_year = year - 1900;   

  epoch_seconds = mktime(&broken_down_time);  

  if ((time_t)(-1) == epoch_seconds)
    __iec_error();

  ts.tv_sec = epoch_seconds;
  ts.tv_nsec = 0;

  return ts;
}

static inline IEC_TIMESPEC __dt_to_timespec(double seconds,  double minutes, double hours, int day, int month, int year) {
  IEC_TIMESPEC ts;
  struct tm broken_down_time;
  time_t epoch_seconds;

  long double total_sec = (hours*60 + minutes)*60 + seconds;
  ts.tv_sec = (long int)total_sec;
  ts.tv_nsec = (long int)((total_sec - ts.tv_sec)*1e9);

  broken_down_time.tm_sec = 0;
  broken_down_time.tm_min = 0;
  broken_down_time.tm_hour = 0;
  broken_down_time.tm_mday = day;   
  broken_down_time.tm_mon = month - 1;    
  broken_down_time.tm_year = year - 1900;   

  epoch_seconds = mktime(&broken_down_time);  
  if ((time_t)(-1) == epoch_seconds)
    __iec_error();

  ts.tv_sec += epoch_seconds;
  if (ts.tv_sec < epoch_seconds)
     
    __iec_error();

  return ts;
}

 
 
 



static inline TIME __time_add(TIME IN1, TIME IN2){
  TIME res ={IN1.tv_sec + IN2.tv_sec,
             IN1.tv_nsec + IN2.tv_nsec };
  __normalize_timespec(&res);
  return res;
}
static inline TIME __time_sub(TIME IN1, TIME IN2){
  TIME res ={IN1.tv_sec - IN2.tv_sec,
             IN1.tv_nsec - IN2.tv_nsec };
  __normalize_timespec(&res);
  return res;
}
static inline TIME __time_mul(TIME IN1, LREAL IN2){
  LREAL s_f = IN1.tv_sec * IN2;
  time_t s = s_f;
  div_t ns = div((LREAL)IN1.tv_nsec * IN2, 1000000000);
  TIME res = {s + ns.quot,
              ns.rem + (s_f - s) * 1000000000 };
  __normalize_timespec(&res);
  return res;
}
static inline TIME __time_div(TIME IN1, LREAL IN2){
  LREAL s_f = IN1.tv_sec / IN2;
  time_t s = s_f;
  TIME res = {s,
              IN1.tv_nsec / IN2 + (s_f - s) * 1000000000 };
  __normalize_timespec(&res);
  return res;
}


 
 
 
     
     
     
static inline LINT __real_round(LREAL IN) {
	return fmod(IN, 1) == 0 ? ((LINT)IN / 2) * 2 : (LINT)IN;
}
static inline LINT __preal_to_sint(LREAL IN) {
   return IN >= 0 ? __real_round(IN + 0.5) : __real_round(IN - 0.5);
}
static inline LINT __preal_to_uint(LREAL IN) {
   return IN >= 0 ? __real_round(IN + 0.5) : 0;
}
static inline LINT __real_to_sint(LREAL IN)  {return (LINT)__preal_to_sint(IN);}
static inline LWORD __real_to_bit(LREAL IN)  {return (LWORD)__preal_to_uint(IN);}
static inline ULINT __real_to_uint(LREAL IN) {return (ULINT)__preal_to_uint(IN);}

     
     
     
static inline STRING __bool_to_string(BOOL IN) {
    if(IN) return (STRING){4, "TRUE"};
    return (STRING){5,"FALSE"};
}
static inline STRING __bit_to_string(LWORD IN) {
    STRING res;
    res = (STRING){0,""} ;
    res.len = snprintf((char*)res.body, 126 , "16#%llx",(long long unsigned int)IN);
    if(res.len > 126 ) res.len = 126 ;
    return res;
}
static inline STRING __real_to_string(LREAL IN) {
    STRING res;
    res = (STRING){0,""} ;
    res.len = snprintf((char*)res.body, 126 , "%.10g", IN);
    if(res.len > 126 ) res.len = 126 ;
    return res;
}
static inline STRING __sint_to_string(LINT IN) {
    STRING res;
    res = (STRING){0,""} ;
    res.len = snprintf((char*)res.body, 126 , "%lld", (long long int)IN);
    if(res.len > 126 ) res.len = 126 ;
    return res;
}
static inline STRING __uint_to_string(ULINT IN) {
    STRING res;
    res = (STRING){0,""} ;
    res.len = snprintf((char*)res.body, 126 , "%llu", (long long unsigned int)IN);
    if(res.len > 126 ) res.len = 126 ;
    return res;
}
     
     
     
static inline BOOL __string_to_bool(STRING IN) {
    return IN.len == 5 ? !memcmp(&IN.body,"TRUE", IN.len) : 0;
}

static inline LINT __pstring_to_sint(STRING* IN) {
    LINT res = 0;
    __strlen_t l;
    unsigned int shift = 0;

    if(IN->body[0]=='2' && IN->body[1]=='#'){
         
        for(l = IN->len - 1; l >= 2 && shift < 64; l--)
        {
            char c = IN->body[l];
            if( c >= '0' && c <= '1'){
                res |= ( c - '0') << shift;
                shift += 1;
            }
        }
    }else if(IN->body[0]=='8' && IN->body[1]=='#'){
         
        for(l = IN->len - 1; l >= 2 && shift < 64; l--)
        {
            char c = IN->body[l];
            if( c >= '0' && c <= '7'){
                res |= ( c - '0') << shift;
                shift += 3;
            }
        }
    }else if(IN->body[0]=='1' && IN->body[1]=='6' && IN->body[2]=='#'){
         
        for(l = IN->len - 1; l >= 3 && shift < 64; l--)
        {
            char c = IN->body[l];
            if( c >= '0' && c <= '9'){
                res |= (LWORD)( c - '0') << shift;
                shift += 4;
            }else if( c >= 'a' && c <= 'f'){
                res |= (LWORD)( c - 'a' + 10 ) << shift;
                shift += 4;
            }else if( c >= 'A' && c <= 'F'){
                res |= (LWORD)( c - 'A' + 10 ) << shift;
                shift += 4;
            }
        }
    }else{
         
        LINT fac = IN->body[0] == '-' ? -1 : 1;
        for(l = IN->len - 1; l >= 0 && shift < 20; l--)
        {
            char c = IN->body[l];
            if( c >= '0' && c <= '9'){
                res += ( c - '0') * fac;
                fac *= 10;
                shift += 1;
            }else if( c >= '.' ){  
                res = 0;
                fac = IN->body[0] == '-' ? -1 : 1;
                shift = 0;
            }
        }
    }
    return res;
}

static inline LINT  __string_to_sint(STRING IN) {return (LINT)__pstring_to_sint(&IN);}
static inline LWORD __string_to_bit (STRING IN) {return (LWORD)__pstring_to_sint(&IN);}
static inline ULINT __string_to_uint(STRING IN) {return (ULINT)__pstring_to_sint(&IN);}
static inline LREAL __string_to_real(STRING IN) {
    __strlen_t l;
    l = IN.len;
     
    while(--l > 0 && IN.body[l] != '.');
    if(l != 0){
        return atof((const char *)&IN.body);
    }else{
        return (LREAL)__pstring_to_sint(&IN);
    }
}

     
     
     
static inline TIME    __int_to_time(LINT IN)  {return (TIME){IN, 0};}
static inline TIME   __real_to_time(LREAL IN) {return (TIME){IN, (IN - (LINT)IN) * 1000000000};}
static inline TIME __string_to_time(STRING IN){
    __strlen_t l;
     



















     
     
    l = IN.len;
    while(--l > 0 && IN.body[l] != '.');
    if(l != 0){
        LREAL IN_val = atof((const char *)&IN.body);
        return  (TIME){IN_val, (IN_val - (LINT)IN_val)*1000000000};
    }else{
        return  (TIME){__pstring_to_sint(&IN), 0};
    }
}

     
     
     
static inline LREAL __time_to_real(TIME IN){
    return (LREAL)IN.tv_sec + ((LREAL)IN.tv_nsec/1000000000);
}
static inline LINT __time_to_int(TIME IN) {return IN.tv_sec;}
static inline STRING __time_to_string(TIME IN){
    STRING res;
    div_t days;
     
    res = (STRING){0,""} ;
    days = div(IN.tv_sec ,86400);
    if(!days.rem && IN.tv_nsec == 0){
        res.len = snprintf((char*)&res.body, 126 , "T#%dd", days.quot);
    }else{
        div_t hours = div(days.rem, 3600);
        if(!hours.rem && IN.tv_nsec == 0){
            res.len = snprintf((char*)&res.body, 126 , "T#%dd%dh", days.quot, hours.quot);
        }else{
            div_t minuts = div(hours.rem, 60);
            if(!minuts.rem && IN.tv_nsec == 0){
                res.len = snprintf((char*)&res.body, 126 , "T#%dd%dh%dm", days.quot, hours.quot, minuts.quot);
            }else{
                if(IN.tv_nsec == 0){
                    res.len = snprintf((char*)&res.body, 126 , "T#%dd%dh%dm%ds", days.quot, hours.quot, minuts.quot, minuts.rem);
                }else{
                    res.len = snprintf((char*)&res.body, 126 , "T#%dd%dh%dm%ds%gms", days.quot, hours.quot, minuts.quot, minuts.rem, (LREAL)IN.tv_nsec / 1000000);
                }
            }
        }
    }
    if(res.len > 126 ) res.len = 126 ;
    return res;
}
static inline STRING __date_to_string(DATE IN){
    STRING res;
    struct tm* broken_down_time;
    time_t seconds;
     
    res = (STRING){0,""} ;
    seconds = IN.tv_sec;
    if (((void *)0)  == (broken_down_time = localtime(&seconds))){  
        __iec_error();
        return (STRING){7,"D#ERROR"};
    }
    res.len = snprintf((char*)&res.body, 126 , "D#%d-%2.2d-%2.2d", broken_down_time->tm_year + 1900, broken_down_time->tm_mon + 1, broken_down_time->tm_mday);
    if(res.len > 126 ) res.len = 126 ;
    return res;
}
static inline STRING __tod_to_string(TOD IN){
    STRING res;
    struct tm* broken_down_time;
    time_t seconds;
     
    res = (STRING){0,""} ;
    seconds = IN.tv_sec;
    if (((void *)0)  == (broken_down_time = localtime(&seconds))){  
        __iec_error();
        return (STRING){9,"TOD#ERROR"};
    }
    if(IN.tv_nsec == 0){
        res.len = snprintf((char*)&res.body, 126 , "TOD#%2.2d:%2.2d:%d", broken_down_time->tm_hour, broken_down_time->tm_min, broken_down_time->tm_sec);
    }else{
        res.len = snprintf((char*)&res.body, 126 , "TOD#%2.2d:%2.2d:%g", broken_down_time->tm_hour, broken_down_time->tm_min, (LREAL)broken_down_time->tm_sec + (LREAL)IN.tv_nsec / 1e9);
    }
    if(res.len > 126 ) res.len = 126 ;
    return res;
}
static inline STRING __dt_to_string(DT IN){
    STRING res;
    struct tm* broken_down_time;
    time_t seconds;
     
    seconds = IN.tv_sec;
    if (((void *)0)  == (broken_down_time = localtime(&seconds))){  
        __iec_error();
        return (STRING){8,"DT#ERROR"};
    }
    if(IN.tv_nsec == 0){
        res.len = snprintf((char*)&res.body, 126 , "DT#%d-%2.2d-%2.2d-%2.2d:%2.2d:%d",
                 broken_down_time->tm_year,
                 broken_down_time->tm_mon,
                 broken_down_time->tm_mday,
                 broken_down_time->tm_hour,
                 broken_down_time->tm_min,
                 broken_down_time->tm_sec);
    }else{
        res.len = snprintf((char*)&res.body, 126 , "DT#%d-%2.2d-%2.2d-%2.2d:%2.2d:%g",
                 broken_down_time->tm_year,
                 broken_down_time->tm_mon,
                 broken_down_time->tm_mday,
                 broken_down_time->tm_hour,
                 broken_down_time->tm_min,
                 (LREAL)broken_down_time->tm_sec + ((LREAL)IN.tv_nsec / 1e9));
    }
    if(res.len > 126 ) res.len = 126 ;
    return res;
}

     
     
     

static inline TOD __date_and_time_to_time_of_day(DT IN) {return (TOD){IN.tv_sec % 86400, IN.tv_nsec};}
static inline DATE __date_and_time_to_date(DT IN){return (DATE){IN.tv_sec - (IN.tv_sec % (24*60*60)), 0};}

     
     
     

static inline BOOL __test_bcd(LWORD IN) {
	while (IN) {
		if ((IN & 0xf) > 9) return 1;
		IN >>= 4;
	}
	return 0;
}

static inline ULINT __bcd_to_uint(LWORD IN){
    ULINT res = IN & 0xf;
    ULINT factor = 10ULL;

    while (IN >>= 4) {
        res += (IN & 0xf) * factor;
        factor *= 10;
    }
    return res;
}

static inline LWORD __uint_to_bcd(ULINT IN){
    LWORD res = IN % 10;
    USINT shift = 4;

    while (IN /= 10) {
        res |= (IN % 10) << shift;
        shift += 4;
    }
    return res;
}


     
     
     

 
 


       static inline  REAL  __move_REAL ( REAL  op1) {return op1;}       static inline  LREAL  __move_LREAL ( LREAL  op1) {return op1;}         static inline  SINT  __move_SINT ( SINT  op1) {return op1;}        static inline  INT  __move_INT ( INT  op1) {return op1;}        static inline  DINT  __move_DINT ( DINT  op1) {return op1;}        static inline  LINT  __move_LINT ( LINT  op1) {return op1;}         static inline  USINT  __move_USINT ( USINT  op1) {return op1;}        static inline  UINT  __move_UINT ( UINT  op1) {return op1;}        static inline  UDINT  __move_UDINT ( UDINT  op1) {return op1;}        static inline  ULINT  __move_ULINT ( ULINT  op1) {return op1;}        static inline  TIME  __move_TIME ( TIME  op1) {return op1;}       static inline  BYTE  __move_BYTE ( BYTE  op1) {return op1;}      static inline  WORD  __move_WORD ( WORD  op1) {return op1;}      static inline  DWORD  __move_DWORD ( DWORD  op1) {return op1;}      static inline  LWORD  __move_LWORD ( LWORD  op1) {return op1;}      static inline  BOOL  __move_BOOL ( BOOL  op1) {return op1;}      static inline  STRING  __move_STRING ( STRING  op1) {return op1;}      static inline  DATE  __move_DATE ( DATE  op1) {return op1;}     static inline  TOD  __move_TOD ( TOD  op1) {return op1;}     static inline  DT  __move_DT ( DT  op1) {return op1;}    



 
 
 
 
 
 
 
 

 




 









 






















 

 
 
 






















  
  
   
   
 
   
   

















  

    static inline    REAL        BYTE_TO_REAL  (BOOL EN, BOOL *ENO ,      BYTE      op){ if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0    ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  return (   REAL  )  __move_REAL  (op);}     static inline    LREAL        BYTE_TO_LREAL  (BOOL EN, BOOL *ENO ,      BYTE      op){ if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0    ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  return (   LREAL  )  __move_LREAL  (op);}       static inline    SINT         BYTE_TO_SINT  (BOOL EN, BOOL *ENO ,       BYTE       op){ if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0    ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  return (   SINT  )  __move_SINT  (op);}      static inline    INT         BYTE_TO_INT  (BOOL EN, BOOL *ENO ,       BYTE       op){ if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0    ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  return (   INT  )  __move_INT  (op);}      static inline    DINT         BYTE_TO_DINT  (BOOL EN, BOOL *ENO ,       BYTE       op){ if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0    ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  return (   DINT  )  __move_DINT  (op);}      static inline    LINT         BYTE_TO_LINT  (BOOL EN, BOOL *ENO ,       BYTE       op){ if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0    ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  return (   LINT  )  __move_LINT  (op);}       static inline    USINT         BYTE_TO_USINT  (BOOL EN, BOOL *ENO ,       BYTE       op){ if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0    ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  return (   USINT  )  __move_USINT  (op);}      static inline    UINT         BYTE_TO_UINT  (BOOL EN, BOOL *ENO ,       BYTE       op){ if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0    ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  return (   UINT  )  __move_UINT  (op);}      static inline    UDINT         BYTE_TO_UDINT  (BOOL EN, BOOL *ENO ,       BYTE       op){ if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0    ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  return (   UDINT  )  __move_UDINT  (op);}      static inline    ULINT         BYTE_TO_ULINT  (BOOL EN, BOOL *ENO ,       BYTE       op){ if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0    ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  return (   ULINT  )  __move_ULINT  (op);}           static inline    REAL        WORD_TO_REAL  (BOOL EN, BOOL *ENO ,      WORD      op){ if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0    ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  return (   REAL  )  __move_REAL  (op);}     static inline    LREAL        WORD_TO_LREAL  (BOOL EN, BOOL *ENO ,      WORD      op){ if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0    ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  return (   LREAL  )  __move_LREAL  (op);}       static inline    SINT         WORD_TO_SINT  (BOOL EN, BOOL *ENO ,       WORD       op){ if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0    ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  return (   SINT  )  __move_SINT  (op);}      static inline    INT         WORD_TO_INT  (BOOL EN, BOOL *ENO ,       WORD       op){ if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0    ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  return (   INT  )  __move_INT  (op);}      static inline    DINT         WORD_TO_DINT  (BOOL EN, BOOL *ENO ,       WORD       op){ if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0    ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  return (   DINT  )  __move_DINT  (op);}      static inline    LINT         WORD_TO_LINT  (BOOL EN, BOOL *ENO ,       WORD       op){ if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0    ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  return (   LINT  )  __move_LINT  (op);}       static inline    USINT         WORD_TO_USINT  (BOOL EN, BOOL *ENO ,       WORD       op){ if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0    ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  return (   USINT  )  __move_USINT  (op);}      static inline    UINT         WORD_TO_UINT  (BOOL EN, BOOL *ENO ,       WORD       op){ if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0    ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  return (   UINT  )  __move_UINT  (op);}      static inline    UDINT         WORD_TO_UDINT  (BOOL EN, BOOL *ENO ,       WORD       op){ if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0    ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  return (   UDINT  )  __move_UDINT  (op);}      static inline    ULINT         WORD_TO_ULINT  (BOOL EN, BOOL *ENO ,       WORD       op){ if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0    ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  return (   ULINT  )  __move_ULINT  (op);}           static inline    REAL        DWORD_TO_REAL  (BOOL EN, BOOL *ENO ,      DWORD      op){ if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0    ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  return (   REAL  )  __move_REAL  (op);}     static inline    LREAL        DWORD_TO_LREAL  (BOOL EN, BOOL *ENO ,      DWORD      op){ if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0    ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  return (   LREAL  )  __move_LREAL  (op);}       static inline    SINT         DWORD_TO_SINT  (BOOL EN, BOOL *ENO ,       DWORD       op){ if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0    ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  return (   SINT  )  __move_SINT  (op);}      static inline    INT         DWORD_TO_INT  (BOOL EN, BOOL *ENO ,       DWORD       op){ if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0    ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  return (   INT  )  __move_INT  (op);}      static inline    DINT         DWORD_TO_DINT  (BOOL EN, BOOL *ENO ,       DWORD       op){ if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0    ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  return (   DINT  )  __move_DINT  (op);}      static inline    LINT         DWORD_TO_LINT  (BOOL EN, BOOL *ENO ,       DWORD       op){ if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0    ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  return (   LINT  )  __move_LINT  (op);}       static inline    USINT         DWORD_TO_USINT  (BOOL EN, BOOL *ENO ,       DWORD       op){ if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0    ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  return (   USINT  )  __move_USINT  (op);}      static inline    UINT         DWORD_TO_UINT  (BOOL EN, BOOL *ENO ,       DWORD       op){ if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0    ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  return (   UINT  )  __move_UINT  (op);}      static inline    UDINT         DWORD_TO_UDINT  (BOOL EN, BOOL *ENO ,       DWORD       op){ if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0    ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  return (   UDINT  )  __move_UDINT  (op);}      static inline    ULINT         DWORD_TO_ULINT  (BOOL EN, BOOL *ENO ,       DWORD       op){ if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0    ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  return (   ULINT  )  __move_ULINT  (op);}           static inline    REAL        LWORD_TO_REAL  (BOOL EN, BOOL *ENO ,      LWORD      op){ if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0    ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  return (   REAL  )  __move_REAL  (op);}     static inline    LREAL        LWORD_TO_LREAL  (BOOL EN, BOOL *ENO ,      LWORD      op){ if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0    ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  return (   LREAL  )  __move_LREAL  (op);}       static inline    SINT         LWORD_TO_SINT  (BOOL EN, BOOL *ENO ,       LWORD       op){ if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0    ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  return (   SINT  )  __move_SINT  (op);}      static inline    INT         LWORD_TO_INT  (BOOL EN, BOOL *ENO ,       LWORD       op){ if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0    ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  return (   INT  )  __move_INT  (op);}      static inline    DINT         LWORD_TO_DINT  (BOOL EN, BOOL *ENO ,       LWORD       op){ if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0    ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  return (   DINT  )  __move_DINT  (op);}      static inline    LINT         LWORD_TO_LINT  (BOOL EN, BOOL *ENO ,       LWORD       op){ if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0    ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  return (   LINT  )  __move_LINT  (op);}       static inline    USINT         LWORD_TO_USINT  (BOOL EN, BOOL *ENO ,       LWORD       op){ if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0    ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  return (   USINT  )  __move_USINT  (op);}      static inline    UINT         LWORD_TO_UINT  (BOOL EN, BOOL *ENO ,       LWORD       op){ if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0    ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  return (   UINT  )  __move_UINT  (op);}      static inline    UDINT         LWORD_TO_UDINT  (BOOL EN, BOOL *ENO ,       LWORD       op){ if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0    ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  return (   UDINT  )  __move_UDINT  (op);}      static inline    ULINT         LWORD_TO_ULINT  (BOOL EN, BOOL *ENO ,       LWORD       op){ if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0    ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  return (   ULINT  )  __move_ULINT  (op);}           static inline    REAL        BOOL_TO_REAL  (BOOL EN, BOOL *ENO ,      BOOL      op){ if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0    ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  return (   REAL  )  __move_REAL  (op);}     static inline    LREAL        BOOL_TO_LREAL  (BOOL EN, BOOL *ENO ,      BOOL      op){ if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0    ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  return (   LREAL  )  __move_LREAL  (op);}       static inline    SINT         BOOL_TO_SINT  (BOOL EN, BOOL *ENO ,       BOOL       op){ if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0    ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  return (   SINT  )  __move_SINT  (op);}      static inline    INT         BOOL_TO_INT  (BOOL EN, BOOL *ENO ,       BOOL       op){ if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0    ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  return (   INT  )  __move_INT  (op);}      static inline    DINT         BOOL_TO_DINT  (BOOL EN, BOOL *ENO ,       BOOL       op){ if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0    ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  return (   DINT  )  __move_DINT  (op);}      static inline    LINT         BOOL_TO_LINT  (BOOL EN, BOOL *ENO ,       BOOL       op){ if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0    ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  return (   LINT  )  __move_LINT  (op);}       static inline    USINT         BOOL_TO_USINT  (BOOL EN, BOOL *ENO ,       BOOL       op){ if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0    ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  return (   USINT  )  __move_USINT  (op);}      static inline    UINT         BOOL_TO_UINT  (BOOL EN, BOOL *ENO ,       BOOL       op){ if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0    ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  return (   UINT  )  __move_UINT  (op);}      static inline    UDINT         BOOL_TO_UDINT  (BOOL EN, BOOL *ENO ,       BOOL       op){ if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0    ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  return (   UDINT  )  __move_UDINT  (op);}      static inline    ULINT         BOOL_TO_ULINT  (BOOL EN, BOOL *ENO ,       BOOL       op){ if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0    ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  return (   ULINT  )  __move_ULINT  (op);}       
    static inline    BYTE        BYTE_TO_BYTE  (BOOL EN, BOOL *ENO ,      BYTE      op){ if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0    ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  return (   BYTE  )  __move_BYTE  (op);}     static inline    WORD        BYTE_TO_WORD  (BOOL EN, BOOL *ENO ,      BYTE      op){ if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0    ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  return (   WORD  )  __move_WORD  (op);}     static inline    DWORD        BYTE_TO_DWORD  (BOOL EN, BOOL *ENO ,      BYTE      op){ if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0    ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  return (   DWORD  )  __move_DWORD  (op);}     static inline    LWORD        BYTE_TO_LWORD  (BOOL EN, BOOL *ENO ,      BYTE      op){ if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0    ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  return (   LWORD  )  __move_LWORD  (op);}     static inline    BOOL       BYTE_TO_BOOL  (BOOL EN, BOOL *ENO ,     BYTE     op){ if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0    ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  return (   BOOL  )  __move_BOOL  (op);}         static inline    BYTE        WORD_TO_BYTE  (BOOL EN, BOOL *ENO ,      WORD      op){ if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0    ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  return (   BYTE  )  __move_BYTE  (op);}     static inline    WORD        WORD_TO_WORD  (BOOL EN, BOOL *ENO ,      WORD      op){ if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0    ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  return (   WORD  )  __move_WORD  (op);}     static inline    DWORD        WORD_TO_DWORD  (BOOL EN, BOOL *ENO ,      WORD      op){ if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0    ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  return (   DWORD  )  __move_DWORD  (op);}     static inline    LWORD        WORD_TO_LWORD  (BOOL EN, BOOL *ENO ,      WORD      op){ if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0    ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  return (   LWORD  )  __move_LWORD  (op);}     static inline    BOOL       WORD_TO_BOOL  (BOOL EN, BOOL *ENO ,     WORD     op){ if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0    ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  return (   BOOL  )  __move_BOOL  (op);}         static inline    BYTE        DWORD_TO_BYTE  (BOOL EN, BOOL *ENO ,      DWORD      op){ if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0    ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  return (   BYTE  )  __move_BYTE  (op);}     static inline    WORD        DWORD_TO_WORD  (BOOL EN, BOOL *ENO ,      DWORD      op){ if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0    ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  return (   WORD  )  __move_WORD  (op);}     static inline    DWORD        DWORD_TO_DWORD  (BOOL EN, BOOL *ENO ,      DWORD      op){ if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0    ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  return (   DWORD  )  __move_DWORD  (op);}     static inline    LWORD        DWORD_TO_LWORD  (BOOL EN, BOOL *ENO ,      DWORD      op){ if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0    ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  return (   LWORD  )  __move_LWORD  (op);}     static inline    BOOL       DWORD_TO_BOOL  (BOOL EN, BOOL *ENO ,     DWORD     op){ if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0    ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  return (   BOOL  )  __move_BOOL  (op);}         static inline    BYTE        LWORD_TO_BYTE  (BOOL EN, BOOL *ENO ,      LWORD      op){ if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0    ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  return (   BYTE  )  __move_BYTE  (op);}     static inline    WORD        LWORD_TO_WORD  (BOOL EN, BOOL *ENO ,      LWORD      op){ if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0    ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  return (   WORD  )  __move_WORD  (op);}     static inline    DWORD        LWORD_TO_DWORD  (BOOL EN, BOOL *ENO ,      LWORD      op){ if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0    ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  return (   DWORD  )  __move_DWORD  (op);}     static inline    LWORD        LWORD_TO_LWORD  (BOOL EN, BOOL *ENO ,      LWORD      op){ if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0    ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  return (   LWORD  )  __move_LWORD  (op);}     static inline    BOOL       LWORD_TO_BOOL  (BOOL EN, BOOL *ENO ,     LWORD     op){ if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0    ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  return (   BOOL  )  __move_BOOL  (op);}         static inline    BYTE        BOOL_TO_BYTE  (BOOL EN, BOOL *ENO ,      BOOL      op){ if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0    ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  return (   BYTE  )  __move_BYTE  (op);}     static inline    WORD        BOOL_TO_WORD  (BOOL EN, BOOL *ENO ,      BOOL      op){ if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0    ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  return (   WORD  )  __move_WORD  (op);}     static inline    DWORD        BOOL_TO_DWORD  (BOOL EN, BOOL *ENO ,      BOOL      op){ if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0    ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  return (   DWORD  )  __move_DWORD  (op);}     static inline    LWORD        BOOL_TO_LWORD  (BOOL EN, BOOL *ENO ,      BOOL      op){ if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0    ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  return (   LWORD  )  __move_LWORD  (op);}     static inline    BOOL       BOOL_TO_BOOL  (BOOL EN, BOOL *ENO ,     BOOL     op){ if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0    ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  return (   BOOL  )  __move_BOOL  (op);}     


  

    static inline    REAL        SINT_TO_REAL  (BOOL EN, BOOL *ENO ,      SINT      op){ if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0    ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  return (   REAL  )  __move_REAL  (op);}     static inline    LREAL        SINT_TO_LREAL  (BOOL EN, BOOL *ENO ,      SINT      op){ if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0    ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  return (   LREAL  )  __move_LREAL  (op);}       static inline    SINT         SINT_TO_SINT  (BOOL EN, BOOL *ENO ,       SINT       op){ if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0    ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  return (   SINT  )  __move_SINT  (op);}      static inline    INT         SINT_TO_INT  (BOOL EN, BOOL *ENO ,       SINT       op){ if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0    ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  return (   INT  )  __move_INT  (op);}      static inline    DINT         SINT_TO_DINT  (BOOL EN, BOOL *ENO ,       SINT       op){ if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0    ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  return (   DINT  )  __move_DINT  (op);}      static inline    LINT         SINT_TO_LINT  (BOOL EN, BOOL *ENO ,       SINT       op){ if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0    ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  return (   LINT  )  __move_LINT  (op);}       static inline    USINT         SINT_TO_USINT  (BOOL EN, BOOL *ENO ,       SINT       op){ if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0    ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  return (   USINT  )  __move_USINT  (op);}      static inline    UINT         SINT_TO_UINT  (BOOL EN, BOOL *ENO ,       SINT       op){ if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0    ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  return (   UINT  )  __move_UINT  (op);}      static inline    UDINT         SINT_TO_UDINT  (BOOL EN, BOOL *ENO ,       SINT       op){ if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0    ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  return (   UDINT  )  __move_UDINT  (op);}      static inline    ULINT         SINT_TO_ULINT  (BOOL EN, BOOL *ENO ,       SINT       op){ if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0    ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  return (   ULINT  )  __move_ULINT  (op);}           static inline    REAL        INT_TO_REAL  (BOOL EN, BOOL *ENO ,      INT      op){ if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0    ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  return (   REAL  )  __move_REAL  (op);}     static inline    LREAL        INT_TO_LREAL  (BOOL EN, BOOL *ENO ,      INT      op){ if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0    ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  return (   LREAL  )  __move_LREAL  (op);}       static inline    SINT         INT_TO_SINT  (BOOL EN, BOOL *ENO ,       INT       op){ if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0    ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  return (   SINT  )  __move_SINT  (op);}      static inline    INT         INT_TO_INT  (BOOL EN, BOOL *ENO ,       INT       op){ if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0    ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  return (   INT  )  __move_INT  (op);}      static inline    DINT         INT_TO_DINT  (BOOL EN, BOOL *ENO ,       INT       op){ if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0    ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  return (   DINT  )  __move_DINT  (op);}      static inline    LINT         INT_TO_LINT  (BOOL EN, BOOL *ENO ,       INT       op){ if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0    ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  return (   LINT  )  __move_LINT  (op);}       static inline    USINT         INT_TO_USINT  (BOOL EN, BOOL *ENO ,       INT       op){ if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0    ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  return (   USINT  )  __move_USINT  (op);}      static inline    UINT         INT_TO_UINT  (BOOL EN, BOOL *ENO ,       INT       op){ if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0    ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  return (   UINT  )  __move_UINT  (op);}      static inline    UDINT         INT_TO_UDINT  (BOOL EN, BOOL *ENO ,       INT       op){ if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0    ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  return (   UDINT  )  __move_UDINT  (op);}      static inline    ULINT         INT_TO_ULINT  (BOOL EN, BOOL *ENO ,       INT       op){ if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0    ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  return (   ULINT  )  __move_ULINT  (op);}           static inline    REAL        DINT_TO_REAL  (BOOL EN, BOOL *ENO ,      DINT      op){ if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0    ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  return (   REAL  )  __move_REAL  (op);}     static inline    LREAL        DINT_TO_LREAL  (BOOL EN, BOOL *ENO ,      DINT      op){ if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0    ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  return (   LREAL  )  __move_LREAL  (op);}       static inline    SINT         DINT_TO_SINT  (BOOL EN, BOOL *ENO ,       DINT       op){ if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0    ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  return (   SINT  )  __move_SINT  (op);}      static inline    INT         DINT_TO_INT  (BOOL EN, BOOL *ENO ,       DINT       op){ if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0    ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  return (   INT  )  __move_INT  (op);}      static inline    DINT         DINT_TO_DINT  (BOOL EN, BOOL *ENO ,       DINT       op){ if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0    ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  return (   DINT  )  __move_DINT  (op);}      static inline    LINT         DINT_TO_LINT  (BOOL EN, BOOL *ENO ,       DINT       op){ if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0    ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  return (   LINT  )  __move_LINT  (op);}       static inline    USINT         DINT_TO_USINT  (BOOL EN, BOOL *ENO ,       DINT       op){ if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0    ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  return (   USINT  )  __move_USINT  (op);}      static inline    UINT         DINT_TO_UINT  (BOOL EN, BOOL *ENO ,       DINT       op){ if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0    ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  return (   UINT  )  __move_UINT  (op);}      static inline    UDINT         DINT_TO_UDINT  (BOOL EN, BOOL *ENO ,       DINT       op){ if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0    ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  return (   UDINT  )  __move_UDINT  (op);}      static inline    ULINT         DINT_TO_ULINT  (BOOL EN, BOOL *ENO ,       DINT       op){ if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0    ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  return (   ULINT  )  __move_ULINT  (op);}           static inline    REAL        LINT_TO_REAL  (BOOL EN, BOOL *ENO ,      LINT      op){ if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0    ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  return (   REAL  )  __move_REAL  (op);}     static inline    LREAL        LINT_TO_LREAL  (BOOL EN, BOOL *ENO ,      LINT      op){ if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0    ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  return (   LREAL  )  __move_LREAL  (op);}       static inline    SINT         LINT_TO_SINT  (BOOL EN, BOOL *ENO ,       LINT       op){ if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0    ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  return (   SINT  )  __move_SINT  (op);}      static inline    INT         LINT_TO_INT  (BOOL EN, BOOL *ENO ,       LINT       op){ if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0    ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  return (   INT  )  __move_INT  (op);}      static inline    DINT         LINT_TO_DINT  (BOOL EN, BOOL *ENO ,       LINT       op){ if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0    ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  return (   DINT  )  __move_DINT  (op);}      static inline    LINT         LINT_TO_LINT  (BOOL EN, BOOL *ENO ,       LINT       op){ if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0    ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  return (   LINT  )  __move_LINT  (op);}       static inline    USINT         LINT_TO_USINT  (BOOL EN, BOOL *ENO ,       LINT       op){ if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0    ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  return (   USINT  )  __move_USINT  (op);}      static inline    UINT         LINT_TO_UINT  (BOOL EN, BOOL *ENO ,       LINT       op){ if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0    ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  return (   UINT  )  __move_UINT  (op);}      static inline    UDINT         LINT_TO_UDINT  (BOOL EN, BOOL *ENO ,       LINT       op){ if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0    ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  return (   UDINT  )  __move_UDINT  (op);}      static inline    ULINT         LINT_TO_ULINT  (BOOL EN, BOOL *ENO ,       LINT       op){ if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0    ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  return (   ULINT  )  __move_ULINT  (op);}            static inline    REAL        USINT_TO_REAL  (BOOL EN, BOOL *ENO ,      USINT      op){ if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0    ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  return (   REAL  )  __move_REAL  (op);}     static inline    LREAL        USINT_TO_LREAL  (BOOL EN, BOOL *ENO ,      USINT      op){ if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0    ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  return (   LREAL  )  __move_LREAL  (op);}       static inline    SINT         USINT_TO_SINT  (BOOL EN, BOOL *ENO ,       USINT       op){ if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0    ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  return (   SINT  )  __move_SINT  (op);}      static inline    INT         USINT_TO_INT  (BOOL EN, BOOL *ENO ,       USINT       op){ if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0    ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  return (   INT  )  __move_INT  (op);}      static inline    DINT         USINT_TO_DINT  (BOOL EN, BOOL *ENO ,       USINT       op){ if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0    ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  return (   DINT  )  __move_DINT  (op);}      static inline    LINT         USINT_TO_LINT  (BOOL EN, BOOL *ENO ,       USINT       op){ if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0    ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  return (   LINT  )  __move_LINT  (op);}       static inline    USINT         USINT_TO_USINT  (BOOL EN, BOOL *ENO ,       USINT       op){ if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0    ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  return (   USINT  )  __move_USINT  (op);}      static inline    UINT         USINT_TO_UINT  (BOOL EN, BOOL *ENO ,       USINT       op){ if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0    ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  return (   UINT  )  __move_UINT  (op);}      static inline    UDINT         USINT_TO_UDINT  (BOOL EN, BOOL *ENO ,       USINT       op){ if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0    ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  return (   UDINT  )  __move_UDINT  (op);}      static inline    ULINT         USINT_TO_ULINT  (BOOL EN, BOOL *ENO ,       USINT       op){ if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0    ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  return (   ULINT  )  __move_ULINT  (op);}           static inline    REAL        UINT_TO_REAL  (BOOL EN, BOOL *ENO ,      UINT      op){ if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0    ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  return (   REAL  )  __move_REAL  (op);}     static inline    LREAL        UINT_TO_LREAL  (BOOL EN, BOOL *ENO ,      UINT      op){ if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0    ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  return (   LREAL  )  __move_LREAL  (op);}       static inline    SINT         UINT_TO_SINT  (BOOL EN, BOOL *ENO ,       UINT       op){ if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0    ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  return (   SINT  )  __move_SINT  (op);}      static inline    INT         UINT_TO_INT  (BOOL EN, BOOL *ENO ,       UINT       op){ if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0    ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  return (   INT  )  __move_INT  (op);}      static inline    DINT         UINT_TO_DINT  (BOOL EN, BOOL *ENO ,       UINT       op){ if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0    ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  return (   DINT  )  __move_DINT  (op);}      static inline    LINT         UINT_TO_LINT  (BOOL EN, BOOL *ENO ,       UINT       op){ if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0    ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  return (   LINT  )  __move_LINT  (op);}       static inline    USINT         UINT_TO_USINT  (BOOL EN, BOOL *ENO ,       UINT       op){ if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0    ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  return (   USINT  )  __move_USINT  (op);}      static inline    UINT         UINT_TO_UINT  (BOOL EN, BOOL *ENO ,       UINT       op){ if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0    ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  return (   UINT  )  __move_UINT  (op);}      static inline    UDINT         UINT_TO_UDINT  (BOOL EN, BOOL *ENO ,       UINT       op){ if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0    ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  return (   UDINT  )  __move_UDINT  (op);}      static inline    ULINT         UINT_TO_ULINT  (BOOL EN, BOOL *ENO ,       UINT       op){ if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0    ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  return (   ULINT  )  __move_ULINT  (op);}           static inline    REAL        UDINT_TO_REAL  (BOOL EN, BOOL *ENO ,      UDINT      op){ if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0    ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  return (   REAL  )  __move_REAL  (op);}     static inline    LREAL        UDINT_TO_LREAL  (BOOL EN, BOOL *ENO ,      UDINT      op){ if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0    ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  return (   LREAL  )  __move_LREAL  (op);}       static inline    SINT         UDINT_TO_SINT  (BOOL EN, BOOL *ENO ,       UDINT       op){ if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0    ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  return (   SINT  )  __move_SINT  (op);}      static inline    INT         UDINT_TO_INT  (BOOL EN, BOOL *ENO ,       UDINT       op){ if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0    ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  return (   INT  )  __move_INT  (op);}      static inline    DINT         UDINT_TO_DINT  (BOOL EN, BOOL *ENO ,       UDINT       op){ if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0    ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  return (   DINT  )  __move_DINT  (op);}      static inline    LINT         UDINT_TO_LINT  (BOOL EN, BOOL *ENO ,       UDINT       op){ if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0    ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  return (   LINT  )  __move_LINT  (op);}       static inline    USINT         UDINT_TO_USINT  (BOOL EN, BOOL *ENO ,       UDINT       op){ if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0    ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  return (   USINT  )  __move_USINT  (op);}      static inline    UINT         UDINT_TO_UINT  (BOOL EN, BOOL *ENO ,       UDINT       op){ if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0    ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  return (   UINT  )  __move_UINT  (op);}      static inline    UDINT         UDINT_TO_UDINT  (BOOL EN, BOOL *ENO ,       UDINT       op){ if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0    ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  return (   UDINT  )  __move_UDINT  (op);}      static inline    ULINT         UDINT_TO_ULINT  (BOOL EN, BOOL *ENO ,       UDINT       op){ if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0    ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  return (   ULINT  )  __move_ULINT  (op);}           static inline    REAL        ULINT_TO_REAL  (BOOL EN, BOOL *ENO ,      ULINT      op){ if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0    ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  return (   REAL  )  __move_REAL  (op);}     static inline    LREAL        ULINT_TO_LREAL  (BOOL EN, BOOL *ENO ,      ULINT      op){ if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0    ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  return (   LREAL  )  __move_LREAL  (op);}       static inline    SINT         ULINT_TO_SINT  (BOOL EN, BOOL *ENO ,       ULINT       op){ if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0    ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  return (   SINT  )  __move_SINT  (op);}      static inline    INT         ULINT_TO_INT  (BOOL EN, BOOL *ENO ,       ULINT       op){ if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0    ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  return (   INT  )  __move_INT  (op);}      static inline    DINT         ULINT_TO_DINT  (BOOL EN, BOOL *ENO ,       ULINT       op){ if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0    ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  return (   DINT  )  __move_DINT  (op);}      static inline    LINT         ULINT_TO_LINT  (BOOL EN, BOOL *ENO ,       ULINT       op){ if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0    ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  return (   LINT  )  __move_LINT  (op);}       static inline    USINT         ULINT_TO_USINT  (BOOL EN, BOOL *ENO ,       ULINT       op){ if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0    ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  return (   USINT  )  __move_USINT  (op);}      static inline    UINT         ULINT_TO_UINT  (BOOL EN, BOOL *ENO ,       ULINT       op){ if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0    ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  return (   UINT  )  __move_UINT  (op);}      static inline    UDINT         ULINT_TO_UDINT  (BOOL EN, BOOL *ENO ,       ULINT       op){ if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0    ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  return (   UDINT  )  __move_UDINT  (op);}      static inline    ULINT         ULINT_TO_ULINT  (BOOL EN, BOOL *ENO ,       ULINT       op){ if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0    ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  return (   ULINT  )  __move_ULINT  (op);}        
    static inline    BYTE        SINT_TO_BYTE  (BOOL EN, BOOL *ENO ,      SINT      op){ if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0    ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  return (   BYTE  )  __move_BYTE  (op);}     static inline    WORD        SINT_TO_WORD  (BOOL EN, BOOL *ENO ,      SINT      op){ if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0    ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  return (   WORD  )  __move_WORD  (op);}     static inline    DWORD        SINT_TO_DWORD  (BOOL EN, BOOL *ENO ,      SINT      op){ if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0    ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  return (   DWORD  )  __move_DWORD  (op);}     static inline    LWORD        SINT_TO_LWORD  (BOOL EN, BOOL *ENO ,      SINT      op){ if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0    ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  return (   LWORD  )  __move_LWORD  (op);}     static inline    BOOL       SINT_TO_BOOL  (BOOL EN, BOOL *ENO ,     SINT     op){ if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0    ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  return (   BOOL  )  __move_BOOL  (op);}         static inline    BYTE        INT_TO_BYTE  (BOOL EN, BOOL *ENO ,      INT      op){ if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0    ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  return (   BYTE  )  __move_BYTE  (op);}     static inline    WORD        INT_TO_WORD  (BOOL EN, BOOL *ENO ,      INT      op){ if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0    ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  return (   WORD  )  __move_WORD  (op);}     static inline    DWORD        INT_TO_DWORD  (BOOL EN, BOOL *ENO ,      INT      op){ if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0    ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  return (   DWORD  )  __move_DWORD  (op);}     static inline    LWORD        INT_TO_LWORD  (BOOL EN, BOOL *ENO ,      INT      op){ if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0    ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  return (   LWORD  )  __move_LWORD  (op);}     static inline    BOOL       INT_TO_BOOL  (BOOL EN, BOOL *ENO ,     INT     op){ if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0    ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  return (   BOOL  )  __move_BOOL  (op);}         static inline    BYTE        DINT_TO_BYTE  (BOOL EN, BOOL *ENO ,      DINT      op){ if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0    ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  return (   BYTE  )  __move_BYTE  (op);}     static inline    WORD        DINT_TO_WORD  (BOOL EN, BOOL *ENO ,      DINT      op){ if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0    ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  return (   WORD  )  __move_WORD  (op);}     static inline    DWORD        DINT_TO_DWORD  (BOOL EN, BOOL *ENO ,      DINT      op){ if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0    ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  return (   DWORD  )  __move_DWORD  (op);}     static inline    LWORD        DINT_TO_LWORD  (BOOL EN, BOOL *ENO ,      DINT      op){ if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0    ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  return (   LWORD  )  __move_LWORD  (op);}     static inline    BOOL       DINT_TO_BOOL  (BOOL EN, BOOL *ENO ,     DINT     op){ if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0    ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  return (   BOOL  )  __move_BOOL  (op);}         static inline    BYTE        LINT_TO_BYTE  (BOOL EN, BOOL *ENO ,      LINT      op){ if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0    ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  return (   BYTE  )  __move_BYTE  (op);}     static inline    WORD        LINT_TO_WORD  (BOOL EN, BOOL *ENO ,      LINT      op){ if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0    ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  return (   WORD  )  __move_WORD  (op);}     static inline    DWORD        LINT_TO_DWORD  (BOOL EN, BOOL *ENO ,      LINT      op){ if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0    ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  return (   DWORD  )  __move_DWORD  (op);}     static inline    LWORD        LINT_TO_LWORD  (BOOL EN, BOOL *ENO ,      LINT      op){ if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0    ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  return (   LWORD  )  __move_LWORD  (op);}     static inline    BOOL       LINT_TO_BOOL  (BOOL EN, BOOL *ENO ,     LINT     op){ if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0    ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  return (   BOOL  )  __move_BOOL  (op);}          static inline    BYTE        USINT_TO_BYTE  (BOOL EN, BOOL *ENO ,      USINT      op){ if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0    ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  return (   BYTE  )  __move_BYTE  (op);}     static inline    WORD        USINT_TO_WORD  (BOOL EN, BOOL *ENO ,      USINT      op){ if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0    ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  return (   WORD  )  __move_WORD  (op);}     static inline    DWORD        USINT_TO_DWORD  (BOOL EN, BOOL *ENO ,      USINT      op){ if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0    ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  return (   DWORD  )  __move_DWORD  (op);}     static inline    LWORD        USINT_TO_LWORD  (BOOL EN, BOOL *ENO ,      USINT      op){ if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0    ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  return (   LWORD  )  __move_LWORD  (op);}     static inline    BOOL       USINT_TO_BOOL  (BOOL EN, BOOL *ENO ,     USINT     op){ if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0    ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  return (   BOOL  )  __move_BOOL  (op);}         static inline    BYTE        UINT_TO_BYTE  (BOOL EN, BOOL *ENO ,      UINT      op){ if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0    ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  return (   BYTE  )  __move_BYTE  (op);}     static inline    WORD        UINT_TO_WORD  (BOOL EN, BOOL *ENO ,      UINT      op){ if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0    ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  return (   WORD  )  __move_WORD  (op);}     static inline    DWORD        UINT_TO_DWORD  (BOOL EN, BOOL *ENO ,      UINT      op){ if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0    ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  return (   DWORD  )  __move_DWORD  (op);}     static inline    LWORD        UINT_TO_LWORD  (BOOL EN, BOOL *ENO ,      UINT      op){ if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0    ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  return (   LWORD  )  __move_LWORD  (op);}     static inline    BOOL       UINT_TO_BOOL  (BOOL EN, BOOL *ENO ,     UINT     op){ if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0    ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  return (   BOOL  )  __move_BOOL  (op);}         static inline    BYTE        UDINT_TO_BYTE  (BOOL EN, BOOL *ENO ,      UDINT      op){ if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0    ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  return (   BYTE  )  __move_BYTE  (op);}     static inline    WORD        UDINT_TO_WORD  (BOOL EN, BOOL *ENO ,      UDINT      op){ if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0    ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  return (   WORD  )  __move_WORD  (op);}     static inline    DWORD        UDINT_TO_DWORD  (BOOL EN, BOOL *ENO ,      UDINT      op){ if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0    ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  return (   DWORD  )  __move_DWORD  (op);}     static inline    LWORD        UDINT_TO_LWORD  (BOOL EN, BOOL *ENO ,      UDINT      op){ if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0    ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  return (   LWORD  )  __move_LWORD  (op);}     static inline    BOOL       UDINT_TO_BOOL  (BOOL EN, BOOL *ENO ,     UDINT     op){ if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0    ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  return (   BOOL  )  __move_BOOL  (op);}         static inline    BYTE        ULINT_TO_BYTE  (BOOL EN, BOOL *ENO ,      ULINT      op){ if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0    ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  return (   BYTE  )  __move_BYTE  (op);}     static inline    WORD        ULINT_TO_WORD  (BOOL EN, BOOL *ENO ,      ULINT      op){ if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0    ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  return (   WORD  )  __move_WORD  (op);}     static inline    DWORD        ULINT_TO_DWORD  (BOOL EN, BOOL *ENO ,      ULINT      op){ if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0    ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  return (   DWORD  )  __move_DWORD  (op);}     static inline    LWORD        ULINT_TO_LWORD  (BOOL EN, BOOL *ENO ,      ULINT      op){ if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0    ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  return (   LWORD  )  __move_LWORD  (op);}     static inline    BOOL       ULINT_TO_BOOL  (BOOL EN, BOOL *ENO ,     ULINT     op){ if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0    ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  return (   BOOL  )  __move_BOOL  (op);}      


  

   static inline    BYTE        REAL_TO_BYTE  (BOOL EN, BOOL *ENO ,      REAL      op){ if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0    ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  return (   BYTE  )  __real_to_bit (op);}     static inline    WORD        REAL_TO_WORD  (BOOL EN, BOOL *ENO ,      REAL      op){ if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0    ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  return (   WORD  )  __real_to_bit (op);}     static inline    DWORD        REAL_TO_DWORD  (BOOL EN, BOOL *ENO ,      REAL      op){ if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0    ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  return (   DWORD  )  __real_to_bit (op);}     static inline    LWORD        REAL_TO_LWORD  (BOOL EN, BOOL *ENO ,      REAL      op){ if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0    ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  return (   LWORD  )  __real_to_bit (op);}     static inline    BOOL       REAL_TO_BOOL  (BOOL EN, BOOL *ENO ,     REAL     op){ if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0    ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  return (   BOOL  )  __real_to_bit (op);}        static inline    BYTE        LREAL_TO_BYTE  (BOOL EN, BOOL *ENO ,      LREAL      op){ if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0    ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  return (   BYTE  )  __real_to_bit (op);}     static inline    WORD        LREAL_TO_WORD  (BOOL EN, BOOL *ENO ,      LREAL      op){ if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0    ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  return (   WORD  )  __real_to_bit (op);}     static inline    DWORD        LREAL_TO_DWORD  (BOOL EN, BOOL *ENO ,      LREAL      op){ if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0    ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  return (   DWORD  )  __real_to_bit (op);}     static inline    LWORD        LREAL_TO_LWORD  (BOOL EN, BOOL *ENO ,      LREAL      op){ if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0    ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  return (   LWORD  )  __real_to_bit (op);}     static inline    BOOL       LREAL_TO_BOOL  (BOOL EN, BOOL *ENO ,     LREAL     op){ if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0    ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  return (   BOOL  )  __real_to_bit (op);}     


  

  static inline    SINT       REAL_TO_SINT  (BOOL EN, BOOL *ENO ,     REAL     op){ if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0    ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  return (   SINT  )  __real_to_sint (op);}    static inline    INT       REAL_TO_INT  (BOOL EN, BOOL *ENO ,     REAL     op){ if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0    ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  return (   INT  )  __real_to_sint (op);}    static inline    DINT       REAL_TO_DINT  (BOOL EN, BOOL *ENO ,     REAL     op){ if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0    ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  return (   DINT  )  __real_to_sint (op);}    static inline    LINT       REAL_TO_LINT  (BOOL EN, BOOL *ENO ,     REAL     op){ if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0    ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  return (   LINT  )  __real_to_sint (op);}       static inline    SINT       LREAL_TO_SINT  (BOOL EN, BOOL *ENO ,     LREAL     op){ if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0    ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  return (   SINT  )  __real_to_sint (op);}    static inline    INT       LREAL_TO_INT  (BOOL EN, BOOL *ENO ,     LREAL     op){ if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0    ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  return (   INT  )  __real_to_sint (op);}    static inline    DINT       LREAL_TO_DINT  (BOOL EN, BOOL *ENO ,     LREAL     op){ if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0    ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  return (   DINT  )  __real_to_sint (op);}    static inline    LINT       LREAL_TO_LINT  (BOOL EN, BOOL *ENO ,     LREAL     op){ if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0    ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  return (   LINT  )  __real_to_sint (op);}     


  static inline    USINT       REAL_TO_USINT  (BOOL EN, BOOL *ENO ,     REAL     op){ if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0    ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  return (   USINT  )  __real_to_uint (op);}    static inline    UINT       REAL_TO_UINT  (BOOL EN, BOOL *ENO ,     REAL     op){ if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0    ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  return (   UINT  )  __real_to_uint (op);}    static inline    UDINT       REAL_TO_UDINT  (BOOL EN, BOOL *ENO ,     REAL     op){ if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0    ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  return (   UDINT  )  __real_to_uint (op);}    static inline    ULINT       REAL_TO_ULINT  (BOOL EN, BOOL *ENO ,     REAL     op){ if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0    ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  return (   ULINT  )  __real_to_uint (op);}       static inline    USINT       LREAL_TO_USINT  (BOOL EN, BOOL *ENO ,     LREAL     op){ if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0    ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  return (   USINT  )  __real_to_uint (op);}    static inline    UINT       LREAL_TO_UINT  (BOOL EN, BOOL *ENO ,     LREAL     op){ if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0    ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  return (   UINT  )  __real_to_uint (op);}    static inline    UDINT       LREAL_TO_UDINT  (BOOL EN, BOOL *ENO ,     LREAL     op){ if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0    ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  return (   UDINT  )  __real_to_uint (op);}    static inline    ULINT       LREAL_TO_ULINT  (BOOL EN, BOOL *ENO ,     LREAL     op){ if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0    ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  return (   ULINT  )  __real_to_uint (op);}     


  

  static inline    REAL       REAL_TO_REAL  (BOOL EN, BOOL *ENO ,     REAL     op){ if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0    ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  return (   REAL  )  __move_REAL  (op);}    static inline    LREAL       REAL_TO_LREAL  (BOOL EN, BOOL *ENO ,     REAL     op){ if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0    ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  return (   LREAL  )  __move_LREAL  (op);}       static inline    REAL       LREAL_TO_REAL  (BOOL EN, BOOL *ENO ,     LREAL     op){ if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0    ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  return (   REAL  )  __move_REAL  (op);}    static inline    LREAL       LREAL_TO_LREAL  (BOOL EN, BOOL *ENO ,     LREAL     op){ if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0    ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  return (   LREAL  )  __move_LREAL  (op);}     


  

  static inline   TIME    BYTE_TO_TIME (BOOL EN, BOOL *ENO ,   BYTE   op){ if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return (TIME){0,0}   ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  return (  TIME )  __int_to_time (op);}     static inline   TIME    WORD_TO_TIME (BOOL EN, BOOL *ENO ,   WORD   op){ if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return (TIME){0,0}   ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  return (  TIME )  __int_to_time (op);}     static inline   TIME    DWORD_TO_TIME (BOOL EN, BOOL *ENO ,   DWORD   op){ if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return (TIME){0,0}   ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  return (  TIME )  __int_to_time (op);}     static inline   TIME    LWORD_TO_TIME (BOOL EN, BOOL *ENO ,   LWORD   op){ if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return (TIME){0,0}   ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  return (  TIME )  __int_to_time (op);}     static inline   TIME    BOOL_TO_TIME (BOOL EN, BOOL *ENO ,   BOOL   op){ if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return (TIME){0,0}   ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  return (  TIME )  __int_to_time (op);}   
  static inline   TIME    SINT_TO_TIME (BOOL EN, BOOL *ENO ,   SINT   op){ if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return (TIME){0,0}   ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  return (  TIME )  __int_to_time (op);}     static inline   TIME    INT_TO_TIME (BOOL EN, BOOL *ENO ,   INT   op){ if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return (TIME){0,0}   ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  return (  TIME )  __int_to_time (op);}     static inline   TIME    DINT_TO_TIME (BOOL EN, BOOL *ENO ,   DINT   op){ if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return (TIME){0,0}   ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  return (  TIME )  __int_to_time (op);}     static inline   TIME    LINT_TO_TIME (BOOL EN, BOOL *ENO ,   LINT   op){ if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return (TIME){0,0}   ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  return (  TIME )  __int_to_time (op);}      static inline   TIME    USINT_TO_TIME (BOOL EN, BOOL *ENO ,   USINT   op){ if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return (TIME){0,0}   ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  return (  TIME )  __int_to_time (op);}     static inline   TIME    UINT_TO_TIME (BOOL EN, BOOL *ENO ,   UINT   op){ if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return (TIME){0,0}   ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  return (  TIME )  __int_to_time (op);}     static inline   TIME    UDINT_TO_TIME (BOOL EN, BOOL *ENO ,   UDINT   op){ if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return (TIME){0,0}   ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  return (  TIME )  __int_to_time (op);}     static inline   TIME    ULINT_TO_TIME (BOOL EN, BOOL *ENO ,   ULINT   op){ if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return (TIME){0,0}   ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  return (  TIME )  __int_to_time (op);}    


   static inline    DATE       BYTE_TO_DATE  (BOOL EN, BOOL *ENO ,     BYTE     op){ if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return (DATE){0,0}    ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  return (   DATE  )  __int_to_time (op);}    static inline    TOD       BYTE_TO_TOD  (BOOL EN, BOOL *ENO ,     BYTE     op){ if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return (TOD){0,0}    ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  return (   TOD  )  __int_to_time (op);}    static inline    DT       BYTE_TO_DT  (BOOL EN, BOOL *ENO ,     BYTE     op){ if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return (DT){0,0}    ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  return (   DT  )  __int_to_time (op);}        static inline    DATE       WORD_TO_DATE  (BOOL EN, BOOL *ENO ,     WORD     op){ if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return (DATE){0,0}    ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  return (   DATE  )  __int_to_time (op);}    static inline    TOD       WORD_TO_TOD  (BOOL EN, BOOL *ENO ,     WORD     op){ if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return (TOD){0,0}    ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  return (   TOD  )  __int_to_time (op);}    static inline    DT       WORD_TO_DT  (BOOL EN, BOOL *ENO ,     WORD     op){ if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return (DT){0,0}    ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  return (   DT  )  __int_to_time (op);}        static inline    DATE       DWORD_TO_DATE  (BOOL EN, BOOL *ENO ,     DWORD     op){ if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return (DATE){0,0}    ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  return (   DATE  )  __int_to_time (op);}    static inline    TOD       DWORD_TO_TOD  (BOOL EN, BOOL *ENO ,     DWORD     op){ if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return (TOD){0,0}    ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  return (   TOD  )  __int_to_time (op);}    static inline    DT       DWORD_TO_DT  (BOOL EN, BOOL *ENO ,     DWORD     op){ if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return (DT){0,0}    ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  return (   DT  )  __int_to_time (op);}        static inline    DATE       LWORD_TO_DATE  (BOOL EN, BOOL *ENO ,     LWORD     op){ if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return (DATE){0,0}    ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  return (   DATE  )  __int_to_time (op);}    static inline    TOD       LWORD_TO_TOD  (BOOL EN, BOOL *ENO ,     LWORD     op){ if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return (TOD){0,0}    ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  return (   TOD  )  __int_to_time (op);}    static inline    DT       LWORD_TO_DT  (BOOL EN, BOOL *ENO ,     LWORD     op){ if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return (DT){0,0}    ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  return (   DT  )  __int_to_time (op);}        static inline    DATE       BOOL_TO_DATE  (BOOL EN, BOOL *ENO ,     BOOL     op){ if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return (DATE){0,0}    ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  return (   DATE  )  __int_to_time (op);}    static inline    TOD       BOOL_TO_TOD  (BOOL EN, BOOL *ENO ,     BOOL     op){ if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return (TOD){0,0}    ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  return (   TOD  )  __int_to_time (op);}    static inline    DT       BOOL_TO_DT  (BOOL EN, BOOL *ENO ,     BOOL     op){ if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return (DT){0,0}    ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  return (   DT  )  __int_to_time (op);}     
   static inline    DATE       SINT_TO_DATE  (BOOL EN, BOOL *ENO ,     SINT     op){ if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return (DATE){0,0}    ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  return (   DATE  )  __int_to_time (op);}    static inline    TOD       SINT_TO_TOD  (BOOL EN, BOOL *ENO ,     SINT     op){ if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return (TOD){0,0}    ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  return (   TOD  )  __int_to_time (op);}    static inline    DT       SINT_TO_DT  (BOOL EN, BOOL *ENO ,     SINT     op){ if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return (DT){0,0}    ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  return (   DT  )  __int_to_time (op);}        static inline    DATE       INT_TO_DATE  (BOOL EN, BOOL *ENO ,     INT     op){ if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return (DATE){0,0}    ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  return (   DATE  )  __int_to_time (op);}    static inline    TOD       INT_TO_TOD  (BOOL EN, BOOL *ENO ,     INT     op){ if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return (TOD){0,0}    ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  return (   TOD  )  __int_to_time (op);}    static inline    DT       INT_TO_DT  (BOOL EN, BOOL *ENO ,     INT     op){ if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return (DT){0,0}    ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  return (   DT  )  __int_to_time (op);}        static inline    DATE       DINT_TO_DATE  (BOOL EN, BOOL *ENO ,     DINT     op){ if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return (DATE){0,0}    ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  return (   DATE  )  __int_to_time (op);}    static inline    TOD       DINT_TO_TOD  (BOOL EN, BOOL *ENO ,     DINT     op){ if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return (TOD){0,0}    ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  return (   TOD  )  __int_to_time (op);}    static inline    DT       DINT_TO_DT  (BOOL EN, BOOL *ENO ,     DINT     op){ if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return (DT){0,0}    ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  return (   DT  )  __int_to_time (op);}        static inline    DATE       LINT_TO_DATE  (BOOL EN, BOOL *ENO ,     LINT     op){ if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return (DATE){0,0}    ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  return (   DATE  )  __int_to_time (op);}    static inline    TOD       LINT_TO_TOD  (BOOL EN, BOOL *ENO ,     LINT     op){ if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return (TOD){0,0}    ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  return (   TOD  )  __int_to_time (op);}    static inline    DT       LINT_TO_DT  (BOOL EN, BOOL *ENO ,     LINT     op){ if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return (DT){0,0}    ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  return (   DT  )  __int_to_time (op);}         static inline    DATE       USINT_TO_DATE  (BOOL EN, BOOL *ENO ,     USINT     op){ if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return (DATE){0,0}    ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  return (   DATE  )  __int_to_time (op);}    static inline    TOD       USINT_TO_TOD  (BOOL EN, BOOL *ENO ,     USINT     op){ if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return (TOD){0,0}    ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  return (   TOD  )  __int_to_time (op);}    static inline    DT       USINT_TO_DT  (BOOL EN, BOOL *ENO ,     USINT     op){ if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return (DT){0,0}    ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  return (   DT  )  __int_to_time (op);}        static inline    DATE       UINT_TO_DATE  (BOOL EN, BOOL *ENO ,     UINT     op){ if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return (DATE){0,0}    ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  return (   DATE  )  __int_to_time (op);}    static inline    TOD       UINT_TO_TOD  (BOOL EN, BOOL *ENO ,     UINT     op){ if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return (TOD){0,0}    ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  return (   TOD  )  __int_to_time (op);}    static inline    DT       UINT_TO_DT  (BOOL EN, BOOL *ENO ,     UINT     op){ if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return (DT){0,0}    ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  return (   DT  )  __int_to_time (op);}        static inline    DATE       UDINT_TO_DATE  (BOOL EN, BOOL *ENO ,     UDINT     op){ if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return (DATE){0,0}    ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  return (   DATE  )  __int_to_time (op);}    static inline    TOD       UDINT_TO_TOD  (BOOL EN, BOOL *ENO ,     UDINT     op){ if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return (TOD){0,0}    ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  return (   TOD  )  __int_to_time (op);}    static inline    DT       UDINT_TO_DT  (BOOL EN, BOOL *ENO ,     UDINT     op){ if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return (DT){0,0}    ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  return (   DT  )  __int_to_time (op);}        static inline    DATE       ULINT_TO_DATE  (BOOL EN, BOOL *ENO ,     ULINT     op){ if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return (DATE){0,0}    ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  return (   DATE  )  __int_to_time (op);}    static inline    TOD       ULINT_TO_TOD  (BOOL EN, BOOL *ENO ,     ULINT     op){ if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return (TOD){0,0}    ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  return (   TOD  )  __int_to_time (op);}    static inline    DT       ULINT_TO_DT  (BOOL EN, BOOL *ENO ,     ULINT     op){ if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return (DT){0,0}    ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  return (   DT  )  __int_to_time (op);}      


  

 static inline   TIME    REAL_TO_TIME (BOOL EN, BOOL *ENO ,   REAL   op){ if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return (TIME){0,0}   ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  return (  TIME )  __real_to_time (op);}    static inline   TIME    LREAL_TO_TIME (BOOL EN, BOOL *ENO ,   LREAL   op){ if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return (TIME){0,0}   ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  return (  TIME )  __real_to_time (op);}   


  static inline    DATE       REAL_TO_DATE  (BOOL EN, BOOL *ENO ,     REAL     op){ if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return (DATE){0,0}    ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  return (   DATE  )  __real_to_time (op);}    static inline    TOD       REAL_TO_TOD  (BOOL EN, BOOL *ENO ,     REAL     op){ if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return (TOD){0,0}    ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  return (   TOD  )  __real_to_time (op);}    static inline    DT       REAL_TO_DT  (BOOL EN, BOOL *ENO ,     REAL     op){ if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return (DT){0,0}    ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  return (   DT  )  __real_to_time (op);}       static inline    DATE       LREAL_TO_DATE  (BOOL EN, BOOL *ENO ,     LREAL     op){ if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return (DATE){0,0}    ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  return (   DATE  )  __real_to_time (op);}    static inline    TOD       LREAL_TO_TOD  (BOOL EN, BOOL *ENO ,     LREAL     op){ if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return (TOD){0,0}    ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  return (   TOD  )  __real_to_time (op);}    static inline    DT       LREAL_TO_DT  (BOOL EN, BOOL *ENO ,     LREAL     op){ if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return (DT){0,0}    ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  return (   DT  )  __real_to_time (op);}     


  

  static inline    SINT        TIME_TO_SINT  (BOOL EN, BOOL *ENO ,      TIME      op){ if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0    ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  return (   SINT  )  __time_to_int (op);}     static inline    INT        TIME_TO_INT  (BOOL EN, BOOL *ENO ,      TIME      op){ if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0    ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  return (   INT  )  __time_to_int (op);}     static inline    DINT        TIME_TO_DINT  (BOOL EN, BOOL *ENO ,      TIME      op){ if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0    ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  return (   DINT  )  __time_to_int (op);}     static inline    LINT        TIME_TO_LINT  (BOOL EN, BOOL *ENO ,      TIME      op){ if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0    ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  return (   LINT  )  __time_to_int (op);}      static inline    USINT        TIME_TO_USINT  (BOOL EN, BOOL *ENO ,      TIME      op){ if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0    ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  return (   USINT  )  __time_to_int (op);}     static inline    UINT        TIME_TO_UINT  (BOOL EN, BOOL *ENO ,      TIME      op){ if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0    ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  return (   UINT  )  __time_to_int (op);}     static inline    UDINT        TIME_TO_UDINT  (BOOL EN, BOOL *ENO ,      TIME      op){ if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0    ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  return (   UDINT  )  __time_to_int (op);}     static inline    ULINT        TIME_TO_ULINT  (BOOL EN, BOOL *ENO ,      TIME      op){ if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0    ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  return (   ULINT  )  __time_to_int (op);}     
  static inline    BYTE        TIME_TO_BYTE  (BOOL EN, BOOL *ENO ,      TIME      op){ if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0    ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  return (   BYTE  )  __time_to_int (op);}     static inline    WORD        TIME_TO_WORD  (BOOL EN, BOOL *ENO ,      TIME      op){ if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0    ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  return (   WORD  )  __time_to_int (op);}     static inline    DWORD        TIME_TO_DWORD  (BOOL EN, BOOL *ENO ,      TIME      op){ if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0    ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  return (   DWORD  )  __time_to_int (op);}     static inline    LWORD        TIME_TO_LWORD  (BOOL EN, BOOL *ENO ,      TIME      op){ if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0    ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  return (   LWORD  )  __time_to_int (op);}     static inline    BOOL       TIME_TO_BOOL  (BOOL EN, BOOL *ENO ,     TIME     op){ if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0    ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  return (   BOOL  )  __time_to_int (op);}    
   static inline    SINT        DATE_TO_SINT  (BOOL EN, BOOL *ENO ,      DATE      op){ if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0    ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  return (   SINT  )  __time_to_int (op);}     static inline    INT        DATE_TO_INT  (BOOL EN, BOOL *ENO ,      DATE      op){ if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0    ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  return (   INT  )  __time_to_int (op);}     static inline    DINT        DATE_TO_DINT  (BOOL EN, BOOL *ENO ,      DATE      op){ if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0    ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  return (   DINT  )  __time_to_int (op);}     static inline    LINT        DATE_TO_LINT  (BOOL EN, BOOL *ENO ,      DATE      op){ if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0    ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  return (   LINT  )  __time_to_int (op);}      static inline    USINT        DATE_TO_USINT  (BOOL EN, BOOL *ENO ,      DATE      op){ if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0    ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  return (   USINT  )  __time_to_int (op);}     static inline    UINT        DATE_TO_UINT  (BOOL EN, BOOL *ENO ,      DATE      op){ if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0    ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  return (   UINT  )  __time_to_int (op);}     static inline    UDINT        DATE_TO_UDINT  (BOOL EN, BOOL *ENO ,      DATE      op){ if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0    ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  return (   UDINT  )  __time_to_int (op);}     static inline    ULINT        DATE_TO_ULINT  (BOOL EN, BOOL *ENO ,      DATE      op){ if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0    ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  return (   ULINT  )  __time_to_int (op);}         static inline    SINT        TOD_TO_SINT  (BOOL EN, BOOL *ENO ,      TOD      op){ if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0    ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  return (   SINT  )  __time_to_int (op);}     static inline    INT        TOD_TO_INT  (BOOL EN, BOOL *ENO ,      TOD      op){ if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0    ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  return (   INT  )  __time_to_int (op);}     static inline    DINT        TOD_TO_DINT  (BOOL EN, BOOL *ENO ,      TOD      op){ if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0    ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  return (   DINT  )  __time_to_int (op);}     static inline    LINT        TOD_TO_LINT  (BOOL EN, BOOL *ENO ,      TOD      op){ if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0    ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  return (   LINT  )  __time_to_int (op);}      static inline    USINT        TOD_TO_USINT  (BOOL EN, BOOL *ENO ,      TOD      op){ if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0    ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  return (   USINT  )  __time_to_int (op);}     static inline    UINT        TOD_TO_UINT  (BOOL EN, BOOL *ENO ,      TOD      op){ if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0    ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  return (   UINT  )  __time_to_int (op);}     static inline    UDINT        TOD_TO_UDINT  (BOOL EN, BOOL *ENO ,      TOD      op){ if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0    ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  return (   UDINT  )  __time_to_int (op);}     static inline    ULINT        TOD_TO_ULINT  (BOOL EN, BOOL *ENO ,      TOD      op){ if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0    ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  return (   ULINT  )  __time_to_int (op);}         static inline    SINT        DT_TO_SINT  (BOOL EN, BOOL *ENO ,      DT      op){ if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0    ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  return (   SINT  )  __time_to_int (op);}     static inline    INT        DT_TO_INT  (BOOL EN, BOOL *ENO ,      DT      op){ if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0    ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  return (   INT  )  __time_to_int (op);}     static inline    DINT        DT_TO_DINT  (BOOL EN, BOOL *ENO ,      DT      op){ if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0    ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  return (   DINT  )  __time_to_int (op);}     static inline    LINT        DT_TO_LINT  (BOOL EN, BOOL *ENO ,      DT      op){ if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0    ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  return (   LINT  )  __time_to_int (op);}      static inline    USINT        DT_TO_USINT  (BOOL EN, BOOL *ENO ,      DT      op){ if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0    ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  return (   USINT  )  __time_to_int (op);}     static inline    UINT        DT_TO_UINT  (BOOL EN, BOOL *ENO ,      DT      op){ if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0    ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  return (   UINT  )  __time_to_int (op);}     static inline    UDINT        DT_TO_UDINT  (BOOL EN, BOOL *ENO ,      DT      op){ if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0    ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  return (   UDINT  )  __time_to_int (op);}     static inline    ULINT        DT_TO_ULINT  (BOOL EN, BOOL *ENO ,      DT      op){ if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0    ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  return (   ULINT  )  __time_to_int (op);}      
   static inline    BYTE        DATE_TO_BYTE  (BOOL EN, BOOL *ENO ,      DATE      op){ if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0    ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  return (   BYTE  )  __time_to_int (op);}     static inline    WORD        DATE_TO_WORD  (BOOL EN, BOOL *ENO ,      DATE      op){ if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0    ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  return (   WORD  )  __time_to_int (op);}     static inline    DWORD        DATE_TO_DWORD  (BOOL EN, BOOL *ENO ,      DATE      op){ if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0    ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  return (   DWORD  )  __time_to_int (op);}     static inline    LWORD        DATE_TO_LWORD  (BOOL EN, BOOL *ENO ,      DATE      op){ if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0    ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  return (   LWORD  )  __time_to_int (op);}     static inline    BOOL       DATE_TO_BOOL  (BOOL EN, BOOL *ENO ,     DATE     op){ if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0    ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  return (   BOOL  )  __time_to_int (op);}        static inline    BYTE        TOD_TO_BYTE  (BOOL EN, BOOL *ENO ,      TOD      op){ if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0    ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  return (   BYTE  )  __time_to_int (op);}     static inline    WORD        TOD_TO_WORD  (BOOL EN, BOOL *ENO ,      TOD      op){ if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0    ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  return (   WORD  )  __time_to_int (op);}     static inline    DWORD        TOD_TO_DWORD  (BOOL EN, BOOL *ENO ,      TOD      op){ if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0    ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  return (   DWORD  )  __time_to_int (op);}     static inline    LWORD        TOD_TO_LWORD  (BOOL EN, BOOL *ENO ,      TOD      op){ if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0    ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  return (   LWORD  )  __time_to_int (op);}     static inline    BOOL       TOD_TO_BOOL  (BOOL EN, BOOL *ENO ,     TOD     op){ if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0    ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  return (   BOOL  )  __time_to_int (op);}        static inline    BYTE        DT_TO_BYTE  (BOOL EN, BOOL *ENO ,      DT      op){ if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0    ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  return (   BYTE  )  __time_to_int (op);}     static inline    WORD        DT_TO_WORD  (BOOL EN, BOOL *ENO ,      DT      op){ if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0    ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  return (   WORD  )  __time_to_int (op);}     static inline    DWORD        DT_TO_DWORD  (BOOL EN, BOOL *ENO ,      DT      op){ if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0    ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  return (   DWORD  )  __time_to_int (op);}     static inline    LWORD        DT_TO_LWORD  (BOOL EN, BOOL *ENO ,      DT      op){ if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0    ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  return (   LWORD  )  __time_to_int (op);}     static inline    BOOL       DT_TO_BOOL  (BOOL EN, BOOL *ENO ,     DT     op){ if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0    ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  return (   BOOL  )  __time_to_int (op);}     


  

 static inline    REAL       TIME_TO_REAL  (BOOL EN, BOOL *ENO ,     TIME     op){ if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0    ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  return (   REAL  )  __time_to_real (op);}    static inline    LREAL       TIME_TO_LREAL  (BOOL EN, BOOL *ENO ,     TIME     op){ if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0    ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  return (   LREAL  )  __time_to_real (op);}    
  static inline    REAL       DATE_TO_REAL  (BOOL EN, BOOL *ENO ,     DATE     op){ if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0    ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  return (   REAL  )  __time_to_real (op);}    static inline    LREAL       DATE_TO_LREAL  (BOOL EN, BOOL *ENO ,     DATE     op){ if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0    ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  return (   LREAL  )  __time_to_real (op);}       static inline    REAL       TOD_TO_REAL  (BOOL EN, BOOL *ENO ,     TOD     op){ if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0    ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  return (   REAL  )  __time_to_real (op);}    static inline    LREAL       TOD_TO_LREAL  (BOOL EN, BOOL *ENO ,     TOD     op){ if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0    ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  return (   LREAL  )  __time_to_real (op);}       static inline    REAL       DT_TO_REAL  (BOOL EN, BOOL *ENO ,     DT     op){ if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0    ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  return (   REAL  )  __time_to_real (op);}    static inline    LREAL       DT_TO_LREAL  (BOOL EN, BOOL *ENO ,     DT     op){ if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0    ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  return (   LREAL  )  __time_to_real (op);}     



  
 
static inline   DATE   DT_TO_DATE (BOOL EN, BOOL *ENO ,  DT  op){ if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return (DATE){0,0}   ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  return (  DATE )   __date_and_time_to_date (op);} 
static inline   DT   DT_TO_DT (BOOL EN, BOOL *ENO ,  DT  op){ if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return (DT){0,0}   ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  return (  DT )     __move_DT (op);} 
static inline   TOD   DT_TO_TOD (BOOL EN, BOOL *ENO ,  DT  op){ if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return (TOD){0,0}   ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  return (  TOD )    __date_and_time_to_time_of_day (op);} 
 
static inline   DATE   DATE_TO_DATE (BOOL EN, BOOL *ENO ,  DATE  op){ if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return (DATE){0,0}   ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  return (  DATE )  __move_DATE (op);} 
 
 
 
 
 
static inline   TOD   TOD_TO_TOD (BOOL EN, BOOL *ENO ,  TOD  op){ if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return (TOD){0,0}   ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  return (  TOD )  __move_TOD (op);} 


  
 
 
 

  
static inline   TIME   TIME_TO_TIME (BOOL EN, BOOL *ENO ,  TIME  op){ if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return (TIME){0,0}   ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  return (  TIME )  __move_TIME (op);} 


  
static inline   STRING   BOOL_TO_STRING (BOOL EN, BOOL *ENO ,  BOOL  op){ if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return (STRING){0,""}   ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  return (  STRING )  __bool_to_string (op);} 

 static inline   STRING    BYTE_TO_STRING (BOOL EN, BOOL *ENO ,   BYTE   op){ if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return (STRING){0,""}   ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  return (  STRING )  __bit_to_string (op);}    static inline   STRING    WORD_TO_STRING (BOOL EN, BOOL *ENO ,   WORD   op){ if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return (STRING){0,""}   ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  return (  STRING )  __bit_to_string (op);}    static inline   STRING    DWORD_TO_STRING (BOOL EN, BOOL *ENO ,   DWORD   op){ if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return (STRING){0,""}   ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  return (  STRING )  __bit_to_string (op);}    static inline   STRING    LWORD_TO_STRING (BOOL EN, BOOL *ENO ,   LWORD   op){ if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return (STRING){0,""}   ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  return (  STRING )  __bit_to_string (op);}   


  

 static inline   STRING    SINT_TO_STRING (BOOL EN, BOOL *ENO ,   SINT   op){ if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return (STRING){0,""}   ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  return (  STRING )  __sint_to_string (op);}    static inline   STRING    INT_TO_STRING (BOOL EN, BOOL *ENO ,   INT   op){ if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return (STRING){0,""}   ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  return (  STRING )  __sint_to_string (op);}    static inline   STRING    DINT_TO_STRING (BOOL EN, BOOL *ENO ,   DINT   op){ if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return (STRING){0,""}   ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  return (  STRING )  __sint_to_string (op);}    static inline   STRING    LINT_TO_STRING (BOOL EN, BOOL *ENO ,   LINT   op){ if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return (STRING){0,""}   ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  return (  STRING )  __sint_to_string (op);}   


 static inline   STRING    USINT_TO_STRING (BOOL EN, BOOL *ENO ,   USINT   op){ if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return (STRING){0,""}   ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  return (  STRING )  __uint_to_string (op);}    static inline   STRING    UINT_TO_STRING (BOOL EN, BOOL *ENO ,   UINT   op){ if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return (STRING){0,""}   ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  return (  STRING )  __uint_to_string (op);}    static inline   STRING    UDINT_TO_STRING (BOOL EN, BOOL *ENO ,   UDINT   op){ if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return (STRING){0,""}   ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  return (  STRING )  __uint_to_string (op);}    static inline   STRING    ULINT_TO_STRING (BOOL EN, BOOL *ENO ,   ULINT   op){ if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return (STRING){0,""}   ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  return (  STRING )  __uint_to_string (op);}   


  

 static inline   STRING    REAL_TO_STRING (BOOL EN, BOOL *ENO ,   REAL   op){ if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return (STRING){0,""}   ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  return (  STRING )  __real_to_string (op);}    static inline   STRING    LREAL_TO_STRING (BOOL EN, BOOL *ENO ,   LREAL   op){ if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return (STRING){0,""}   ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  return (  STRING )  __real_to_string (op);}   


  
static inline   STRING   DATE_TO_STRING (BOOL EN, BOOL *ENO ,  DATE  op){ if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return (STRING){0,""}   ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  return (  STRING )  __date_to_string (op);} 
static inline     STRING   DT_TO_STRING (BOOL EN, BOOL *ENO ,  DT  op){ if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return (STRING){0,""}   ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  return (    STRING )  __dt_to_string (op);} 
static inline    STRING   TOD_TO_STRING (BOOL EN, BOOL *ENO ,  TOD  op){ if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return (STRING){0,""}   ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  return (   STRING )  __tod_to_string (op);} 

  
static inline   STRING   TIME_TO_STRING (BOOL EN, BOOL *ENO ,  TIME  op){ if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return (STRING){0,""}   ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  return (  STRING )  __time_to_string (op);} 


  
static inline   BOOL   STRING_TO_BOOL (BOOL EN, BOOL *ENO ,  STRING  op){ if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0   ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  return (  BOOL )  __string_to_bool (op);} 

 static inline    BYTE    STRING_TO_BYTE  (BOOL EN, BOOL *ENO ,  STRING  op){ if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0    ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  return (   BYTE  )  __string_to_bit (op);}    static inline    WORD    STRING_TO_WORD  (BOOL EN, BOOL *ENO ,  STRING  op){ if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0    ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  return (   WORD  )  __string_to_bit (op);}    static inline    DWORD    STRING_TO_DWORD  (BOOL EN, BOOL *ENO ,  STRING  op){ if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0    ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  return (   DWORD  )  __string_to_bit (op);}    static inline    LWORD    STRING_TO_LWORD  (BOOL EN, BOOL *ENO ,  STRING  op){ if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0    ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  return (   LWORD  )  __string_to_bit (op);}   


  

 static inline    SINT    STRING_TO_SINT  (BOOL EN, BOOL *ENO ,  STRING  op){ if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0    ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  return (   SINT  )  __string_to_sint (op);}    static inline    INT    STRING_TO_INT  (BOOL EN, BOOL *ENO ,  STRING  op){ if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0    ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  return (   INT  )  __string_to_sint (op);}    static inline    DINT    STRING_TO_DINT  (BOOL EN, BOOL *ENO ,  STRING  op){ if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0    ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  return (   DINT  )  __string_to_sint (op);}    static inline    LINT    STRING_TO_LINT  (BOOL EN, BOOL *ENO ,  STRING  op){ if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0    ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  return (   LINT  )  __string_to_sint (op);}   


 static inline    USINT    STRING_TO_USINT  (BOOL EN, BOOL *ENO ,  STRING  op){ if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0    ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  return (   USINT  )  __string_to_uint (op);}    static inline    UINT    STRING_TO_UINT  (BOOL EN, BOOL *ENO ,  STRING  op){ if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0    ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  return (   UINT  )  __string_to_uint (op);}    static inline    UDINT    STRING_TO_UDINT  (BOOL EN, BOOL *ENO ,  STRING  op){ if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0    ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  return (   UDINT  )  __string_to_uint (op);}    static inline    ULINT    STRING_TO_ULINT  (BOOL EN, BOOL *ENO ,  STRING  op){ if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0    ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  return (   ULINT  )  __string_to_uint (op);}   


  

 static inline    REAL    STRING_TO_REAL  (BOOL EN, BOOL *ENO ,  STRING  op){ if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0    ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  return (   REAL  )  __string_to_real (op);}    static inline    LREAL    STRING_TO_LREAL  (BOOL EN, BOOL *ENO ,  STRING  op){ if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0    ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  return (   LREAL  )  __string_to_real (op);}   


  

 static inline    DATE    STRING_TO_DATE  (BOOL EN, BOOL *ENO ,  STRING  op){ if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return (DATE){0,0}    ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  return (   DATE  )  __string_to_time (op);}    static inline    TOD    STRING_TO_TOD  (BOOL EN, BOOL *ENO ,  STRING  op){ if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return (TOD){0,0}    ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  return (   TOD  )  __string_to_time (op);}    static inline    DT    STRING_TO_DT  (BOOL EN, BOOL *ENO ,  STRING  op){ if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return (DT){0,0}    ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  return (   DT  )  __string_to_time (op);}   

                                   
  
static inline   TIME   STRING_TO_TIME (BOOL EN, BOOL *ENO ,  STRING  op){ if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return (TIME){0,0}   ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  return (  TIME )  __string_to_time (op);} 


  





   static inline  SINT  TRUNC__SINT__REAL    (BOOL EN, BOOL *ENO ,     REAL     op){ if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0   ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  return ( SINT )__move_SINT (op);}    static inline  INT  TRUNC__INT__REAL    (BOOL EN, BOOL *ENO ,     REAL     op){ if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0   ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  return ( INT )__move_INT (op);}    static inline  DINT  TRUNC__DINT__REAL    (BOOL EN, BOOL *ENO ,     REAL     op){ if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0   ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  return ( DINT )__move_DINT (op);}    static inline  LINT  TRUNC__LINT__REAL    (BOOL EN, BOOL *ENO ,     REAL     op){ if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0   ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  return ( LINT )__move_LINT (op);}     static inline  USINT  TRUNC__USINT__REAL    (BOOL EN, BOOL *ENO ,     REAL     op){ if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0   ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  return ( USINT )__move_USINT (op);}    static inline  UINT  TRUNC__UINT__REAL    (BOOL EN, BOOL *ENO ,     REAL     op){ if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0   ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  return ( UINT )__move_UINT (op);}    static inline  UDINT  TRUNC__UDINT__REAL    (BOOL EN, BOOL *ENO ,     REAL     op){ if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0   ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  return ( UDINT )__move_UDINT (op);}    static inline  ULINT  TRUNC__ULINT__REAL    (BOOL EN, BOOL *ENO ,     REAL     op){ if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0   ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  return ( ULINT )__move_ULINT (op);}        static inline  SINT  TRUNC__SINT__LREAL    (BOOL EN, BOOL *ENO ,     LREAL     op){ if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0   ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  return ( SINT )__move_SINT (op);}    static inline  INT  TRUNC__INT__LREAL    (BOOL EN, BOOL *ENO ,     LREAL     op){ if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0   ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  return ( INT )__move_INT (op);}    static inline  DINT  TRUNC__DINT__LREAL    (BOOL EN, BOOL *ENO ,     LREAL     op){ if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0   ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  return ( DINT )__move_DINT (op);}    static inline  LINT  TRUNC__LINT__LREAL    (BOOL EN, BOOL *ENO ,     LREAL     op){ if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0   ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  return ( LINT )__move_LINT (op);}     static inline  USINT  TRUNC__USINT__LREAL    (BOOL EN, BOOL *ENO ,     LREAL     op){ if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0   ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  return ( USINT )__move_USINT (op);}    static inline  UINT  TRUNC__UINT__LREAL    (BOOL EN, BOOL *ENO ,     LREAL     op){ if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0   ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  return ( UINT )__move_UINT (op);}    static inline  UDINT  TRUNC__UDINT__LREAL    (BOOL EN, BOOL *ENO ,     LREAL     op){ if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0   ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  return ( UDINT )__move_UDINT (op);}    static inline  ULINT  TRUNC__ULINT__LREAL    (BOOL EN, BOOL *ENO ,     LREAL     op){ if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0   ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  return ( ULINT )__move_ULINT (op);}     



  








  static inline  BYTE     USINT_TO_BCD_BYTE (BOOL EN, BOOL *ENO ,    USINT    op){ if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0   ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  return ( BYTE )__uint_to_bcd(op);}static inline  BYTE     USINT_TO_BCD__BYTE__USINT   (BOOL EN, BOOL *ENO ,    USINT    op){ return    USINT_TO_BCD_BYTE (EN, ENO , op);}   static inline  WORD     USINT_TO_BCD_WORD (BOOL EN, BOOL *ENO ,    USINT    op){ if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0   ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  return ( WORD )__uint_to_bcd(op);}static inline  WORD     USINT_TO_BCD__WORD__USINT   (BOOL EN, BOOL *ENO ,    USINT    op){ return    USINT_TO_BCD_WORD (EN, ENO , op);}   static inline  DWORD     USINT_TO_BCD_DWORD (BOOL EN, BOOL *ENO ,    USINT    op){ if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0   ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  return ( DWORD )__uint_to_bcd(op);}static inline  DWORD     USINT_TO_BCD__DWORD__USINT   (BOOL EN, BOOL *ENO ,    USINT    op){ return    USINT_TO_BCD_DWORD (EN, ENO , op);}   static inline  LWORD     USINT_TO_BCD_LWORD (BOOL EN, BOOL *ENO ,    USINT    op){ if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0   ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  return ( LWORD )__uint_to_bcd(op);}static inline  LWORD     USINT_TO_BCD__LWORD__USINT   (BOOL EN, BOOL *ENO ,    USINT    op){ return    USINT_TO_BCD_LWORD (EN, ENO , op);}      static inline  BYTE     UINT_TO_BCD_BYTE (BOOL EN, BOOL *ENO ,    UINT    op){ if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0   ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  return ( BYTE )__uint_to_bcd(op);}static inline  BYTE     UINT_TO_BCD__BYTE__UINT   (BOOL EN, BOOL *ENO ,    UINT    op){ return    UINT_TO_BCD_BYTE (EN, ENO , op);}   static inline  WORD     UINT_TO_BCD_WORD (BOOL EN, BOOL *ENO ,    UINT    op){ if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0   ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  return ( WORD )__uint_to_bcd(op);}static inline  WORD     UINT_TO_BCD__WORD__UINT   (BOOL EN, BOOL *ENO ,    UINT    op){ return    UINT_TO_BCD_WORD (EN, ENO , op);}   static inline  DWORD     UINT_TO_BCD_DWORD (BOOL EN, BOOL *ENO ,    UINT    op){ if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0   ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  return ( DWORD )__uint_to_bcd(op);}static inline  DWORD     UINT_TO_BCD__DWORD__UINT   (BOOL EN, BOOL *ENO ,    UINT    op){ return    UINT_TO_BCD_DWORD (EN, ENO , op);}   static inline  LWORD     UINT_TO_BCD_LWORD (BOOL EN, BOOL *ENO ,    UINT    op){ if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0   ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  return ( LWORD )__uint_to_bcd(op);}static inline  LWORD     UINT_TO_BCD__LWORD__UINT   (BOOL EN, BOOL *ENO ,    UINT    op){ return    UINT_TO_BCD_LWORD (EN, ENO , op);}      static inline  BYTE     UDINT_TO_BCD_BYTE (BOOL EN, BOOL *ENO ,    UDINT    op){ if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0   ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  return ( BYTE )__uint_to_bcd(op);}static inline  BYTE     UDINT_TO_BCD__BYTE__UDINT   (BOOL EN, BOOL *ENO ,    UDINT    op){ return    UDINT_TO_BCD_BYTE (EN, ENO , op);}   static inline  WORD     UDINT_TO_BCD_WORD (BOOL EN, BOOL *ENO ,    UDINT    op){ if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0   ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  return ( WORD )__uint_to_bcd(op);}static inline  WORD     UDINT_TO_BCD__WORD__UDINT   (BOOL EN, BOOL *ENO ,    UDINT    op){ return    UDINT_TO_BCD_WORD (EN, ENO , op);}   static inline  DWORD     UDINT_TO_BCD_DWORD (BOOL EN, BOOL *ENO ,    UDINT    op){ if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0   ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  return ( DWORD )__uint_to_bcd(op);}static inline  DWORD     UDINT_TO_BCD__DWORD__UDINT   (BOOL EN, BOOL *ENO ,    UDINT    op){ return    UDINT_TO_BCD_DWORD (EN, ENO , op);}   static inline  LWORD     UDINT_TO_BCD_LWORD (BOOL EN, BOOL *ENO ,    UDINT    op){ if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0   ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  return ( LWORD )__uint_to_bcd(op);}static inline  LWORD     UDINT_TO_BCD__LWORD__UDINT   (BOOL EN, BOOL *ENO ,    UDINT    op){ return    UDINT_TO_BCD_LWORD (EN, ENO , op);}      static inline  BYTE     ULINT_TO_BCD_BYTE (BOOL EN, BOOL *ENO ,    ULINT    op){ if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0   ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  return ( BYTE )__uint_to_bcd(op);}static inline  BYTE     ULINT_TO_BCD__BYTE__ULINT   (BOOL EN, BOOL *ENO ,    ULINT    op){ return    ULINT_TO_BCD_BYTE (EN, ENO , op);}   static inline  WORD     ULINT_TO_BCD_WORD (BOOL EN, BOOL *ENO ,    ULINT    op){ if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0   ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  return ( WORD )__uint_to_bcd(op);}static inline  WORD     ULINT_TO_BCD__WORD__ULINT   (BOOL EN, BOOL *ENO ,    ULINT    op){ return    ULINT_TO_BCD_WORD (EN, ENO , op);}   static inline  DWORD     ULINT_TO_BCD_DWORD (BOOL EN, BOOL *ENO ,    ULINT    op){ if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0   ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  return ( DWORD )__uint_to_bcd(op);}static inline  DWORD     ULINT_TO_BCD__DWORD__ULINT   (BOOL EN, BOOL *ENO ,    ULINT    op){ return    ULINT_TO_BCD_DWORD (EN, ENO , op);}   static inline  LWORD     ULINT_TO_BCD_LWORD (BOOL EN, BOOL *ENO ,    ULINT    op){ if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0   ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  return ( LWORD )__uint_to_bcd(op);}static inline  LWORD     ULINT_TO_BCD__LWORD__ULINT   (BOOL EN, BOOL *ENO ,    ULINT    op){ return    ULINT_TO_BCD_LWORD (EN, ENO , op);}    



  








  static inline  USINT     BYTE_BCD_TO_USINT (BOOL EN, BOOL *ENO ,    BYTE    op){ if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0   ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  return ( USINT )__bcd_to_uint(op);}static inline  USINT  BCD_TO_USINT__USINT__BYTE   (BOOL EN, BOOL *ENO ,    BYTE    op){ return    BYTE_BCD_TO_USINT (EN, ENO , op);}   static inline  UINT     BYTE_BCD_TO_UINT (BOOL EN, BOOL *ENO ,    BYTE    op){ if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0   ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  return ( UINT )__bcd_to_uint(op);}static inline  UINT  BCD_TO_UINT__UINT__BYTE   (BOOL EN, BOOL *ENO ,    BYTE    op){ return    BYTE_BCD_TO_UINT (EN, ENO , op);}   static inline  UDINT     BYTE_BCD_TO_UDINT (BOOL EN, BOOL *ENO ,    BYTE    op){ if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0   ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  return ( UDINT )__bcd_to_uint(op);}static inline  UDINT  BCD_TO_UDINT__UDINT__BYTE   (BOOL EN, BOOL *ENO ,    BYTE    op){ return    BYTE_BCD_TO_UDINT (EN, ENO , op);}   static inline  ULINT     BYTE_BCD_TO_ULINT (BOOL EN, BOOL *ENO ,    BYTE    op){ if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0   ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  return ( ULINT )__bcd_to_uint(op);}static inline  ULINT  BCD_TO_ULINT__ULINT__BYTE   (BOOL EN, BOOL *ENO ,    BYTE    op){ return    BYTE_BCD_TO_ULINT (EN, ENO , op);}      static inline  USINT     WORD_BCD_TO_USINT (BOOL EN, BOOL *ENO ,    WORD    op){ if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0   ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  return ( USINT )__bcd_to_uint(op);}static inline  USINT  BCD_TO_USINT__USINT__WORD   (BOOL EN, BOOL *ENO ,    WORD    op){ return    WORD_BCD_TO_USINT (EN, ENO , op);}   static inline  UINT     WORD_BCD_TO_UINT (BOOL EN, BOOL *ENO ,    WORD    op){ if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0   ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  return ( UINT )__bcd_to_uint(op);}static inline  UINT  BCD_TO_UINT__UINT__WORD   (BOOL EN, BOOL *ENO ,    WORD    op){ return    WORD_BCD_TO_UINT (EN, ENO , op);}   static inline  UDINT     WORD_BCD_TO_UDINT (BOOL EN, BOOL *ENO ,    WORD    op){ if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0   ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  return ( UDINT )__bcd_to_uint(op);}static inline  UDINT  BCD_TO_UDINT__UDINT__WORD   (BOOL EN, BOOL *ENO ,    WORD    op){ return    WORD_BCD_TO_UDINT (EN, ENO , op);}   static inline  ULINT     WORD_BCD_TO_ULINT (BOOL EN, BOOL *ENO ,    WORD    op){ if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0   ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  return ( ULINT )__bcd_to_uint(op);}static inline  ULINT  BCD_TO_ULINT__ULINT__WORD   (BOOL EN, BOOL *ENO ,    WORD    op){ return    WORD_BCD_TO_ULINT (EN, ENO , op);}      static inline  USINT     DWORD_BCD_TO_USINT (BOOL EN, BOOL *ENO ,    DWORD    op){ if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0   ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  return ( USINT )__bcd_to_uint(op);}static inline  USINT  BCD_TO_USINT__USINT__DWORD   (BOOL EN, BOOL *ENO ,    DWORD    op){ return    DWORD_BCD_TO_USINT (EN, ENO , op);}   static inline  UINT     DWORD_BCD_TO_UINT (BOOL EN, BOOL *ENO ,    DWORD    op){ if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0   ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  return ( UINT )__bcd_to_uint(op);}static inline  UINT  BCD_TO_UINT__UINT__DWORD   (BOOL EN, BOOL *ENO ,    DWORD    op){ return    DWORD_BCD_TO_UINT (EN, ENO , op);}   static inline  UDINT     DWORD_BCD_TO_UDINT (BOOL EN, BOOL *ENO ,    DWORD    op){ if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0   ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  return ( UDINT )__bcd_to_uint(op);}static inline  UDINT  BCD_TO_UDINT__UDINT__DWORD   (BOOL EN, BOOL *ENO ,    DWORD    op){ return    DWORD_BCD_TO_UDINT (EN, ENO , op);}   static inline  ULINT     DWORD_BCD_TO_ULINT (BOOL EN, BOOL *ENO ,    DWORD    op){ if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0   ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  return ( ULINT )__bcd_to_uint(op);}static inline  ULINT  BCD_TO_ULINT__ULINT__DWORD   (BOOL EN, BOOL *ENO ,    DWORD    op){ return    DWORD_BCD_TO_ULINT (EN, ENO , op);}      static inline  USINT     LWORD_BCD_TO_USINT (BOOL EN, BOOL *ENO ,    LWORD    op){ if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0   ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  return ( USINT )__bcd_to_uint(op);}static inline  USINT  BCD_TO_USINT__USINT__LWORD   (BOOL EN, BOOL *ENO ,    LWORD    op){ return    LWORD_BCD_TO_USINT (EN, ENO , op);}   static inline  UINT     LWORD_BCD_TO_UINT (BOOL EN, BOOL *ENO ,    LWORD    op){ if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0   ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  return ( UINT )__bcd_to_uint(op);}static inline  UINT  BCD_TO_UINT__UINT__LWORD   (BOOL EN, BOOL *ENO ,    LWORD    op){ return    LWORD_BCD_TO_UINT (EN, ENO , op);}   static inline  UDINT     LWORD_BCD_TO_UDINT (BOOL EN, BOOL *ENO ,    LWORD    op){ if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0   ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  return ( UDINT )__bcd_to_uint(op);}static inline  UDINT  BCD_TO_UDINT__UDINT__LWORD   (BOOL EN, BOOL *ENO ,    LWORD    op){ return    LWORD_BCD_TO_UDINT (EN, ENO , op);}   static inline  ULINT     LWORD_BCD_TO_ULINT (BOOL EN, BOOL *ENO ,    LWORD    op){ if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0   ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  return ( ULINT )__bcd_to_uint(op);}static inline  ULINT  BCD_TO_ULINT__ULINT__LWORD   (BOOL EN, BOOL *ENO ,    LWORD    op){ return    LWORD_BCD_TO_ULINT (EN, ENO , op);}    



   
   
 
   
   

 
























# 961 "iec_std_lib.h"

 
 
 

   
   
   

# 981 "iec_std_lib.h"


# 992 "iec_std_lib.h"

 static inline  REAL  ABS_REAL (BOOL EN, BOOL *ENO ,  REAL  op){ if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0   ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  if (op < 0) return -op; return op;} static inline  REAL  ABS__REAL__REAL (BOOL EN, BOOL *ENO ,  REAL  op) { return ABS_REAL (EN, ENO , op);}   static inline  LREAL  ABS_LREAL (BOOL EN, BOOL *ENO ,  LREAL  op){ if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0   ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  if (op < 0) return -op; return op;} static inline  LREAL  ABS__LREAL__LREAL (BOOL EN, BOOL *ENO ,  LREAL  op) { return ABS_LREAL (EN, ENO , op);}  
 static inline  SINT  ABS_SINT (BOOL EN, BOOL *ENO ,  SINT  op){ if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0   ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  if (op < 0) return -op; return op;} static inline  SINT  ABS__SINT__SINT (BOOL EN, BOOL *ENO ,  SINT  op) { return ABS_SINT (EN, ENO , op);}   static inline  INT  ABS_INT (BOOL EN, BOOL *ENO ,  INT  op){ if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0   ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  if (op < 0) return -op; return op;} static inline  INT  ABS__INT__INT (BOOL EN, BOOL *ENO ,  INT  op) { return ABS_INT (EN, ENO , op);}   static inline  DINT  ABS_DINT (BOOL EN, BOOL *ENO ,  DINT  op){ if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0   ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  if (op < 0) return -op; return op;} static inline  DINT  ABS__DINT__DINT (BOOL EN, BOOL *ENO ,  DINT  op) { return ABS_DINT (EN, ENO , op);}   static inline  LINT  ABS_LINT (BOOL EN, BOOL *ENO ,  LINT  op){ if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0   ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  if (op < 0) return -op; return op;} static inline  LINT  ABS__LINT__LINT (BOOL EN, BOOL *ENO ,  LINT  op) { return ABS_LINT (EN, ENO , op);}  
 static inline  USINT  ABS_USINT (BOOL EN, BOOL *ENO ,  USINT  op){ if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0   ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  return op;} static inline  USINT  ABS__USINT__USINT (BOOL EN, BOOL *ENO ,  USINT  op) { return ABS_USINT (EN, ENO , op);}   static inline  UINT  ABS_UINT (BOOL EN, BOOL *ENO ,  UINT  op){ if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0   ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  return op;} static inline  UINT  ABS__UINT__UINT (BOOL EN, BOOL *ENO ,  UINT  op) { return ABS_UINT (EN, ENO , op);}   static inline  UDINT  ABS_UDINT (BOOL EN, BOOL *ENO ,  UDINT  op){ if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0   ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  return op;} static inline  UDINT  ABS__UDINT__UDINT (BOOL EN, BOOL *ENO ,  UDINT  op) { return ABS_UDINT (EN, ENO , op);}   static inline  ULINT  ABS_ULINT (BOOL EN, BOOL *ENO ,  ULINT  op){ if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0   ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  return op;} static inline  ULINT  ABS__ULINT__ULINT (BOOL EN, BOOL *ENO ,  ULINT  op) { return ABS_ULINT (EN, ENO , op);}  


   
   
   

 static inline    REAL    SQRT_REAL  (BOOL EN, BOOL *ENO ,    REAL   op){ if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0    ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  return   sqrt (op);} static inline    REAL    SQRT__REAL__REAL  (BOOL EN, BOOL *ENO ,    REAL   op) { return  SQRT_REAL  (EN, ENO , op);}    static inline    LREAL    SQRT_LREAL  (BOOL EN, BOOL *ENO ,    LREAL   op){ if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0    ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  return   sqrt (op);} static inline    LREAL    SQRT__LREAL__LREAL  (BOOL EN, BOOL *ENO ,    LREAL   op) { return  SQRT_LREAL  (EN, ENO , op);}   


 
   
   

 static inline    REAL    LN_REAL  (BOOL EN, BOOL *ENO ,    REAL   op){ if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0    ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  return   log (op);} static inline    REAL    LN__REAL__REAL  (BOOL EN, BOOL *ENO ,    REAL   op) { return  LN_REAL  (EN, ENO , op);}    static inline    LREAL    LN_LREAL  (BOOL EN, BOOL *ENO ,    LREAL   op){ if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0    ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  return   log (op);} static inline    LREAL    LN__LREAL__LREAL  (BOOL EN, BOOL *ENO ,    LREAL   op) { return  LN_LREAL  (EN, ENO , op);}   


   
   
   

 static inline    REAL    LOG_REAL  (BOOL EN, BOOL *ENO ,    REAL   op){ if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0    ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  return   log10 (op);} static inline    REAL    LOG__REAL__REAL  (BOOL EN, BOOL *ENO ,    REAL   op) { return  LOG_REAL  (EN, ENO , op);}    static inline    LREAL    LOG_LREAL  (BOOL EN, BOOL *ENO ,    LREAL   op){ if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0    ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  return   log10 (op);} static inline    LREAL    LOG__LREAL__LREAL  (BOOL EN, BOOL *ENO ,    LREAL   op) { return  LOG_LREAL  (EN, ENO , op);}   


   
   
   

 static inline    REAL    EXP_REAL  (BOOL EN, BOOL *ENO ,    REAL   op){ if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0    ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  return   exp (op);} static inline    REAL    EXP__REAL__REAL  (BOOL EN, BOOL *ENO ,    REAL   op) { return  EXP_REAL  (EN, ENO , op);}    static inline    LREAL    EXP_LREAL  (BOOL EN, BOOL *ENO ,    LREAL   op){ if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0    ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  return   exp (op);} static inline    LREAL    EXP__LREAL__LREAL  (BOOL EN, BOOL *ENO ,    LREAL   op) { return  EXP_LREAL  (EN, ENO , op);}   


   
   
   

 static inline    REAL    SIN_REAL  (BOOL EN, BOOL *ENO ,    REAL   op){ if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0    ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  return   sin (op);} static inline    REAL    SIN__REAL__REAL  (BOOL EN, BOOL *ENO ,    REAL   op) { return  SIN_REAL  (EN, ENO , op);}    static inline    LREAL    SIN_LREAL  (BOOL EN, BOOL *ENO ,    LREAL   op){ if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0    ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  return   sin (op);} static inline    LREAL    SIN__LREAL__LREAL  (BOOL EN, BOOL *ENO ,    LREAL   op) { return  SIN_LREAL  (EN, ENO , op);}   


   
   
   

 static inline    REAL    COS_REAL  (BOOL EN, BOOL *ENO ,    REAL   op){ if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0    ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  return   cos (op);} static inline    REAL    COS__REAL__REAL  (BOOL EN, BOOL *ENO ,    REAL   op) { return  COS_REAL  (EN, ENO , op);}    static inline    LREAL    COS_LREAL  (BOOL EN, BOOL *ENO ,    LREAL   op){ if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0    ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  return   cos (op);} static inline    LREAL    COS__LREAL__LREAL  (BOOL EN, BOOL *ENO ,    LREAL   op) { return  COS_LREAL  (EN, ENO , op);}   

   
   
   

 static inline    REAL    TAN_REAL  (BOOL EN, BOOL *ENO ,    REAL   op){ if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0    ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  return   tan (op);} static inline    REAL    TAN__REAL__REAL  (BOOL EN, BOOL *ENO ,    REAL   op) { return  TAN_REAL  (EN, ENO , op);}    static inline    LREAL    TAN_LREAL  (BOOL EN, BOOL *ENO ,    LREAL   op){ if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0    ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  return   tan (op);} static inline    LREAL    TAN__LREAL__LREAL  (BOOL EN, BOOL *ENO ,    LREAL   op) { return  TAN_LREAL  (EN, ENO , op);}   


   
   
   

 static inline    REAL    ASIN_REAL  (BOOL EN, BOOL *ENO ,    REAL   op){ if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0    ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  return   asin (op);} static inline    REAL    ASIN__REAL__REAL  (BOOL EN, BOOL *ENO ,    REAL   op) { return  ASIN_REAL  (EN, ENO , op);}    static inline    LREAL    ASIN_LREAL  (BOOL EN, BOOL *ENO ,    LREAL   op){ if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0    ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  return   asin (op);} static inline    LREAL    ASIN__LREAL__LREAL  (BOOL EN, BOOL *ENO ,    LREAL   op) { return  ASIN_LREAL  (EN, ENO , op);}   

   
   
   

 static inline    REAL    ACOS_REAL  (BOOL EN, BOOL *ENO ,    REAL   op){ if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0    ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  return   acos (op);} static inline    REAL    ACOS__REAL__REAL  (BOOL EN, BOOL *ENO ,    REAL   op) { return  ACOS_REAL  (EN, ENO , op);}    static inline    LREAL    ACOS_LREAL  (BOOL EN, BOOL *ENO ,    LREAL   op){ if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0    ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  return   acos (op);} static inline    LREAL    ACOS__LREAL__LREAL  (BOOL EN, BOOL *ENO ,    LREAL   op) { return  ACOS_LREAL  (EN, ENO , op);}   

   
   
   

 static inline    REAL    ATAN_REAL  (BOOL EN, BOOL *ENO ,    REAL   op){ if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0    ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  return   atan (op);} static inline    REAL    ATAN__REAL__REAL  (BOOL EN, BOOL *ENO ,    REAL   op) { return  ATAN_REAL  (EN, ENO , op);}    static inline    LREAL    ATAN_LREAL  (BOOL EN, BOOL *ENO ,    LREAL   op){ if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0    ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  return   atan (op);} static inline    LREAL    ATAN__LREAL__LREAL  (BOOL EN, BOOL *ENO ,    LREAL   op) { return  ATAN_LREAL  (EN, ENO , op);}   



 
 
 


# 1085 "iec_std_lib.h"


# 1096 "iec_std_lib.h"

   
   
   



  static inline    REAL    ADD_REAL  (BOOL EN, BOOL *ENO , UINT param_count,    REAL   op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0    ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  ( ap  = ((__gnuc_va_list) __builtin_next_arg (  op1 ))) ; for (i = 0; i < param_count - 1; i++){ op1 = op1   +  ( ap  = (__gnuc_va_list) ((char *) ( ap ) + (((sizeof (   LREAL     ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ),	*((  LREAL     *) (void *) ((char *) ( ap ) - (((sizeof (   LREAL     ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ))) ; } ((void)0) ; return op1;}  static inline    REAL    ADD__REAL__REAL  (BOOL EN, BOOL *ENO , UINT param_count,    REAL   op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0    ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  ( ap  = ((__gnuc_va_list) __builtin_next_arg (  op1 ))) ; for (i = 0; i < param_count - 1; i++){ op1 = op1   +  ( ap  = (__gnuc_va_list) ((char *) ( ap ) + (((sizeof (   LREAL     ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ),	*((  LREAL     *) (void *) ((char *) ( ap ) - (((sizeof (   LREAL     ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ))) ; } ((void)0) ; return op1;}     static inline    LREAL    ADD_LREAL  (BOOL EN, BOOL *ENO , UINT param_count,    LREAL   op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0    ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  ( ap  = ((__gnuc_va_list) __builtin_next_arg (  op1 ))) ; for (i = 0; i < param_count - 1; i++){ op1 = op1   +  ( ap  = (__gnuc_va_list) ((char *) ( ap ) + (((sizeof (   LREAL     ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ),	*((  LREAL     *) (void *) ((char *) ( ap ) - (((sizeof (   LREAL     ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ))) ; } ((void)0) ; return op1;}  static inline    LREAL    ADD__LREAL__LREAL  (BOOL EN, BOOL *ENO , UINT param_count,    LREAL   op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0    ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  ( ap  = ((__gnuc_va_list) __builtin_next_arg (  op1 ))) ; for (i = 0; i < param_count - 1; i++){ op1 = op1   +  ( ap  = (__gnuc_va_list) ((char *) ( ap ) + (((sizeof (   LREAL     ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ),	*((  LREAL     *) (void *) ((char *) ( ap ) - (((sizeof (   LREAL     ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ))) ; } ((void)0) ; return op1;}       static inline    SINT    ADD_SINT  (BOOL EN, BOOL *ENO , UINT param_count,    SINT   op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0    ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  ( ap  = ((__gnuc_va_list) __builtin_next_arg (  op1 ))) ; for (i = 0; i < param_count - 1; i++){ op1 = op1   +  ( ap  = (__gnuc_va_list) ((char *) ( ap ) + (((sizeof (   DINT     ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ),	*((  DINT     *) (void *) ((char *) ( ap ) - (((sizeof (   DINT     ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ))) ; } ((void)0) ; return op1;}  static inline    SINT    ADD__SINT__SINT  (BOOL EN, BOOL *ENO , UINT param_count,    SINT   op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0    ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  ( ap  = ((__gnuc_va_list) __builtin_next_arg (  op1 ))) ; for (i = 0; i < param_count - 1; i++){ op1 = op1   +  ( ap  = (__gnuc_va_list) ((char *) ( ap ) + (((sizeof (   DINT     ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ),	*((  DINT     *) (void *) ((char *) ( ap ) - (((sizeof (   DINT     ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ))) ; } ((void)0) ; return op1;}      static inline    INT    ADD_INT  (BOOL EN, BOOL *ENO , UINT param_count,    INT   op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0    ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  ( ap  = ((__gnuc_va_list) __builtin_next_arg (  op1 ))) ; for (i = 0; i < param_count - 1; i++){ op1 = op1   +  ( ap  = (__gnuc_va_list) ((char *) ( ap ) + (((sizeof (   DINT     ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ),	*((  DINT     *) (void *) ((char *) ( ap ) - (((sizeof (   DINT     ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ))) ; } ((void)0) ; return op1;}  static inline    INT    ADD__INT__INT  (BOOL EN, BOOL *ENO , UINT param_count,    INT   op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0    ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  ( ap  = ((__gnuc_va_list) __builtin_next_arg (  op1 ))) ; for (i = 0; i < param_count - 1; i++){ op1 = op1   +  ( ap  = (__gnuc_va_list) ((char *) ( ap ) + (((sizeof (   DINT     ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ),	*((  DINT     *) (void *) ((char *) ( ap ) - (((sizeof (   DINT     ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ))) ; } ((void)0) ; return op1;}      static inline    DINT    ADD_DINT  (BOOL EN, BOOL *ENO , UINT param_count,    DINT   op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0    ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  ( ap  = ((__gnuc_va_list) __builtin_next_arg (  op1 ))) ; for (i = 0; i < param_count - 1; i++){ op1 = op1   +  ( ap  = (__gnuc_va_list) ((char *) ( ap ) + (((sizeof (   DINT     ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ),	*((  DINT     *) (void *) ((char *) ( ap ) - (((sizeof (   DINT     ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ))) ; } ((void)0) ; return op1;}  static inline    DINT    ADD__DINT__DINT  (BOOL EN, BOOL *ENO , UINT param_count,    DINT   op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0    ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  ( ap  = ((__gnuc_va_list) __builtin_next_arg (  op1 ))) ; for (i = 0; i < param_count - 1; i++){ op1 = op1   +  ( ap  = (__gnuc_va_list) ((char *) ( ap ) + (((sizeof (   DINT     ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ),	*((  DINT     *) (void *) ((char *) ( ap ) - (((sizeof (   DINT     ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ))) ; } ((void)0) ; return op1;}      static inline    LINT    ADD_LINT  (BOOL EN, BOOL *ENO , UINT param_count,    LINT   op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0    ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  ( ap  = ((__gnuc_va_list) __builtin_next_arg (  op1 ))) ; for (i = 0; i < param_count - 1; i++){ op1 = op1   +  ( ap  = (__gnuc_va_list) ((char *) ( ap ) + (((sizeof (   LINT     ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ),	*((  LINT     *) (void *) ((char *) ( ap ) - (((sizeof (   LINT     ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ))) ; } ((void)0) ; return op1;}  static inline    LINT    ADD__LINT__LINT  (BOOL EN, BOOL *ENO , UINT param_count,    LINT   op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0    ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  ( ap  = ((__gnuc_va_list) __builtin_next_arg (  op1 ))) ; for (i = 0; i < param_count - 1; i++){ op1 = op1   +  ( ap  = (__gnuc_va_list) ((char *) ( ap ) + (((sizeof (   LINT     ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ),	*((  LINT     *) (void *) ((char *) ( ap ) - (((sizeof (   LINT     ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ))) ; } ((void)0) ; return op1;}       static inline    USINT    ADD_USINT  (BOOL EN, BOOL *ENO , UINT param_count,    USINT   op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0    ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  ( ap  = ((__gnuc_va_list) __builtin_next_arg (  op1 ))) ; for (i = 0; i < param_count - 1; i++){ op1 = op1   +  ( ap  = (__gnuc_va_list) ((char *) ( ap ) + (((sizeof (   UDINT     ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ),	*((  UDINT     *) (void *) ((char *) ( ap ) - (((sizeof (   UDINT     ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ))) ; } ((void)0) ; return op1;}  static inline    USINT    ADD__USINT__USINT  (BOOL EN, BOOL *ENO , UINT param_count,    USINT   op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0    ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  ( ap  = ((__gnuc_va_list) __builtin_next_arg (  op1 ))) ; for (i = 0; i < param_count - 1; i++){ op1 = op1   +  ( ap  = (__gnuc_va_list) ((char *) ( ap ) + (((sizeof (   UDINT     ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ),	*((  UDINT     *) (void *) ((char *) ( ap ) - (((sizeof (   UDINT     ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ))) ; } ((void)0) ; return op1;}      static inline    UINT    ADD_UINT  (BOOL EN, BOOL *ENO , UINT param_count,    UINT   op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0    ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  ( ap  = ((__gnuc_va_list) __builtin_next_arg (  op1 ))) ; for (i = 0; i < param_count - 1; i++){ op1 = op1   +  ( ap  = (__gnuc_va_list) ((char *) ( ap ) + (((sizeof (   UDINT     ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ),	*((  UDINT     *) (void *) ((char *) ( ap ) - (((sizeof (   UDINT     ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ))) ; } ((void)0) ; return op1;}  static inline    UINT    ADD__UINT__UINT  (BOOL EN, BOOL *ENO , UINT param_count,    UINT   op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0    ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  ( ap  = ((__gnuc_va_list) __builtin_next_arg (  op1 ))) ; for (i = 0; i < param_count - 1; i++){ op1 = op1   +  ( ap  = (__gnuc_va_list) ((char *) ( ap ) + (((sizeof (   UDINT     ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ),	*((  UDINT     *) (void *) ((char *) ( ap ) - (((sizeof (   UDINT     ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ))) ; } ((void)0) ; return op1;}      static inline    UDINT    ADD_UDINT  (BOOL EN, BOOL *ENO , UINT param_count,    UDINT   op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0    ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  ( ap  = ((__gnuc_va_list) __builtin_next_arg (  op1 ))) ; for (i = 0; i < param_count - 1; i++){ op1 = op1   +  ( ap  = (__gnuc_va_list) ((char *) ( ap ) + (((sizeof (   UDINT     ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ),	*((  UDINT     *) (void *) ((char *) ( ap ) - (((sizeof (   UDINT     ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ))) ; } ((void)0) ; return op1;}  static inline    UDINT    ADD__UDINT__UDINT  (BOOL EN, BOOL *ENO , UINT param_count,    UDINT   op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0    ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  ( ap  = ((__gnuc_va_list) __builtin_next_arg (  op1 ))) ; for (i = 0; i < param_count - 1; i++){ op1 = op1   +  ( ap  = (__gnuc_va_list) ((char *) ( ap ) + (((sizeof (   UDINT     ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ),	*((  UDINT     *) (void *) ((char *) ( ap ) - (((sizeof (   UDINT     ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ))) ; } ((void)0) ; return op1;}      static inline    ULINT    ADD_ULINT  (BOOL EN, BOOL *ENO , UINT param_count,    ULINT   op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0    ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  ( ap  = ((__gnuc_va_list) __builtin_next_arg (  op1 ))) ; for (i = 0; i < param_count - 1; i++){ op1 = op1   +  ( ap  = (__gnuc_va_list) ((char *) ( ap ) + (((sizeof (   ULINT     ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ),	*((  ULINT     *) (void *) ((char *) ( ap ) - (((sizeof (   ULINT     ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ))) ; } ((void)0) ; return op1;}  static inline    ULINT    ADD__ULINT__ULINT  (BOOL EN, BOOL *ENO , UINT param_count,    ULINT   op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0    ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  ( ap  = ((__gnuc_va_list) __builtin_next_arg (  op1 ))) ; for (i = 0; i < param_count - 1; i++){ op1 = op1   +  ( ap  = (__gnuc_va_list) ((char *) ( ap ) + (((sizeof (   ULINT     ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ),	*((  ULINT     *) (void *) ((char *) ( ap ) - (((sizeof (   ULINT     ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ))) ; } ((void)0) ; return op1;}     


   
   
   



  static inline    REAL    MUL_REAL  (BOOL EN, BOOL *ENO , UINT param_count,    REAL   op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0    ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  ( ap  = ((__gnuc_va_list) __builtin_next_arg (  op1 ))) ; for (i = 0; i < param_count - 1; i++){ op1 = op1   *  ( ap  = (__gnuc_va_list) ((char *) ( ap ) + (((sizeof (   LREAL     ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ),	*((  LREAL     *) (void *) ((char *) ( ap ) - (((sizeof (   LREAL     ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ))) ; } ((void)0) ; return op1;}  static inline    REAL    MUL__REAL__REAL  (BOOL EN, BOOL *ENO , UINT param_count,    REAL   op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0    ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  ( ap  = ((__gnuc_va_list) __builtin_next_arg (  op1 ))) ; for (i = 0; i < param_count - 1; i++){ op1 = op1   *  ( ap  = (__gnuc_va_list) ((char *) ( ap ) + (((sizeof (   LREAL     ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ),	*((  LREAL     *) (void *) ((char *) ( ap ) - (((sizeof (   LREAL     ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ))) ; } ((void)0) ; return op1;}     static inline    LREAL    MUL_LREAL  (BOOL EN, BOOL *ENO , UINT param_count,    LREAL   op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0    ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  ( ap  = ((__gnuc_va_list) __builtin_next_arg (  op1 ))) ; for (i = 0; i < param_count - 1; i++){ op1 = op1   *  ( ap  = (__gnuc_va_list) ((char *) ( ap ) + (((sizeof (   LREAL     ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ),	*((  LREAL     *) (void *) ((char *) ( ap ) - (((sizeof (   LREAL     ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ))) ; } ((void)0) ; return op1;}  static inline    LREAL    MUL__LREAL__LREAL  (BOOL EN, BOOL *ENO , UINT param_count,    LREAL   op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0    ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  ( ap  = ((__gnuc_va_list) __builtin_next_arg (  op1 ))) ; for (i = 0; i < param_count - 1; i++){ op1 = op1   *  ( ap  = (__gnuc_va_list) ((char *) ( ap ) + (((sizeof (   LREAL     ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ),	*((  LREAL     *) (void *) ((char *) ( ap ) - (((sizeof (   LREAL     ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ))) ; } ((void)0) ; return op1;}       static inline    SINT    MUL_SINT  (BOOL EN, BOOL *ENO , UINT param_count,    SINT   op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0    ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  ( ap  = ((__gnuc_va_list) __builtin_next_arg (  op1 ))) ; for (i = 0; i < param_count - 1; i++){ op1 = op1   *  ( ap  = (__gnuc_va_list) ((char *) ( ap ) + (((sizeof (   DINT     ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ),	*((  DINT     *) (void *) ((char *) ( ap ) - (((sizeof (   DINT     ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ))) ; } ((void)0) ; return op1;}  static inline    SINT    MUL__SINT__SINT  (BOOL EN, BOOL *ENO , UINT param_count,    SINT   op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0    ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  ( ap  = ((__gnuc_va_list) __builtin_next_arg (  op1 ))) ; for (i = 0; i < param_count - 1; i++){ op1 = op1   *  ( ap  = (__gnuc_va_list) ((char *) ( ap ) + (((sizeof (   DINT     ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ),	*((  DINT     *) (void *) ((char *) ( ap ) - (((sizeof (   DINT     ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ))) ; } ((void)0) ; return op1;}      static inline    INT    MUL_INT  (BOOL EN, BOOL *ENO , UINT param_count,    INT   op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0    ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  ( ap  = ((__gnuc_va_list) __builtin_next_arg (  op1 ))) ; for (i = 0; i < param_count - 1; i++){ op1 = op1   *  ( ap  = (__gnuc_va_list) ((char *) ( ap ) + (((sizeof (   DINT     ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ),	*((  DINT     *) (void *) ((char *) ( ap ) - (((sizeof (   DINT     ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ))) ; } ((void)0) ; return op1;}  static inline    INT    MUL__INT__INT  (BOOL EN, BOOL *ENO , UINT param_count,    INT   op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0    ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  ( ap  = ((__gnuc_va_list) __builtin_next_arg (  op1 ))) ; for (i = 0; i < param_count - 1; i++){ op1 = op1   *  ( ap  = (__gnuc_va_list) ((char *) ( ap ) + (((sizeof (   DINT     ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ),	*((  DINT     *) (void *) ((char *) ( ap ) - (((sizeof (   DINT     ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ))) ; } ((void)0) ; return op1;}      static inline    DINT    MUL_DINT  (BOOL EN, BOOL *ENO , UINT param_count,    DINT   op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0    ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  ( ap  = ((__gnuc_va_list) __builtin_next_arg (  op1 ))) ; for (i = 0; i < param_count - 1; i++){ op1 = op1   *  ( ap  = (__gnuc_va_list) ((char *) ( ap ) + (((sizeof (   DINT     ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ),	*((  DINT     *) (void *) ((char *) ( ap ) - (((sizeof (   DINT     ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ))) ; } ((void)0) ; return op1;}  static inline    DINT    MUL__DINT__DINT  (BOOL EN, BOOL *ENO , UINT param_count,    DINT   op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0    ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  ( ap  = ((__gnuc_va_list) __builtin_next_arg (  op1 ))) ; for (i = 0; i < param_count - 1; i++){ op1 = op1   *  ( ap  = (__gnuc_va_list) ((char *) ( ap ) + (((sizeof (   DINT     ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ),	*((  DINT     *) (void *) ((char *) ( ap ) - (((sizeof (   DINT     ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ))) ; } ((void)0) ; return op1;}      static inline    LINT    MUL_LINT  (BOOL EN, BOOL *ENO , UINT param_count,    LINT   op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0    ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  ( ap  = ((__gnuc_va_list) __builtin_next_arg (  op1 ))) ; for (i = 0; i < param_count - 1; i++){ op1 = op1   *  ( ap  = (__gnuc_va_list) ((char *) ( ap ) + (((sizeof (   LINT     ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ),	*((  LINT     *) (void *) ((char *) ( ap ) - (((sizeof (   LINT     ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ))) ; } ((void)0) ; return op1;}  static inline    LINT    MUL__LINT__LINT  (BOOL EN, BOOL *ENO , UINT param_count,    LINT   op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0    ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  ( ap  = ((__gnuc_va_list) __builtin_next_arg (  op1 ))) ; for (i = 0; i < param_count - 1; i++){ op1 = op1   *  ( ap  = (__gnuc_va_list) ((char *) ( ap ) + (((sizeof (   LINT     ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ),	*((  LINT     *) (void *) ((char *) ( ap ) - (((sizeof (   LINT     ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ))) ; } ((void)0) ; return op1;}       static inline    USINT    MUL_USINT  (BOOL EN, BOOL *ENO , UINT param_count,    USINT   op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0    ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  ( ap  = ((__gnuc_va_list) __builtin_next_arg (  op1 ))) ; for (i = 0; i < param_count - 1; i++){ op1 = op1   *  ( ap  = (__gnuc_va_list) ((char *) ( ap ) + (((sizeof (   UDINT     ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ),	*((  UDINT     *) (void *) ((char *) ( ap ) - (((sizeof (   UDINT     ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ))) ; } ((void)0) ; return op1;}  static inline    USINT    MUL__USINT__USINT  (BOOL EN, BOOL *ENO , UINT param_count,    USINT   op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0    ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  ( ap  = ((__gnuc_va_list) __builtin_next_arg (  op1 ))) ; for (i = 0; i < param_count - 1; i++){ op1 = op1   *  ( ap  = (__gnuc_va_list) ((char *) ( ap ) + (((sizeof (   UDINT     ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ),	*((  UDINT     *) (void *) ((char *) ( ap ) - (((sizeof (   UDINT     ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ))) ; } ((void)0) ; return op1;}      static inline    UINT    MUL_UINT  (BOOL EN, BOOL *ENO , UINT param_count,    UINT   op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0    ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  ( ap  = ((__gnuc_va_list) __builtin_next_arg (  op1 ))) ; for (i = 0; i < param_count - 1; i++){ op1 = op1   *  ( ap  = (__gnuc_va_list) ((char *) ( ap ) + (((sizeof (   UDINT     ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ),	*((  UDINT     *) (void *) ((char *) ( ap ) - (((sizeof (   UDINT     ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ))) ; } ((void)0) ; return op1;}  static inline    UINT    MUL__UINT__UINT  (BOOL EN, BOOL *ENO , UINT param_count,    UINT   op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0    ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  ( ap  = ((__gnuc_va_list) __builtin_next_arg (  op1 ))) ; for (i = 0; i < param_count - 1; i++){ op1 = op1   *  ( ap  = (__gnuc_va_list) ((char *) ( ap ) + (((sizeof (   UDINT     ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ),	*((  UDINT     *) (void *) ((char *) ( ap ) - (((sizeof (   UDINT     ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ))) ; } ((void)0) ; return op1;}      static inline    UDINT    MUL_UDINT  (BOOL EN, BOOL *ENO , UINT param_count,    UDINT   op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0    ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  ( ap  = ((__gnuc_va_list) __builtin_next_arg (  op1 ))) ; for (i = 0; i < param_count - 1; i++){ op1 = op1   *  ( ap  = (__gnuc_va_list) ((char *) ( ap ) + (((sizeof (   UDINT     ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ),	*((  UDINT     *) (void *) ((char *) ( ap ) - (((sizeof (   UDINT     ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ))) ; } ((void)0) ; return op1;}  static inline    UDINT    MUL__UDINT__UDINT  (BOOL EN, BOOL *ENO , UINT param_count,    UDINT   op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0    ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  ( ap  = ((__gnuc_va_list) __builtin_next_arg (  op1 ))) ; for (i = 0; i < param_count - 1; i++){ op1 = op1   *  ( ap  = (__gnuc_va_list) ((char *) ( ap ) + (((sizeof (   UDINT     ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ),	*((  UDINT     *) (void *) ((char *) ( ap ) - (((sizeof (   UDINT     ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ))) ; } ((void)0) ; return op1;}      static inline    ULINT    MUL_ULINT  (BOOL EN, BOOL *ENO , UINT param_count,    ULINT   op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0    ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  ( ap  = ((__gnuc_va_list) __builtin_next_arg (  op1 ))) ; for (i = 0; i < param_count - 1; i++){ op1 = op1   *  ( ap  = (__gnuc_va_list) ((char *) ( ap ) + (((sizeof (   ULINT     ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ),	*((  ULINT     *) (void *) ((char *) ( ap ) - (((sizeof (   ULINT     ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ))) ; } ((void)0) ; return op1;}  static inline    ULINT    MUL__ULINT__ULINT  (BOOL EN, BOOL *ENO , UINT param_count,    ULINT   op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0    ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  ( ap  = ((__gnuc_va_list) __builtin_next_arg (  op1 ))) ; for (i = 0; i < param_count - 1; i++){ op1 = op1   *  ( ap  = (__gnuc_va_list) ((char *) ( ap ) + (((sizeof (   ULINT     ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ),	*((  ULINT     *) (void *) ((char *) ( ap ) - (((sizeof (   ULINT     ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ))) ; } ((void)0) ; return op1;}     


   
   
   

  static inline    REAL    SUB_REAL  (BOOL EN, BOOL *ENO ,    REAL   op1,    REAL   op2){ if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0    ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  return op1   -  op2;} static inline    REAL    SUB__REAL__REAL__REAL  (BOOL EN, BOOL *ENO ,    REAL   op1,    REAL   op2){ return  SUB_REAL  (EN, ENO , op1, op2);}     static inline    LREAL    SUB_LREAL  (BOOL EN, BOOL *ENO ,    LREAL   op1,    LREAL   op2){ if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0    ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  return op1   -  op2;} static inline    LREAL    SUB__LREAL__LREAL__LREAL  (BOOL EN, BOOL *ENO ,    LREAL   op1,    LREAL   op2){ return  SUB_LREAL  (EN, ENO , op1, op2);}       static inline    SINT    SUB_SINT  (BOOL EN, BOOL *ENO ,    SINT   op1,    SINT   op2){ if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0    ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  return op1   -  op2;} static inline    SINT    SUB__SINT__SINT__SINT  (BOOL EN, BOOL *ENO ,    SINT   op1,    SINT   op2){ return  SUB_SINT  (EN, ENO , op1, op2);}      static inline    INT    SUB_INT  (BOOL EN, BOOL *ENO ,    INT   op1,    INT   op2){ if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0    ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  return op1   -  op2;} static inline    INT    SUB__INT__INT__INT  (BOOL EN, BOOL *ENO ,    INT   op1,    INT   op2){ return  SUB_INT  (EN, ENO , op1, op2);}      static inline    DINT    SUB_DINT  (BOOL EN, BOOL *ENO ,    DINT   op1,    DINT   op2){ if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0    ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  return op1   -  op2;} static inline    DINT    SUB__DINT__DINT__DINT  (BOOL EN, BOOL *ENO ,    DINT   op1,    DINT   op2){ return  SUB_DINT  (EN, ENO , op1, op2);}      static inline    LINT    SUB_LINT  (BOOL EN, BOOL *ENO ,    LINT   op1,    LINT   op2){ if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0    ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  return op1   -  op2;} static inline    LINT    SUB__LINT__LINT__LINT  (BOOL EN, BOOL *ENO ,    LINT   op1,    LINT   op2){ return  SUB_LINT  (EN, ENO , op1, op2);}       static inline    USINT    SUB_USINT  (BOOL EN, BOOL *ENO ,    USINT   op1,    USINT   op2){ if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0    ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  return op1   -  op2;} static inline    USINT    SUB__USINT__USINT__USINT  (BOOL EN, BOOL *ENO ,    USINT   op1,    USINT   op2){ return  SUB_USINT  (EN, ENO , op1, op2);}      static inline    UINT    SUB_UINT  (BOOL EN, BOOL *ENO ,    UINT   op1,    UINT   op2){ if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0    ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  return op1   -  op2;} static inline    UINT    SUB__UINT__UINT__UINT  (BOOL EN, BOOL *ENO ,    UINT   op1,    UINT   op2){ return  SUB_UINT  (EN, ENO , op1, op2);}      static inline    UDINT    SUB_UDINT  (BOOL EN, BOOL *ENO ,    UDINT   op1,    UDINT   op2){ if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0    ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  return op1   -  op2;} static inline    UDINT    SUB__UDINT__UDINT__UDINT  (BOOL EN, BOOL *ENO ,    UDINT   op1,    UDINT   op2){ return  SUB_UDINT  (EN, ENO , op1, op2);}      static inline    ULINT    SUB_ULINT  (BOOL EN, BOOL *ENO ,    ULINT   op1,    ULINT   op2){ if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0    ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  return op1   -  op2;} static inline    ULINT    SUB__ULINT__ULINT__ULINT  (BOOL EN, BOOL *ENO ,    ULINT   op1,    ULINT   op2){ return  SUB_ULINT  (EN, ENO , op1, op2);}     


   
   
   

# 1135 "iec_std_lib.h"
  static inline  REAL  DIV_REAL (BOOL EN, BOOL *ENO ,  REAL  op1,  REAL  op2){ if (!EN || (  op2 == 0 )) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0   ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  return op1 / op2;} static inline  REAL  DIV__REAL__REAL__REAL (BOOL EN, BOOL *ENO ,  REAL  op1,  REAL  op2){ return DIV_REAL (EN, ENO , op1, op2);}    static inline  LREAL  DIV_LREAL (BOOL EN, BOOL *ENO ,  LREAL  op1,  LREAL  op2){ if (!EN || (  op2 == 0 )) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0   ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  return op1 / op2;} static inline  LREAL  DIV__LREAL__LREAL__LREAL (BOOL EN, BOOL *ENO ,  LREAL  op1,  LREAL  op2){ return DIV_LREAL (EN, ENO , op1, op2);}      static inline  SINT  DIV_SINT (BOOL EN, BOOL *ENO ,  SINT  op1,  SINT  op2){ if (!EN || (  op2 == 0 )) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0   ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  return op1 / op2;} static inline  SINT  DIV__SINT__SINT__SINT (BOOL EN, BOOL *ENO ,  SINT  op1,  SINT  op2){ return DIV_SINT (EN, ENO , op1, op2);}     static inline  INT  DIV_INT (BOOL EN, BOOL *ENO ,  INT  op1,  INT  op2){ if (!EN || (  op2 == 0 )) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0   ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  return op1 / op2;} static inline  INT  DIV__INT__INT__INT (BOOL EN, BOOL *ENO ,  INT  op1,  INT  op2){ return DIV_INT (EN, ENO , op1, op2);}     static inline  DINT  DIV_DINT (BOOL EN, BOOL *ENO ,  DINT  op1,  DINT  op2){ if (!EN || (  op2 == 0 )) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0   ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  return op1 / op2;} static inline  DINT  DIV__DINT__DINT__DINT (BOOL EN, BOOL *ENO ,  DINT  op1,  DINT  op2){ return DIV_DINT (EN, ENO , op1, op2);}     static inline  LINT  DIV_LINT (BOOL EN, BOOL *ENO ,  LINT  op1,  LINT  op2){ if (!EN || (  op2 == 0 )) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0   ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  return op1 / op2;} static inline  LINT  DIV__LINT__LINT__LINT (BOOL EN, BOOL *ENO ,  LINT  op1,  LINT  op2){ return DIV_LINT (EN, ENO , op1, op2);}      static inline  USINT  DIV_USINT (BOOL EN, BOOL *ENO ,  USINT  op1,  USINT  op2){ if (!EN || (  op2 == 0 )) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0   ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  return op1 / op2;} static inline  USINT  DIV__USINT__USINT__USINT (BOOL EN, BOOL *ENO ,  USINT  op1,  USINT  op2){ return DIV_USINT (EN, ENO , op1, op2);}     static inline  UINT  DIV_UINT (BOOL EN, BOOL *ENO ,  UINT  op1,  UINT  op2){ if (!EN || (  op2 == 0 )) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0   ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  return op1 / op2;} static inline  UINT  DIV__UINT__UINT__UINT (BOOL EN, BOOL *ENO ,  UINT  op1,  UINT  op2){ return DIV_UINT (EN, ENO , op1, op2);}     static inline  UDINT  DIV_UDINT (BOOL EN, BOOL *ENO ,  UDINT  op1,  UDINT  op2){ if (!EN || (  op2 == 0 )) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0   ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  return op1 / op2;} static inline  UDINT  DIV__UDINT__UDINT__UDINT (BOOL EN, BOOL *ENO ,  UDINT  op1,  UDINT  op2){ return DIV_UDINT (EN, ENO , op1, op2);}     static inline  ULINT  DIV_ULINT (BOOL EN, BOOL *ENO ,  ULINT  op1,  ULINT  op2){ if (!EN || (  op2 == 0 )) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0   ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  return op1 / op2;} static inline  ULINT  DIV__ULINT__ULINT__ULINT (BOOL EN, BOOL *ENO ,  ULINT  op1,  ULINT  op2){ return DIV_ULINT (EN, ENO , op1, op2);}    


   
   
   

# 1151 "iec_std_lib.h"
  static inline  SINT  MOD_SINT (BOOL EN, BOOL *ENO ,  SINT  op1,  SINT  op2){ if (!EN || (  op2 == 0 )) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0   ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  return op1 % op2;} static inline  SINT  MOD__SINT__SINT__SINT (BOOL EN, BOOL *ENO ,  SINT  op1,  SINT  op2){ return MOD_SINT (EN, ENO , op1, op2);}    static inline  INT  MOD_INT (BOOL EN, BOOL *ENO ,  INT  op1,  INT  op2){ if (!EN || (  op2 == 0 )) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0   ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  return op1 % op2;} static inline  INT  MOD__INT__INT__INT (BOOL EN, BOOL *ENO ,  INT  op1,  INT  op2){ return MOD_INT (EN, ENO , op1, op2);}    static inline  DINT  MOD_DINT (BOOL EN, BOOL *ENO ,  DINT  op1,  DINT  op2){ if (!EN || (  op2 == 0 )) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0   ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  return op1 % op2;} static inline  DINT  MOD__DINT__DINT__DINT (BOOL EN, BOOL *ENO ,  DINT  op1,  DINT  op2){ return MOD_DINT (EN, ENO , op1, op2);}    static inline  LINT  MOD_LINT (BOOL EN, BOOL *ENO ,  LINT  op1,  LINT  op2){ if (!EN || (  op2 == 0 )) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0   ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  return op1 % op2;} static inline  LINT  MOD__LINT__LINT__LINT (BOOL EN, BOOL *ENO ,  LINT  op1,  LINT  op2){ return MOD_LINT (EN, ENO , op1, op2);}     static inline  USINT  MOD_USINT (BOOL EN, BOOL *ENO ,  USINT  op1,  USINT  op2){ if (!EN || (  op2 == 0 )) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0   ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  return op1 % op2;} static inline  USINT  MOD__USINT__USINT__USINT (BOOL EN, BOOL *ENO ,  USINT  op1,  USINT  op2){ return MOD_USINT (EN, ENO , op1, op2);}    static inline  UINT  MOD_UINT (BOOL EN, BOOL *ENO ,  UINT  op1,  UINT  op2){ if (!EN || (  op2 == 0 )) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0   ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  return op1 % op2;} static inline  UINT  MOD__UINT__UINT__UINT (BOOL EN, BOOL *ENO ,  UINT  op1,  UINT  op2){ return MOD_UINT (EN, ENO , op1, op2);}    static inline  UDINT  MOD_UDINT (BOOL EN, BOOL *ENO ,  UDINT  op1,  UDINT  op2){ if (!EN || (  op2 == 0 )) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0   ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  return op1 % op2;} static inline  UDINT  MOD__UDINT__UDINT__UDINT (BOOL EN, BOOL *ENO ,  UDINT  op1,  UDINT  op2){ return MOD_UDINT (EN, ENO , op1, op2);}    static inline  ULINT  MOD_ULINT (BOOL EN, BOOL *ENO ,  ULINT  op1,  ULINT  op2){ if (!EN || (  op2 == 0 )) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0   ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  return op1 % op2;} static inline  ULINT  MOD__ULINT__ULINT__ULINT (BOOL EN, BOOL *ENO ,  ULINT  op1,  ULINT  op2){ return MOD_ULINT (EN, ENO , op1, op2);}   

   
   
   
 







   static inline  REAL  EXPT__REAL__REAL__REAL    (BOOL EN, BOOL *ENO ,  REAL  IN1,    REAL    IN2){ if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0   ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  return pow(IN1, IN2);}   static inline  LREAL  EXPT__LREAL__LREAL__REAL    (BOOL EN, BOOL *ENO ,  LREAL  IN1,    REAL    IN2){ if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0   ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  return pow(IN1, IN2);}       static inline  REAL  EXPT__REAL__REAL__LREAL    (BOOL EN, BOOL *ENO ,  REAL  IN1,    LREAL    IN2){ if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0   ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  return pow(IN1, IN2);}   static inline  LREAL  EXPT__LREAL__LREAL__LREAL    (BOOL EN, BOOL *ENO ,  LREAL  IN1,    LREAL    IN2){ if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0   ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  return pow(IN1, IN2);}         static inline  REAL  EXPT__REAL__REAL__SINT    (BOOL EN, BOOL *ENO ,  REAL  IN1,    SINT    IN2){ if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0   ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  return pow(IN1, IN2);}   static inline  LREAL  EXPT__LREAL__LREAL__SINT    (BOOL EN, BOOL *ENO ,  LREAL  IN1,    SINT    IN2){ if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0   ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  return pow(IN1, IN2);}        static inline  REAL  EXPT__REAL__REAL__INT    (BOOL EN, BOOL *ENO ,  REAL  IN1,    INT    IN2){ if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0   ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  return pow(IN1, IN2);}   static inline  LREAL  EXPT__LREAL__LREAL__INT    (BOOL EN, BOOL *ENO ,  LREAL  IN1,    INT    IN2){ if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0   ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  return pow(IN1, IN2);}        static inline  REAL  EXPT__REAL__REAL__DINT    (BOOL EN, BOOL *ENO ,  REAL  IN1,    DINT    IN2){ if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0   ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  return pow(IN1, IN2);}   static inline  LREAL  EXPT__LREAL__LREAL__DINT    (BOOL EN, BOOL *ENO ,  LREAL  IN1,    DINT    IN2){ if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0   ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  return pow(IN1, IN2);}        static inline  REAL  EXPT__REAL__REAL__LINT    (BOOL EN, BOOL *ENO ,  REAL  IN1,    LINT    IN2){ if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0   ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  return pow(IN1, IN2);}   static inline  LREAL  EXPT__LREAL__LREAL__LINT    (BOOL EN, BOOL *ENO ,  LREAL  IN1,    LINT    IN2){ if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0   ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  return pow(IN1, IN2);}         static inline  REAL  EXPT__REAL__REAL__USINT    (BOOL EN, BOOL *ENO ,  REAL  IN1,    USINT    IN2){ if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0   ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  return pow(IN1, IN2);}   static inline  LREAL  EXPT__LREAL__LREAL__USINT    (BOOL EN, BOOL *ENO ,  LREAL  IN1,    USINT    IN2){ if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0   ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  return pow(IN1, IN2);}        static inline  REAL  EXPT__REAL__REAL__UINT    (BOOL EN, BOOL *ENO ,  REAL  IN1,    UINT    IN2){ if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0   ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  return pow(IN1, IN2);}   static inline  LREAL  EXPT__LREAL__LREAL__UINT    (BOOL EN, BOOL *ENO ,  LREAL  IN1,    UINT    IN2){ if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0   ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  return pow(IN1, IN2);}        static inline  REAL  EXPT__REAL__REAL__UDINT    (BOOL EN, BOOL *ENO ,  REAL  IN1,    UDINT    IN2){ if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0   ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  return pow(IN1, IN2);}   static inline  LREAL  EXPT__LREAL__LREAL__UDINT    (BOOL EN, BOOL *ENO ,  LREAL  IN1,    UDINT    IN2){ if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0   ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  return pow(IN1, IN2);}        static inline  REAL  EXPT__REAL__REAL__ULINT    (BOOL EN, BOOL *ENO ,  REAL  IN1,    ULINT    IN2){ if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0   ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  return pow(IN1, IN2);}   static inline  LREAL  EXPT__LREAL__LREAL__ULINT    (BOOL EN, BOOL *ENO ,  LREAL  IN1,    ULINT    IN2){ if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0   ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  return pow(IN1, IN2);}      


  

   
   
   
 





       static inline  REAL  MOVE_REAL (BOOL EN, BOOL *ENO ,  REAL  op1){ if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0   ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  return op1;}       static inline  LREAL  MOVE_LREAL (BOOL EN, BOOL *ENO ,  LREAL  op1){ if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0   ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  return op1;}         static inline  SINT  MOVE_SINT (BOOL EN, BOOL *ENO ,  SINT  op1){ if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0   ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  return op1;}        static inline  INT  MOVE_INT (BOOL EN, BOOL *ENO ,  INT  op1){ if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0   ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  return op1;}        static inline  DINT  MOVE_DINT (BOOL EN, BOOL *ENO ,  DINT  op1){ if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0   ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  return op1;}        static inline  LINT  MOVE_LINT (BOOL EN, BOOL *ENO ,  LINT  op1){ if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0   ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  return op1;}         static inline  USINT  MOVE_USINT (BOOL EN, BOOL *ENO ,  USINT  op1){ if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0   ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  return op1;}        static inline  UINT  MOVE_UINT (BOOL EN, BOOL *ENO ,  UINT  op1){ if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0   ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  return op1;}        static inline  UDINT  MOVE_UDINT (BOOL EN, BOOL *ENO ,  UDINT  op1){ if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0   ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  return op1;}        static inline  ULINT  MOVE_ULINT (BOOL EN, BOOL *ENO ,  ULINT  op1){ if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0   ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  return op1;}        static inline  TIME  MOVE_TIME (BOOL EN, BOOL *ENO ,  TIME  op1){ if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return (TIME){0,0}   ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  return op1;}       static inline  BYTE  MOVE_BYTE (BOOL EN, BOOL *ENO ,  BYTE  op1){ if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0   ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  return op1;}      static inline  WORD  MOVE_WORD (BOOL EN, BOOL *ENO ,  WORD  op1){ if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0   ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  return op1;}      static inline  DWORD  MOVE_DWORD (BOOL EN, BOOL *ENO ,  DWORD  op1){ if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0   ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  return op1;}      static inline  LWORD  MOVE_LWORD (BOOL EN, BOOL *ENO ,  LWORD  op1){ if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0   ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  return op1;}      static inline  BOOL  MOVE_BOOL (BOOL EN, BOOL *ENO ,  BOOL  op1){ if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0   ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  return op1;}      static inline  STRING  MOVE_STRING (BOOL EN, BOOL *ENO ,  STRING  op1){ if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return (STRING){0,""}   ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  return op1;}      static inline  DATE  MOVE_DATE (BOOL EN, BOOL *ENO ,  DATE  op1){ if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return (DATE){0,0}   ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  return op1;}     static inline  TOD  MOVE_TOD (BOOL EN, BOOL *ENO ,  TOD  op1){ if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return (TOD){0,0}   ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  return op1;}     static inline  DT  MOVE_DT (BOOL EN, BOOL *ENO ,  DT  op1){ if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return (DT){0,0}   ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  return op1;}    


 





       static inline  REAL  MOVE__REAL__REAL (BOOL EN, BOOL *ENO ,  REAL  op1){ if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0   ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  return op1;}       static inline  LREAL  MOVE__LREAL__LREAL (BOOL EN, BOOL *ENO ,  LREAL  op1){ if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0   ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  return op1;}         static inline  SINT  MOVE__SINT__SINT (BOOL EN, BOOL *ENO ,  SINT  op1){ if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0   ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  return op1;}        static inline  INT  MOVE__INT__INT (BOOL EN, BOOL *ENO ,  INT  op1){ if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0   ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  return op1;}        static inline  DINT  MOVE__DINT__DINT (BOOL EN, BOOL *ENO ,  DINT  op1){ if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0   ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  return op1;}        static inline  LINT  MOVE__LINT__LINT (BOOL EN, BOOL *ENO ,  LINT  op1){ if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0   ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  return op1;}         static inline  USINT  MOVE__USINT__USINT (BOOL EN, BOOL *ENO ,  USINT  op1){ if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0   ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  return op1;}        static inline  UINT  MOVE__UINT__UINT (BOOL EN, BOOL *ENO ,  UINT  op1){ if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0   ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  return op1;}        static inline  UDINT  MOVE__UDINT__UDINT (BOOL EN, BOOL *ENO ,  UDINT  op1){ if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0   ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  return op1;}        static inline  ULINT  MOVE__ULINT__ULINT (BOOL EN, BOOL *ENO ,  ULINT  op1){ if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0   ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  return op1;}        static inline  TIME  MOVE__TIME__TIME (BOOL EN, BOOL *ENO ,  TIME  op1){ if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return (TIME){0,0}   ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  return op1;}       static inline  BYTE  MOVE__BYTE__BYTE (BOOL EN, BOOL *ENO ,  BYTE  op1){ if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0   ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  return op1;}      static inline  WORD  MOVE__WORD__WORD (BOOL EN, BOOL *ENO ,  WORD  op1){ if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0   ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  return op1;}      static inline  DWORD  MOVE__DWORD__DWORD (BOOL EN, BOOL *ENO ,  DWORD  op1){ if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0   ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  return op1;}      static inline  LWORD  MOVE__LWORD__LWORD (BOOL EN, BOOL *ENO ,  LWORD  op1){ if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0   ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  return op1;}      static inline  BOOL  MOVE__BOOL__BOOL (BOOL EN, BOOL *ENO ,  BOOL  op1){ if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0   ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  return op1;}      static inline  STRING  MOVE__STRING__STRING (BOOL EN, BOOL *ENO ,  STRING  op1){ if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return (STRING){0,""}   ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  return op1;}      static inline  DATE  MOVE__DATE__DATE (BOOL EN, BOOL *ENO ,  DATE  op1){ if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return (DATE){0,0}   ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  return op1;}     static inline  TOD  MOVE__TOD__TOD (BOOL EN, BOOL *ENO ,  TOD  op1){ if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return (TOD){0,0}   ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  return op1;}     static inline  DT  MOVE__DT__DT (BOOL EN, BOOL *ENO ,  DT  op1){ if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return (DT){0,0}   ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  return op1;}    







   
   
 
   
   

 
 
 

 










   
   
   






  static inline BOOL SHL__BOOL__SINT (BOOL EN, BOOL *ENO , BOOL IN,  SINT  N) { if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0  ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ; ; return (N==0)? IN : 0 ; }    static inline BOOL SHL__BOOL__INT (BOOL EN, BOOL *ENO , BOOL IN,  INT  N) { if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0  ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ; ; return (N==0)? IN : 0 ; }    static inline BOOL SHL__BOOL__DINT (BOOL EN, BOOL *ENO , BOOL IN,  DINT  N) { if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0  ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ; ; return (N==0)? IN : 0 ; }    static inline BOOL SHL__BOOL__LINT (BOOL EN, BOOL *ENO , BOOL IN,  LINT  N) { if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0  ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ; ; return (N==0)? IN : 0 ; }     static inline BOOL SHL__BOOL__USINT (BOOL EN, BOOL *ENO , BOOL IN,  USINT  N) { if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0  ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ; ; return (N==0)? IN : 0 ; }    static inline BOOL SHL__BOOL__UINT (BOOL EN, BOOL *ENO , BOOL IN,  UINT  N) { if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0  ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ; ; return (N==0)? IN : 0 ; }    static inline BOOL SHL__BOOL__UDINT (BOOL EN, BOOL *ENO , BOOL IN,  UDINT  N) { if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0  ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ; ; return (N==0)? IN : 0 ; }    static inline BOOL SHL__BOOL__ULINT (BOOL EN, BOOL *ENO , BOOL IN,  ULINT  N) { if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0  ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ; ; return (N==0)? IN : 0 ; }   





   static inline    BYTE    SHL__BYTE__BYTE__SINT    (BOOL EN, BOOL *ENO ,    BYTE   IN,      SINT     N) { if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0    ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  return IN   <<   N;}    static inline    WORD    SHL__WORD__WORD__SINT    (BOOL EN, BOOL *ENO ,    WORD   IN,      SINT     N) { if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0    ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  return IN   <<   N;}    static inline    DWORD    SHL__DWORD__DWORD__SINT    (BOOL EN, BOOL *ENO ,    DWORD   IN,      SINT     N) { if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0    ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  return IN   <<   N;}    static inline    LWORD    SHL__LWORD__LWORD__SINT    (BOOL EN, BOOL *ENO ,    LWORD   IN,      SINT     N) { if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0    ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  return IN   <<   N;}        static inline    BYTE    SHL__BYTE__BYTE__INT    (BOOL EN, BOOL *ENO ,    BYTE   IN,      INT     N) { if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0    ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  return IN   <<   N;}    static inline    WORD    SHL__WORD__WORD__INT    (BOOL EN, BOOL *ENO ,    WORD   IN,      INT     N) { if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0    ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  return IN   <<   N;}    static inline    DWORD    SHL__DWORD__DWORD__INT    (BOOL EN, BOOL *ENO ,    DWORD   IN,      INT     N) { if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0    ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  return IN   <<   N;}    static inline    LWORD    SHL__LWORD__LWORD__INT    (BOOL EN, BOOL *ENO ,    LWORD   IN,      INT     N) { if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0    ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  return IN   <<   N;}        static inline    BYTE    SHL__BYTE__BYTE__DINT    (BOOL EN, BOOL *ENO ,    BYTE   IN,      DINT     N) { if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0    ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  return IN   <<   N;}    static inline    WORD    SHL__WORD__WORD__DINT    (BOOL EN, BOOL *ENO ,    WORD   IN,      DINT     N) { if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0    ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  return IN   <<   N;}    static inline    DWORD    SHL__DWORD__DWORD__DINT    (BOOL EN, BOOL *ENO ,    DWORD   IN,      DINT     N) { if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0    ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  return IN   <<   N;}    static inline    LWORD    SHL__LWORD__LWORD__DINT    (BOOL EN, BOOL *ENO ,    LWORD   IN,      DINT     N) { if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0    ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  return IN   <<   N;}        static inline    BYTE    SHL__BYTE__BYTE__LINT    (BOOL EN, BOOL *ENO ,    BYTE   IN,      LINT     N) { if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0    ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  return IN   <<   N;}    static inline    WORD    SHL__WORD__WORD__LINT    (BOOL EN, BOOL *ENO ,    WORD   IN,      LINT     N) { if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0    ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  return IN   <<   N;}    static inline    DWORD    SHL__DWORD__DWORD__LINT    (BOOL EN, BOOL *ENO ,    DWORD   IN,      LINT     N) { if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0    ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  return IN   <<   N;}    static inline    LWORD    SHL__LWORD__LWORD__LINT    (BOOL EN, BOOL *ENO ,    LWORD   IN,      LINT     N) { if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0    ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  return IN   <<   N;}         static inline    BYTE    SHL__BYTE__BYTE__USINT    (BOOL EN, BOOL *ENO ,    BYTE   IN,      USINT     N) { if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0    ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  return IN   <<   N;}    static inline    WORD    SHL__WORD__WORD__USINT    (BOOL EN, BOOL *ENO ,    WORD   IN,      USINT     N) { if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0    ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  return IN   <<   N;}    static inline    DWORD    SHL__DWORD__DWORD__USINT    (BOOL EN, BOOL *ENO ,    DWORD   IN,      USINT     N) { if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0    ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  return IN   <<   N;}    static inline    LWORD    SHL__LWORD__LWORD__USINT    (BOOL EN, BOOL *ENO ,    LWORD   IN,      USINT     N) { if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0    ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  return IN   <<   N;}        static inline    BYTE    SHL__BYTE__BYTE__UINT    (BOOL EN, BOOL *ENO ,    BYTE   IN,      UINT     N) { if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0    ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  return IN   <<   N;}    static inline    WORD    SHL__WORD__WORD__UINT    (BOOL EN, BOOL *ENO ,    WORD   IN,      UINT     N) { if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0    ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  return IN   <<   N;}    static inline    DWORD    SHL__DWORD__DWORD__UINT    (BOOL EN, BOOL *ENO ,    DWORD   IN,      UINT     N) { if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0    ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  return IN   <<   N;}    static inline    LWORD    SHL__LWORD__LWORD__UINT    (BOOL EN, BOOL *ENO ,    LWORD   IN,      UINT     N) { if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0    ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  return IN   <<   N;}        static inline    BYTE    SHL__BYTE__BYTE__UDINT    (BOOL EN, BOOL *ENO ,    BYTE   IN,      UDINT     N) { if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0    ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  return IN   <<   N;}    static inline    WORD    SHL__WORD__WORD__UDINT    (BOOL EN, BOOL *ENO ,    WORD   IN,      UDINT     N) { if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0    ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  return IN   <<   N;}    static inline    DWORD    SHL__DWORD__DWORD__UDINT    (BOOL EN, BOOL *ENO ,    DWORD   IN,      UDINT     N) { if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0    ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  return IN   <<   N;}    static inline    LWORD    SHL__LWORD__LWORD__UDINT    (BOOL EN, BOOL *ENO ,    LWORD   IN,      UDINT     N) { if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0    ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  return IN   <<   N;}        static inline    BYTE    SHL__BYTE__BYTE__ULINT    (BOOL EN, BOOL *ENO ,    BYTE   IN,      ULINT     N) { if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0    ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  return IN   <<   N;}    static inline    WORD    SHL__WORD__WORD__ULINT    (BOOL EN, BOOL *ENO ,    WORD   IN,      ULINT     N) { if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0    ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  return IN   <<   N;}    static inline    DWORD    SHL__DWORD__DWORD__ULINT    (BOOL EN, BOOL *ENO ,    DWORD   IN,      ULINT     N) { if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0    ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  return IN   <<   N;}    static inline    LWORD    SHL__LWORD__LWORD__ULINT    (BOOL EN, BOOL *ENO ,    LWORD   IN,      ULINT     N) { if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0    ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  return IN   <<   N;}      



   
   
   






  static inline BOOL SHR__BOOL__SINT (BOOL EN, BOOL *ENO , BOOL IN,  SINT  N) { if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0  ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ; ; return (N==0)? IN : 0 ; }    static inline BOOL SHR__BOOL__INT (BOOL EN, BOOL *ENO , BOOL IN,  INT  N) { if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0  ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ; ; return (N==0)? IN : 0 ; }    static inline BOOL SHR__BOOL__DINT (BOOL EN, BOOL *ENO , BOOL IN,  DINT  N) { if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0  ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ; ; return (N==0)? IN : 0 ; }    static inline BOOL SHR__BOOL__LINT (BOOL EN, BOOL *ENO , BOOL IN,  LINT  N) { if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0  ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ; ; return (N==0)? IN : 0 ; }     static inline BOOL SHR__BOOL__USINT (BOOL EN, BOOL *ENO , BOOL IN,  USINT  N) { if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0  ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ; ; return (N==0)? IN : 0 ; }    static inline BOOL SHR__BOOL__UINT (BOOL EN, BOOL *ENO , BOOL IN,  UINT  N) { if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0  ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ; ; return (N==0)? IN : 0 ; }    static inline BOOL SHR__BOOL__UDINT (BOOL EN, BOOL *ENO , BOOL IN,  UDINT  N) { if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0  ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ; ; return (N==0)? IN : 0 ; }    static inline BOOL SHR__BOOL__ULINT (BOOL EN, BOOL *ENO , BOOL IN,  ULINT  N) { if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0  ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ; ; return (N==0)? IN : 0 ; }   





   static inline    BYTE    SHR__BYTE__BYTE__SINT    (BOOL EN, BOOL *ENO ,    BYTE   IN,      SINT     N) { if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0    ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  return IN   >>   N;}    static inline    WORD    SHR__WORD__WORD__SINT    (BOOL EN, BOOL *ENO ,    WORD   IN,      SINT     N) { if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0    ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  return IN   >>   N;}    static inline    DWORD    SHR__DWORD__DWORD__SINT    (BOOL EN, BOOL *ENO ,    DWORD   IN,      SINT     N) { if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0    ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  return IN   >>   N;}    static inline    LWORD    SHR__LWORD__LWORD__SINT    (BOOL EN, BOOL *ENO ,    LWORD   IN,      SINT     N) { if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0    ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  return IN   >>   N;}        static inline    BYTE    SHR__BYTE__BYTE__INT    (BOOL EN, BOOL *ENO ,    BYTE   IN,      INT     N) { if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0    ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  return IN   >>   N;}    static inline    WORD    SHR__WORD__WORD__INT    (BOOL EN, BOOL *ENO ,    WORD   IN,      INT     N) { if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0    ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  return IN   >>   N;}    static inline    DWORD    SHR__DWORD__DWORD__INT    (BOOL EN, BOOL *ENO ,    DWORD   IN,      INT     N) { if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0    ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  return IN   >>   N;}    static inline    LWORD    SHR__LWORD__LWORD__INT    (BOOL EN, BOOL *ENO ,    LWORD   IN,      INT     N) { if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0    ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  return IN   >>   N;}        static inline    BYTE    SHR__BYTE__BYTE__DINT    (BOOL EN, BOOL *ENO ,    BYTE   IN,      DINT     N) { if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0    ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  return IN   >>   N;}    static inline    WORD    SHR__WORD__WORD__DINT    (BOOL EN, BOOL *ENO ,    WORD   IN,      DINT     N) { if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0    ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  return IN   >>   N;}    static inline    DWORD    SHR__DWORD__DWORD__DINT    (BOOL EN, BOOL *ENO ,    DWORD   IN,      DINT     N) { if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0    ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  return IN   >>   N;}    static inline    LWORD    SHR__LWORD__LWORD__DINT    (BOOL EN, BOOL *ENO ,    LWORD   IN,      DINT     N) { if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0    ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  return IN   >>   N;}        static inline    BYTE    SHR__BYTE__BYTE__LINT    (BOOL EN, BOOL *ENO ,    BYTE   IN,      LINT     N) { if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0    ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  return IN   >>   N;}    static inline    WORD    SHR__WORD__WORD__LINT    (BOOL EN, BOOL *ENO ,    WORD   IN,      LINT     N) { if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0    ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  return IN   >>   N;}    static inline    DWORD    SHR__DWORD__DWORD__LINT    (BOOL EN, BOOL *ENO ,    DWORD   IN,      LINT     N) { if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0    ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  return IN   >>   N;}    static inline    LWORD    SHR__LWORD__LWORD__LINT    (BOOL EN, BOOL *ENO ,    LWORD   IN,      LINT     N) { if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0    ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  return IN   >>   N;}         static inline    BYTE    SHR__BYTE__BYTE__USINT    (BOOL EN, BOOL *ENO ,    BYTE   IN,      USINT     N) { if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0    ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  return IN   >>   N;}    static inline    WORD    SHR__WORD__WORD__USINT    (BOOL EN, BOOL *ENO ,    WORD   IN,      USINT     N) { if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0    ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  return IN   >>   N;}    static inline    DWORD    SHR__DWORD__DWORD__USINT    (BOOL EN, BOOL *ENO ,    DWORD   IN,      USINT     N) { if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0    ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  return IN   >>   N;}    static inline    LWORD    SHR__LWORD__LWORD__USINT    (BOOL EN, BOOL *ENO ,    LWORD   IN,      USINT     N) { if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0    ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  return IN   >>   N;}        static inline    BYTE    SHR__BYTE__BYTE__UINT    (BOOL EN, BOOL *ENO ,    BYTE   IN,      UINT     N) { if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0    ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  return IN   >>   N;}    static inline    WORD    SHR__WORD__WORD__UINT    (BOOL EN, BOOL *ENO ,    WORD   IN,      UINT     N) { if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0    ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  return IN   >>   N;}    static inline    DWORD    SHR__DWORD__DWORD__UINT    (BOOL EN, BOOL *ENO ,    DWORD   IN,      UINT     N) { if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0    ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  return IN   >>   N;}    static inline    LWORD    SHR__LWORD__LWORD__UINT    (BOOL EN, BOOL *ENO ,    LWORD   IN,      UINT     N) { if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0    ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  return IN   >>   N;}        static inline    BYTE    SHR__BYTE__BYTE__UDINT    (BOOL EN, BOOL *ENO ,    BYTE   IN,      UDINT     N) { if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0    ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  return IN   >>   N;}    static inline    WORD    SHR__WORD__WORD__UDINT    (BOOL EN, BOOL *ENO ,    WORD   IN,      UDINT     N) { if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0    ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  return IN   >>   N;}    static inline    DWORD    SHR__DWORD__DWORD__UDINT    (BOOL EN, BOOL *ENO ,    DWORD   IN,      UDINT     N) { if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0    ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  return IN   >>   N;}    static inline    LWORD    SHR__LWORD__LWORD__UDINT    (BOOL EN, BOOL *ENO ,    LWORD   IN,      UDINT     N) { if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0    ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  return IN   >>   N;}        static inline    BYTE    SHR__BYTE__BYTE__ULINT    (BOOL EN, BOOL *ENO ,    BYTE   IN,      ULINT     N) { if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0    ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  return IN   >>   N;}    static inline    WORD    SHR__WORD__WORD__ULINT    (BOOL EN, BOOL *ENO ,    WORD   IN,      ULINT     N) { if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0    ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  return IN   >>   N;}    static inline    DWORD    SHR__DWORD__DWORD__ULINT    (BOOL EN, BOOL *ENO ,    DWORD   IN,      ULINT     N) { if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0    ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  return IN   >>   N;}    static inline    LWORD    SHR__LWORD__LWORD__ULINT    (BOOL EN, BOOL *ENO ,    LWORD   IN,      ULINT     N) { if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0    ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  return IN   >>   N;}      



   
   
   






  static inline BOOL ROR__BOOL__SINT (BOOL EN, BOOL *ENO , BOOL IN,  SINT  N) { if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0  ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ; ; return IN; }    static inline BOOL ROR__BOOL__INT (BOOL EN, BOOL *ENO , BOOL IN,  INT  N) { if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0  ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ; ; return IN; }    static inline BOOL ROR__BOOL__DINT (BOOL EN, BOOL *ENO , BOOL IN,  DINT  N) { if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0  ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ; ; return IN; }    static inline BOOL ROR__BOOL__LINT (BOOL EN, BOOL *ENO , BOOL IN,  LINT  N) { if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0  ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ; ; return IN; }     static inline BOOL ROR__BOOL__USINT (BOOL EN, BOOL *ENO , BOOL IN,  USINT  N) { if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0  ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ; ; return IN; }    static inline BOOL ROR__BOOL__UINT (BOOL EN, BOOL *ENO , BOOL IN,  UINT  N) { if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0  ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ; ; return IN; }    static inline BOOL ROR__BOOL__UDINT (BOOL EN, BOOL *ENO , BOOL IN,  UDINT  N) { if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0  ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ; ; return IN; }    static inline BOOL ROR__BOOL__ULINT (BOOL EN, BOOL *ENO , BOOL IN,  ULINT  N) { if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0  ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ; ; return IN; }   









   static inline  BYTE  ROR__BYTE__BYTE__SINT   (BOOL EN, BOOL *ENO ,  BYTE  IN,    SINT    N){ if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0   ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  N %= 8*sizeof( BYTE ); return (IN >> N) | (IN << (8*sizeof( BYTE )-N));}   static inline  WORD  ROR__WORD__WORD__SINT   (BOOL EN, BOOL *ENO ,  WORD  IN,    SINT    N){ if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0   ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  N %= 8*sizeof( WORD ); return (IN >> N) | (IN << (8*sizeof( WORD )-N));}   static inline  DWORD  ROR__DWORD__DWORD__SINT   (BOOL EN, BOOL *ENO ,  DWORD  IN,    SINT    N){ if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0   ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  N %= 8*sizeof( DWORD ); return (IN >> N) | (IN << (8*sizeof( DWORD )-N));}   static inline  LWORD  ROR__LWORD__LWORD__SINT   (BOOL EN, BOOL *ENO ,  LWORD  IN,    SINT    N){ if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0   ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  N %= 8*sizeof( LWORD ); return (IN >> N) | (IN << (8*sizeof( LWORD )-N));}       static inline  BYTE  ROR__BYTE__BYTE__INT   (BOOL EN, BOOL *ENO ,  BYTE  IN,    INT    N){ if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0   ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  N %= 8*sizeof( BYTE ); return (IN >> N) | (IN << (8*sizeof( BYTE )-N));}   static inline  WORD  ROR__WORD__WORD__INT   (BOOL EN, BOOL *ENO ,  WORD  IN,    INT    N){ if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0   ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  N %= 8*sizeof( WORD ); return (IN >> N) | (IN << (8*sizeof( WORD )-N));}   static inline  DWORD  ROR__DWORD__DWORD__INT   (BOOL EN, BOOL *ENO ,  DWORD  IN,    INT    N){ if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0   ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  N %= 8*sizeof( DWORD ); return (IN >> N) | (IN << (8*sizeof( DWORD )-N));}   static inline  LWORD  ROR__LWORD__LWORD__INT   (BOOL EN, BOOL *ENO ,  LWORD  IN,    INT    N){ if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0   ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  N %= 8*sizeof( LWORD ); return (IN >> N) | (IN << (8*sizeof( LWORD )-N));}       static inline  BYTE  ROR__BYTE__BYTE__DINT   (BOOL EN, BOOL *ENO ,  BYTE  IN,    DINT    N){ if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0   ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  N %= 8*sizeof( BYTE ); return (IN >> N) | (IN << (8*sizeof( BYTE )-N));}   static inline  WORD  ROR__WORD__WORD__DINT   (BOOL EN, BOOL *ENO ,  WORD  IN,    DINT    N){ if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0   ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  N %= 8*sizeof( WORD ); return (IN >> N) | (IN << (8*sizeof( WORD )-N));}   static inline  DWORD  ROR__DWORD__DWORD__DINT   (BOOL EN, BOOL *ENO ,  DWORD  IN,    DINT    N){ if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0   ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  N %= 8*sizeof( DWORD ); return (IN >> N) | (IN << (8*sizeof( DWORD )-N));}   static inline  LWORD  ROR__LWORD__LWORD__DINT   (BOOL EN, BOOL *ENO ,  LWORD  IN,    DINT    N){ if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0   ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  N %= 8*sizeof( LWORD ); return (IN >> N) | (IN << (8*sizeof( LWORD )-N));}       static inline  BYTE  ROR__BYTE__BYTE__LINT   (BOOL EN, BOOL *ENO ,  BYTE  IN,    LINT    N){ if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0   ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  N %= 8*sizeof( BYTE ); return (IN >> N) | (IN << (8*sizeof( BYTE )-N));}   static inline  WORD  ROR__WORD__WORD__LINT   (BOOL EN, BOOL *ENO ,  WORD  IN,    LINT    N){ if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0   ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  N %= 8*sizeof( WORD ); return (IN >> N) | (IN << (8*sizeof( WORD )-N));}   static inline  DWORD  ROR__DWORD__DWORD__LINT   (BOOL EN, BOOL *ENO ,  DWORD  IN,    LINT    N){ if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0   ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  N %= 8*sizeof( DWORD ); return (IN >> N) | (IN << (8*sizeof( DWORD )-N));}   static inline  LWORD  ROR__LWORD__LWORD__LINT   (BOOL EN, BOOL *ENO ,  LWORD  IN,    LINT    N){ if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0   ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  N %= 8*sizeof( LWORD ); return (IN >> N) | (IN << (8*sizeof( LWORD )-N));}        static inline  BYTE  ROR__BYTE__BYTE__USINT   (BOOL EN, BOOL *ENO ,  BYTE  IN,    USINT    N){ if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0   ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  N %= 8*sizeof( BYTE ); return (IN >> N) | (IN << (8*sizeof( BYTE )-N));}   static inline  WORD  ROR__WORD__WORD__USINT   (BOOL EN, BOOL *ENO ,  WORD  IN,    USINT    N){ if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0   ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  N %= 8*sizeof( WORD ); return (IN >> N) | (IN << (8*sizeof( WORD )-N));}   static inline  DWORD  ROR__DWORD__DWORD__USINT   (BOOL EN, BOOL *ENO ,  DWORD  IN,    USINT    N){ if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0   ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  N %= 8*sizeof( DWORD ); return (IN >> N) | (IN << (8*sizeof( DWORD )-N));}   static inline  LWORD  ROR__LWORD__LWORD__USINT   (BOOL EN, BOOL *ENO ,  LWORD  IN,    USINT    N){ if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0   ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  N %= 8*sizeof( LWORD ); return (IN >> N) | (IN << (8*sizeof( LWORD )-N));}       static inline  BYTE  ROR__BYTE__BYTE__UINT   (BOOL EN, BOOL *ENO ,  BYTE  IN,    UINT    N){ if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0   ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  N %= 8*sizeof( BYTE ); return (IN >> N) | (IN << (8*sizeof( BYTE )-N));}   static inline  WORD  ROR__WORD__WORD__UINT   (BOOL EN, BOOL *ENO ,  WORD  IN,    UINT    N){ if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0   ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  N %= 8*sizeof( WORD ); return (IN >> N) | (IN << (8*sizeof( WORD )-N));}   static inline  DWORD  ROR__DWORD__DWORD__UINT   (BOOL EN, BOOL *ENO ,  DWORD  IN,    UINT    N){ if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0   ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  N %= 8*sizeof( DWORD ); return (IN >> N) | (IN << (8*sizeof( DWORD )-N));}   static inline  LWORD  ROR__LWORD__LWORD__UINT   (BOOL EN, BOOL *ENO ,  LWORD  IN,    UINT    N){ if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0   ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  N %= 8*sizeof( LWORD ); return (IN >> N) | (IN << (8*sizeof( LWORD )-N));}       static inline  BYTE  ROR__BYTE__BYTE__UDINT   (BOOL EN, BOOL *ENO ,  BYTE  IN,    UDINT    N){ if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0   ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  N %= 8*sizeof( BYTE ); return (IN >> N) | (IN << (8*sizeof( BYTE )-N));}   static inline  WORD  ROR__WORD__WORD__UDINT   (BOOL EN, BOOL *ENO ,  WORD  IN,    UDINT    N){ if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0   ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  N %= 8*sizeof( WORD ); return (IN >> N) | (IN << (8*sizeof( WORD )-N));}   static inline  DWORD  ROR__DWORD__DWORD__UDINT   (BOOL EN, BOOL *ENO ,  DWORD  IN,    UDINT    N){ if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0   ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  N %= 8*sizeof( DWORD ); return (IN >> N) | (IN << (8*sizeof( DWORD )-N));}   static inline  LWORD  ROR__LWORD__LWORD__UDINT   (BOOL EN, BOOL *ENO ,  LWORD  IN,    UDINT    N){ if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0   ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  N %= 8*sizeof( LWORD ); return (IN >> N) | (IN << (8*sizeof( LWORD )-N));}       static inline  BYTE  ROR__BYTE__BYTE__ULINT   (BOOL EN, BOOL *ENO ,  BYTE  IN,    ULINT    N){ if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0   ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  N %= 8*sizeof( BYTE ); return (IN >> N) | (IN << (8*sizeof( BYTE )-N));}   static inline  WORD  ROR__WORD__WORD__ULINT   (BOOL EN, BOOL *ENO ,  WORD  IN,    ULINT    N){ if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0   ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  N %= 8*sizeof( WORD ); return (IN >> N) | (IN << (8*sizeof( WORD )-N));}   static inline  DWORD  ROR__DWORD__DWORD__ULINT   (BOOL EN, BOOL *ENO ,  DWORD  IN,    ULINT    N){ if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0   ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  N %= 8*sizeof( DWORD ); return (IN >> N) | (IN << (8*sizeof( DWORD )-N));}   static inline  LWORD  ROR__LWORD__LWORD__ULINT   (BOOL EN, BOOL *ENO ,  LWORD  IN,    ULINT    N){ if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0   ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  N %= 8*sizeof( LWORD ); return (IN >> N) | (IN << (8*sizeof( LWORD )-N));}     



   
   
   






  static inline BOOL ROL__BOOL__SINT (BOOL EN, BOOL *ENO , BOOL IN,  SINT  N) { if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0  ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ; ; return IN; }    static inline BOOL ROL__BOOL__INT (BOOL EN, BOOL *ENO , BOOL IN,  INT  N) { if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0  ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ; ; return IN; }    static inline BOOL ROL__BOOL__DINT (BOOL EN, BOOL *ENO , BOOL IN,  DINT  N) { if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0  ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ; ; return IN; }    static inline BOOL ROL__BOOL__LINT (BOOL EN, BOOL *ENO , BOOL IN,  LINT  N) { if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0  ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ; ; return IN; }     static inline BOOL ROL__BOOL__USINT (BOOL EN, BOOL *ENO , BOOL IN,  USINT  N) { if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0  ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ; ; return IN; }    static inline BOOL ROL__BOOL__UINT (BOOL EN, BOOL *ENO , BOOL IN,  UINT  N) { if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0  ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ; ; return IN; }    static inline BOOL ROL__BOOL__UDINT (BOOL EN, BOOL *ENO , BOOL IN,  UDINT  N) { if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0  ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ; ; return IN; }    static inline BOOL ROL__BOOL__ULINT (BOOL EN, BOOL *ENO , BOOL IN,  ULINT  N) { if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0  ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ; ; return IN; }   









   static inline  BYTE  ROL__BYTE__BYTE__SINT   (BOOL EN, BOOL *ENO ,  BYTE  IN,    SINT    N){ if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0   ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  N %= 8*sizeof( BYTE ); return (IN << N) | (IN >> (8*sizeof( BYTE )-N));}   static inline  WORD  ROL__WORD__WORD__SINT   (BOOL EN, BOOL *ENO ,  WORD  IN,    SINT    N){ if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0   ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  N %= 8*sizeof( WORD ); return (IN << N) | (IN >> (8*sizeof( WORD )-N));}   static inline  DWORD  ROL__DWORD__DWORD__SINT   (BOOL EN, BOOL *ENO ,  DWORD  IN,    SINT    N){ if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0   ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  N %= 8*sizeof( DWORD ); return (IN << N) | (IN >> (8*sizeof( DWORD )-N));}   static inline  LWORD  ROL__LWORD__LWORD__SINT   (BOOL EN, BOOL *ENO ,  LWORD  IN,    SINT    N){ if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0   ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  N %= 8*sizeof( LWORD ); return (IN << N) | (IN >> (8*sizeof( LWORD )-N));}       static inline  BYTE  ROL__BYTE__BYTE__INT   (BOOL EN, BOOL *ENO ,  BYTE  IN,    INT    N){ if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0   ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  N %= 8*sizeof( BYTE ); return (IN << N) | (IN >> (8*sizeof( BYTE )-N));}   static inline  WORD  ROL__WORD__WORD__INT   (BOOL EN, BOOL *ENO ,  WORD  IN,    INT    N){ if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0   ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  N %= 8*sizeof( WORD ); return (IN << N) | (IN >> (8*sizeof( WORD )-N));}   static inline  DWORD  ROL__DWORD__DWORD__INT   (BOOL EN, BOOL *ENO ,  DWORD  IN,    INT    N){ if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0   ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  N %= 8*sizeof( DWORD ); return (IN << N) | (IN >> (8*sizeof( DWORD )-N));}   static inline  LWORD  ROL__LWORD__LWORD__INT   (BOOL EN, BOOL *ENO ,  LWORD  IN,    INT    N){ if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0   ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  N %= 8*sizeof( LWORD ); return (IN << N) | (IN >> (8*sizeof( LWORD )-N));}       static inline  BYTE  ROL__BYTE__BYTE__DINT   (BOOL EN, BOOL *ENO ,  BYTE  IN,    DINT    N){ if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0   ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  N %= 8*sizeof( BYTE ); return (IN << N) | (IN >> (8*sizeof( BYTE )-N));}   static inline  WORD  ROL__WORD__WORD__DINT   (BOOL EN, BOOL *ENO ,  WORD  IN,    DINT    N){ if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0   ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  N %= 8*sizeof( WORD ); return (IN << N) | (IN >> (8*sizeof( WORD )-N));}   static inline  DWORD  ROL__DWORD__DWORD__DINT   (BOOL EN, BOOL *ENO ,  DWORD  IN,    DINT    N){ if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0   ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  N %= 8*sizeof( DWORD ); return (IN << N) | (IN >> (8*sizeof( DWORD )-N));}   static inline  LWORD  ROL__LWORD__LWORD__DINT   (BOOL EN, BOOL *ENO ,  LWORD  IN,    DINT    N){ if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0   ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  N %= 8*sizeof( LWORD ); return (IN << N) | (IN >> (8*sizeof( LWORD )-N));}       static inline  BYTE  ROL__BYTE__BYTE__LINT   (BOOL EN, BOOL *ENO ,  BYTE  IN,    LINT    N){ if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0   ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  N %= 8*sizeof( BYTE ); return (IN << N) | (IN >> (8*sizeof( BYTE )-N));}   static inline  WORD  ROL__WORD__WORD__LINT   (BOOL EN, BOOL *ENO ,  WORD  IN,    LINT    N){ if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0   ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  N %= 8*sizeof( WORD ); return (IN << N) | (IN >> (8*sizeof( WORD )-N));}   static inline  DWORD  ROL__DWORD__DWORD__LINT   (BOOL EN, BOOL *ENO ,  DWORD  IN,    LINT    N){ if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0   ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  N %= 8*sizeof( DWORD ); return (IN << N) | (IN >> (8*sizeof( DWORD )-N));}   static inline  LWORD  ROL__LWORD__LWORD__LINT   (BOOL EN, BOOL *ENO ,  LWORD  IN,    LINT    N){ if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0   ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  N %= 8*sizeof( LWORD ); return (IN << N) | (IN >> (8*sizeof( LWORD )-N));}        static inline  BYTE  ROL__BYTE__BYTE__USINT   (BOOL EN, BOOL *ENO ,  BYTE  IN,    USINT    N){ if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0   ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  N %= 8*sizeof( BYTE ); return (IN << N) | (IN >> (8*sizeof( BYTE )-N));}   static inline  WORD  ROL__WORD__WORD__USINT   (BOOL EN, BOOL *ENO ,  WORD  IN,    USINT    N){ if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0   ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  N %= 8*sizeof( WORD ); return (IN << N) | (IN >> (8*sizeof( WORD )-N));}   static inline  DWORD  ROL__DWORD__DWORD__USINT   (BOOL EN, BOOL *ENO ,  DWORD  IN,    USINT    N){ if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0   ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  N %= 8*sizeof( DWORD ); return (IN << N) | (IN >> (8*sizeof( DWORD )-N));}   static inline  LWORD  ROL__LWORD__LWORD__USINT   (BOOL EN, BOOL *ENO ,  LWORD  IN,    USINT    N){ if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0   ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  N %= 8*sizeof( LWORD ); return (IN << N) | (IN >> (8*sizeof( LWORD )-N));}       static inline  BYTE  ROL__BYTE__BYTE__UINT   (BOOL EN, BOOL *ENO ,  BYTE  IN,    UINT    N){ if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0   ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  N %= 8*sizeof( BYTE ); return (IN << N) | (IN >> (8*sizeof( BYTE )-N));}   static inline  WORD  ROL__WORD__WORD__UINT   (BOOL EN, BOOL *ENO ,  WORD  IN,    UINT    N){ if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0   ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  N %= 8*sizeof( WORD ); return (IN << N) | (IN >> (8*sizeof( WORD )-N));}   static inline  DWORD  ROL__DWORD__DWORD__UINT   (BOOL EN, BOOL *ENO ,  DWORD  IN,    UINT    N){ if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0   ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  N %= 8*sizeof( DWORD ); return (IN << N) | (IN >> (8*sizeof( DWORD )-N));}   static inline  LWORD  ROL__LWORD__LWORD__UINT   (BOOL EN, BOOL *ENO ,  LWORD  IN,    UINT    N){ if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0   ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  N %= 8*sizeof( LWORD ); return (IN << N) | (IN >> (8*sizeof( LWORD )-N));}       static inline  BYTE  ROL__BYTE__BYTE__UDINT   (BOOL EN, BOOL *ENO ,  BYTE  IN,    UDINT    N){ if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0   ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  N %= 8*sizeof( BYTE ); return (IN << N) | (IN >> (8*sizeof( BYTE )-N));}   static inline  WORD  ROL__WORD__WORD__UDINT   (BOOL EN, BOOL *ENO ,  WORD  IN,    UDINT    N){ if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0   ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  N %= 8*sizeof( WORD ); return (IN << N) | (IN >> (8*sizeof( WORD )-N));}   static inline  DWORD  ROL__DWORD__DWORD__UDINT   (BOOL EN, BOOL *ENO ,  DWORD  IN,    UDINT    N){ if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0   ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  N %= 8*sizeof( DWORD ); return (IN << N) | (IN >> (8*sizeof( DWORD )-N));}   static inline  LWORD  ROL__LWORD__LWORD__UDINT   (BOOL EN, BOOL *ENO ,  LWORD  IN,    UDINT    N){ if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0   ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  N %= 8*sizeof( LWORD ); return (IN << N) | (IN >> (8*sizeof( LWORD )-N));}       static inline  BYTE  ROL__BYTE__BYTE__ULINT   (BOOL EN, BOOL *ENO ,  BYTE  IN,    ULINT    N){ if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0   ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  N %= 8*sizeof( BYTE ); return (IN << N) | (IN >> (8*sizeof( BYTE )-N));}   static inline  WORD  ROL__WORD__WORD__ULINT   (BOOL EN, BOOL *ENO ,  WORD  IN,    ULINT    N){ if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0   ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  N %= 8*sizeof( WORD ); return (IN << N) | (IN >> (8*sizeof( WORD )-N));}   static inline  DWORD  ROL__DWORD__DWORD__ULINT   (BOOL EN, BOOL *ENO ,  DWORD  IN,    ULINT    N){ if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0   ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  N %= 8*sizeof( DWORD ); return (IN << N) | (IN >> (8*sizeof( DWORD )-N));}   static inline  LWORD  ROL__LWORD__LWORD__ULINT   (BOOL EN, BOOL *ENO ,  LWORD  IN,    ULINT    N){ if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0   ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  N %= 8*sizeof( LWORD ); return (IN << N) | (IN >> (8*sizeof( LWORD )-N));}     




 
 
 

   
   
   
static inline   BOOL   AND_BOOL (BOOL EN, BOOL *ENO , UINT param_count,   BOOL  op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0   ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  ( ap  = ((__gnuc_va_list) __builtin_next_arg (  op1 ))) ; for (i = 0; i < param_count - 1; i++){ op1 = op1   &&   ( ap  = (__gnuc_va_list) ((char *) ( ap ) + (((sizeof (   DWORD    ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ),	*((  DWORD    *) (void *) ((char *) ( ap ) - (((sizeof (   DWORD    ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ))) ; } ((void)0) ; return op1;}           
static inline   BOOL   AND__BOOL__BOOL (BOOL EN, BOOL *ENO , UINT param_count,   BOOL  op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0   ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  ( ap  = ((__gnuc_va_list) __builtin_next_arg (  op1 ))) ; for (i = 0; i < param_count - 1; i++){ op1 = op1   &&   ( ap  = (__gnuc_va_list) ((char *) ( ap ) + (((sizeof (   DWORD    ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ),	*((  DWORD    *) (void *) ((char *) ( ap ) - (((sizeof (   DWORD    ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ))) ; } ((void)0) ; return op1;}    




 static inline    BYTE    AND_BYTE  (BOOL EN, BOOL *ENO , UINT param_count,    BYTE   op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0    ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  ( ap  = ((__gnuc_va_list) __builtin_next_arg (  op1 ))) ; for (i = 0; i < param_count - 1; i++){ op1 = op1   &  ( ap  = (__gnuc_va_list) ((char *) ( ap ) + (((sizeof (   DWORD     ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ),	*((  DWORD     *) (void *) ((char *) ( ap ) - (((sizeof (   DWORD     ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ))) ; } ((void)0) ; return op1;}  static inline    BYTE    AND__BYTE__BYTE  (BOOL EN, BOOL *ENO , UINT param_count,    BYTE   op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0    ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  ( ap  = ((__gnuc_va_list) __builtin_next_arg (  op1 ))) ; for (i = 0; i < param_count - 1; i++){ op1 = op1   &  ( ap  = (__gnuc_va_list) ((char *) ( ap ) + (((sizeof (   DWORD     ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ),	*((  DWORD     *) (void *) ((char *) ( ap ) - (((sizeof (   DWORD     ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ))) ; } ((void)0) ; return op1;}    static inline    WORD    AND_WORD  (BOOL EN, BOOL *ENO , UINT param_count,    WORD   op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0    ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  ( ap  = ((__gnuc_va_list) __builtin_next_arg (  op1 ))) ; for (i = 0; i < param_count - 1; i++){ op1 = op1   &  ( ap  = (__gnuc_va_list) ((char *) ( ap ) + (((sizeof (   DWORD     ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ),	*((  DWORD     *) (void *) ((char *) ( ap ) - (((sizeof (   DWORD     ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ))) ; } ((void)0) ; return op1;}  static inline    WORD    AND__WORD__WORD  (BOOL EN, BOOL *ENO , UINT param_count,    WORD   op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0    ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  ( ap  = ((__gnuc_va_list) __builtin_next_arg (  op1 ))) ; for (i = 0; i < param_count - 1; i++){ op1 = op1   &  ( ap  = (__gnuc_va_list) ((char *) ( ap ) + (((sizeof (   DWORD     ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ),	*((  DWORD     *) (void *) ((char *) ( ap ) - (((sizeof (   DWORD     ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ))) ; } ((void)0) ; return op1;}    static inline    DWORD    AND_DWORD  (BOOL EN, BOOL *ENO , UINT param_count,    DWORD   op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0    ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  ( ap  = ((__gnuc_va_list) __builtin_next_arg (  op1 ))) ; for (i = 0; i < param_count - 1; i++){ op1 = op1   &  ( ap  = (__gnuc_va_list) ((char *) ( ap ) + (((sizeof (   DWORD     ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ),	*((  DWORD     *) (void *) ((char *) ( ap ) - (((sizeof (   DWORD     ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ))) ; } ((void)0) ; return op1;}  static inline    DWORD    AND__DWORD__DWORD  (BOOL EN, BOOL *ENO , UINT param_count,    DWORD   op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0    ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  ( ap  = ((__gnuc_va_list) __builtin_next_arg (  op1 ))) ; for (i = 0; i < param_count - 1; i++){ op1 = op1   &  ( ap  = (__gnuc_va_list) ((char *) ( ap ) + (((sizeof (   DWORD     ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ),	*((  DWORD     *) (void *) ((char *) ( ap ) - (((sizeof (   DWORD     ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ))) ; } ((void)0) ; return op1;}    static inline    LWORD    AND_LWORD  (BOOL EN, BOOL *ENO , UINT param_count,    LWORD   op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0    ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  ( ap  = ((__gnuc_va_list) __builtin_next_arg (  op1 ))) ; for (i = 0; i < param_count - 1; i++){ op1 = op1   &  ( ap  = (__gnuc_va_list) ((char *) ( ap ) + (((sizeof (   LWORD     ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ),	*((  LWORD     *) (void *) ((char *) ( ap ) - (((sizeof (   LWORD     ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ))) ; } ((void)0) ; return op1;}  static inline    LWORD    AND__LWORD__LWORD  (BOOL EN, BOOL *ENO , UINT param_count,    LWORD   op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0    ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  ( ap  = ((__gnuc_va_list) __builtin_next_arg (  op1 ))) ; for (i = 0; i < param_count - 1; i++){ op1 = op1   &  ( ap  = (__gnuc_va_list) ((char *) ( ap ) + (((sizeof (   LWORD     ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ),	*((  LWORD     *) (void *) ((char *) ( ap ) - (((sizeof (   LWORD     ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ))) ; } ((void)0) ; return op1;}   


   
   
   
static inline   BOOL   OR_BOOL (BOOL EN, BOOL *ENO , UINT param_count,   BOOL  op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0   ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  ( ap  = ((__gnuc_va_list) __builtin_next_arg (  op1 ))) ; for (i = 0; i < param_count - 1; i++){ op1 = op1   ||   ( ap  = (__gnuc_va_list) ((char *) ( ap ) + (((sizeof (   DWORD    ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ),	*((  DWORD    *) (void *) ((char *) ( ap ) - (((sizeof (   DWORD    ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ))) ; } ((void)0) ; return op1;}           
static inline   BOOL   OR__BOOL__BOOL (BOOL EN, BOOL *ENO , UINT param_count,   BOOL  op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0   ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  ( ap  = ((__gnuc_va_list) __builtin_next_arg (  op1 ))) ; for (i = 0; i < param_count - 1; i++){ op1 = op1   ||   ( ap  = (__gnuc_va_list) ((char *) ( ap ) + (((sizeof (   DWORD    ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ),	*((  DWORD    *) (void *) ((char *) ( ap ) - (((sizeof (   DWORD    ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ))) ; } ((void)0) ; return op1;}    




 static inline    BYTE    OR_BYTE  (BOOL EN, BOOL *ENO , UINT param_count,    BYTE   op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0    ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  ( ap  = ((__gnuc_va_list) __builtin_next_arg (  op1 ))) ; for (i = 0; i < param_count - 1; i++){ op1 = op1   |  ( ap  = (__gnuc_va_list) ((char *) ( ap ) + (((sizeof (   DWORD     ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ),	*((  DWORD     *) (void *) ((char *) ( ap ) - (((sizeof (   DWORD     ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ))) ; } ((void)0) ; return op1;}  static inline    BYTE    OR__BYTE__BYTE  (BOOL EN, BOOL *ENO , UINT param_count,    BYTE   op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0    ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  ( ap  = ((__gnuc_va_list) __builtin_next_arg (  op1 ))) ; for (i = 0; i < param_count - 1; i++){ op1 = op1   |  ( ap  = (__gnuc_va_list) ((char *) ( ap ) + (((sizeof (   DWORD     ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ),	*((  DWORD     *) (void *) ((char *) ( ap ) - (((sizeof (   DWORD     ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ))) ; } ((void)0) ; return op1;}    static inline    WORD    OR_WORD  (BOOL EN, BOOL *ENO , UINT param_count,    WORD   op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0    ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  ( ap  = ((__gnuc_va_list) __builtin_next_arg (  op1 ))) ; for (i = 0; i < param_count - 1; i++){ op1 = op1   |  ( ap  = (__gnuc_va_list) ((char *) ( ap ) + (((sizeof (   DWORD     ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ),	*((  DWORD     *) (void *) ((char *) ( ap ) - (((sizeof (   DWORD     ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ))) ; } ((void)0) ; return op1;}  static inline    WORD    OR__WORD__WORD  (BOOL EN, BOOL *ENO , UINT param_count,    WORD   op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0    ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  ( ap  = ((__gnuc_va_list) __builtin_next_arg (  op1 ))) ; for (i = 0; i < param_count - 1; i++){ op1 = op1   |  ( ap  = (__gnuc_va_list) ((char *) ( ap ) + (((sizeof (   DWORD     ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ),	*((  DWORD     *) (void *) ((char *) ( ap ) - (((sizeof (   DWORD     ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ))) ; } ((void)0) ; return op1;}    static inline    DWORD    OR_DWORD  (BOOL EN, BOOL *ENO , UINT param_count,    DWORD   op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0    ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  ( ap  = ((__gnuc_va_list) __builtin_next_arg (  op1 ))) ; for (i = 0; i < param_count - 1; i++){ op1 = op1   |  ( ap  = (__gnuc_va_list) ((char *) ( ap ) + (((sizeof (   DWORD     ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ),	*((  DWORD     *) (void *) ((char *) ( ap ) - (((sizeof (   DWORD     ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ))) ; } ((void)0) ; return op1;}  static inline    DWORD    OR__DWORD__DWORD  (BOOL EN, BOOL *ENO , UINT param_count,    DWORD   op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0    ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  ( ap  = ((__gnuc_va_list) __builtin_next_arg (  op1 ))) ; for (i = 0; i < param_count - 1; i++){ op1 = op1   |  ( ap  = (__gnuc_va_list) ((char *) ( ap ) + (((sizeof (   DWORD     ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ),	*((  DWORD     *) (void *) ((char *) ( ap ) - (((sizeof (   DWORD     ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ))) ; } ((void)0) ; return op1;}    static inline    LWORD    OR_LWORD  (BOOL EN, BOOL *ENO , UINT param_count,    LWORD   op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0    ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  ( ap  = ((__gnuc_va_list) __builtin_next_arg (  op1 ))) ; for (i = 0; i < param_count - 1; i++){ op1 = op1   |  ( ap  = (__gnuc_va_list) ((char *) ( ap ) + (((sizeof (   LWORD     ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ),	*((  LWORD     *) (void *) ((char *) ( ap ) - (((sizeof (   LWORD     ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ))) ; } ((void)0) ; return op1;}  static inline    LWORD    OR__LWORD__LWORD  (BOOL EN, BOOL *ENO , UINT param_count,    LWORD   op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0    ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  ( ap  = ((__gnuc_va_list) __builtin_next_arg (  op1 ))) ; for (i = 0; i < param_count - 1; i++){ op1 = op1   |  ( ap  = (__gnuc_va_list) ((char *) ( ap ) + (((sizeof (   LWORD     ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ),	*((  LWORD     *) (void *) ((char *) ( ap ) - (((sizeof (   LWORD     ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ))) ; } ((void)0) ; return op1;}   


   
   
   

# 1348 "iec_std_lib.h"

static inline BOOL  XOR_BOOL (BOOL EN, BOOL *ENO , UINT param_count, BOOL op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0  ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  ( ap  = ((__gnuc_va_list) __builtin_next_arg (  op1 ))) ; for (i = 0; i < param_count - 1; i++){ BOOL tmp = ( ap  = (__gnuc_va_list) ((char *) ( ap ) + (((sizeof (   DWORD   ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ),	*((  DWORD   *) (void *) ((char *) ( ap ) - (((sizeof (   DWORD   ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ))) ; op1 = (op1 && !tmp) || (!op1 && tmp); } ((void)0) ; return op1; }   
static inline BOOL  XOR__BOOL__BOOL (BOOL EN, BOOL *ENO , UINT param_count, BOOL op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0  ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  ( ap  = ((__gnuc_va_list) __builtin_next_arg (  op1 ))) ; for (i = 0; i < param_count - 1; i++){ BOOL tmp = ( ap  = (__gnuc_va_list) ((char *) ( ap ) + (((sizeof (   DWORD   ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ),	*((  DWORD   *) (void *) ((char *) ( ap ) - (((sizeof (   DWORD   ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ))) ; op1 = (op1 && !tmp) || (!op1 && tmp); } ((void)0) ; return op1; }   








   
   
   
 
static inline BOOL NOT_BOOL(BOOL EN, BOOL *ENO , BOOL op1){
  if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0  ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ; 
  return !op1;
}

 
static inline BOOL NOT__BOOL__BOOL(BOOL EN, BOOL *ENO , BOOL op1){
  if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0  ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ; 
  return !op1;
}

 





 static inline  BYTE  NOT_BYTE (BOOL EN, BOOL *ENO ,  BYTE  op1){ if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0   ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  return ~op1;}   static inline  WORD  NOT_WORD (BOOL EN, BOOL *ENO ,  WORD  op1){ if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0   ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  return ~op1;}   static inline  DWORD  NOT_DWORD (BOOL EN, BOOL *ENO ,  DWORD  op1){ if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0   ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  return ~op1;}   static inline  LWORD  NOT_LWORD (BOOL EN, BOOL *ENO ,  LWORD  op1){ if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0   ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  return ~op1;}  


 





 static inline  BYTE  NOT__BYTE__BYTE (BOOL EN, BOOL *ENO ,  BYTE  op1){ if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0   ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  return ~op1;}   static inline  WORD  NOT__WORD__WORD (BOOL EN, BOOL *ENO ,  WORD  op1){ if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0   ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  return ~op1;}   static inline  DWORD  NOT__DWORD__DWORD (BOOL EN, BOOL *ENO ,  DWORD  op1){ if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0   ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  return ~op1;}   static inline  LWORD  NOT__LWORD__LWORD (BOOL EN, BOOL *ENO ,  LWORD  op1){ if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0   ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  return ~op1;}  







   
   
 
   
   

 
 
 


     
     
     

 





       static inline  REAL  SEL_REAL (BOOL EN, BOOL *ENO , BOOL G,  REAL  op0,  REAL  op1){ if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0   ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  return G ? op1 : op0;}       static inline  LREAL  SEL_LREAL (BOOL EN, BOOL *ENO , BOOL G,  LREAL  op0,  LREAL  op1){ if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0   ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  return G ? op1 : op0;}         static inline  SINT  SEL_SINT (BOOL EN, BOOL *ENO , BOOL G,  SINT  op0,  SINT  op1){ if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0   ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  return G ? op1 : op0;}        static inline  INT  SEL_INT (BOOL EN, BOOL *ENO , BOOL G,  INT  op0,  INT  op1){ if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0   ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  return G ? op1 : op0;}        static inline  DINT  SEL_DINT (BOOL EN, BOOL *ENO , BOOL G,  DINT  op0,  DINT  op1){ if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0   ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  return G ? op1 : op0;}        static inline  LINT  SEL_LINT (BOOL EN, BOOL *ENO , BOOL G,  LINT  op0,  LINT  op1){ if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0   ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  return G ? op1 : op0;}         static inline  USINT  SEL_USINT (BOOL EN, BOOL *ENO , BOOL G,  USINT  op0,  USINT  op1){ if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0   ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  return G ? op1 : op0;}        static inline  UINT  SEL_UINT (BOOL EN, BOOL *ENO , BOOL G,  UINT  op0,  UINT  op1){ if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0   ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  return G ? op1 : op0;}        static inline  UDINT  SEL_UDINT (BOOL EN, BOOL *ENO , BOOL G,  UDINT  op0,  UDINT  op1){ if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0   ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  return G ? op1 : op0;}        static inline  ULINT  SEL_ULINT (BOOL EN, BOOL *ENO , BOOL G,  ULINT  op0,  ULINT  op1){ if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0   ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  return G ? op1 : op0;}        static inline  TIME  SEL_TIME (BOOL EN, BOOL *ENO , BOOL G,  TIME  op0,  TIME  op1){ if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return (TIME){0,0}   ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  return G ? op1 : op0;}       static inline  BYTE  SEL_BYTE (BOOL EN, BOOL *ENO , BOOL G,  BYTE  op0,  BYTE  op1){ if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0   ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  return G ? op1 : op0;}      static inline  WORD  SEL_WORD (BOOL EN, BOOL *ENO , BOOL G,  WORD  op0,  WORD  op1){ if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0   ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  return G ? op1 : op0;}      static inline  DWORD  SEL_DWORD (BOOL EN, BOOL *ENO , BOOL G,  DWORD  op0,  DWORD  op1){ if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0   ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  return G ? op1 : op0;}      static inline  LWORD  SEL_LWORD (BOOL EN, BOOL *ENO , BOOL G,  LWORD  op0,  LWORD  op1){ if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0   ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  return G ? op1 : op0;}      static inline  BOOL  SEL_BOOL (BOOL EN, BOOL *ENO , BOOL G,  BOOL  op0,  BOOL  op1){ if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0   ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  return G ? op1 : op0;}      static inline  STRING  SEL_STRING (BOOL EN, BOOL *ENO , BOOL G,  STRING  op0,  STRING  op1){ if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return (STRING){0,""}   ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  return G ? op1 : op0;}      static inline  DATE  SEL_DATE (BOOL EN, BOOL *ENO , BOOL G,  DATE  op0,  DATE  op1){ if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return (DATE){0,0}   ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  return G ? op1 : op0;}     static inline  TOD  SEL_TOD (BOOL EN, BOOL *ENO , BOOL G,  TOD  op0,  TOD  op1){ if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return (TOD){0,0}   ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  return G ? op1 : op0;}     static inline  DT  SEL_DT (BOOL EN, BOOL *ENO , BOOL G,  DT  op0,  DT  op1){ if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return (DT){0,0}   ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  return G ? op1 : op0;}    


 





       static inline  REAL  SEL__REAL__BOOL__REAL__REAL (BOOL EN, BOOL *ENO , BOOL G,  REAL  op0,  REAL  op1){ if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0   ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  return G ? op1 : op0;}       static inline  LREAL  SEL__LREAL__BOOL__LREAL__LREAL (BOOL EN, BOOL *ENO , BOOL G,  LREAL  op0,  LREAL  op1){ if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0   ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  return G ? op1 : op0;}         static inline  SINT  SEL__SINT__BOOL__SINT__SINT (BOOL EN, BOOL *ENO , BOOL G,  SINT  op0,  SINT  op1){ if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0   ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  return G ? op1 : op0;}        static inline  INT  SEL__INT__BOOL__INT__INT (BOOL EN, BOOL *ENO , BOOL G,  INT  op0,  INT  op1){ if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0   ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  return G ? op1 : op0;}        static inline  DINT  SEL__DINT__BOOL__DINT__DINT (BOOL EN, BOOL *ENO , BOOL G,  DINT  op0,  DINT  op1){ if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0   ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  return G ? op1 : op0;}        static inline  LINT  SEL__LINT__BOOL__LINT__LINT (BOOL EN, BOOL *ENO , BOOL G,  LINT  op0,  LINT  op1){ if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0   ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  return G ? op1 : op0;}         static inline  USINT  SEL__USINT__BOOL__USINT__USINT (BOOL EN, BOOL *ENO , BOOL G,  USINT  op0,  USINT  op1){ if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0   ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  return G ? op1 : op0;}        static inline  UINT  SEL__UINT__BOOL__UINT__UINT (BOOL EN, BOOL *ENO , BOOL G,  UINT  op0,  UINT  op1){ if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0   ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  return G ? op1 : op0;}        static inline  UDINT  SEL__UDINT__BOOL__UDINT__UDINT (BOOL EN, BOOL *ENO , BOOL G,  UDINT  op0,  UDINT  op1){ if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0   ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  return G ? op1 : op0;}        static inline  ULINT  SEL__ULINT__BOOL__ULINT__ULINT (BOOL EN, BOOL *ENO , BOOL G,  ULINT  op0,  ULINT  op1){ if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0   ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  return G ? op1 : op0;}        static inline  TIME  SEL__TIME__BOOL__TIME__TIME (BOOL EN, BOOL *ENO , BOOL G,  TIME  op0,  TIME  op1){ if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return (TIME){0,0}   ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  return G ? op1 : op0;}       static inline  BYTE  SEL__BYTE__BOOL__BYTE__BYTE (BOOL EN, BOOL *ENO , BOOL G,  BYTE  op0,  BYTE  op1){ if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0   ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  return G ? op1 : op0;}      static inline  WORD  SEL__WORD__BOOL__WORD__WORD (BOOL EN, BOOL *ENO , BOOL G,  WORD  op0,  WORD  op1){ if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0   ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  return G ? op1 : op0;}      static inline  DWORD  SEL__DWORD__BOOL__DWORD__DWORD (BOOL EN, BOOL *ENO , BOOL G,  DWORD  op0,  DWORD  op1){ if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0   ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  return G ? op1 : op0;}      static inline  LWORD  SEL__LWORD__BOOL__LWORD__LWORD (BOOL EN, BOOL *ENO , BOOL G,  LWORD  op0,  LWORD  op1){ if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0   ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  return G ? op1 : op0;}      static inline  BOOL  SEL__BOOL__BOOL__BOOL__BOOL (BOOL EN, BOOL *ENO , BOOL G,  BOOL  op0,  BOOL  op1){ if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0   ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  return G ? op1 : op0;}      static inline  STRING  SEL__STRING__BOOL__STRING__STRING (BOOL EN, BOOL *ENO , BOOL G,  STRING  op0,  STRING  op1){ if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return (STRING){0,""}   ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  return G ? op1 : op0;}      static inline  DATE  SEL__DATE__BOOL__DATE__DATE (BOOL EN, BOOL *ENO , BOOL G,  DATE  op0,  DATE  op1){ if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return (DATE){0,0}   ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  return G ? op1 : op0;}     static inline  TOD  SEL__TOD__BOOL__TOD__TOD (BOOL EN, BOOL *ENO , BOOL G,  TOD  op0,  TOD  op1){ if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return (TOD){0,0}   ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  return G ? op1 : op0;}     static inline  DT  SEL__DT__BOOL__DT__DT (BOOL EN, BOOL *ENO , BOOL G,  DT  op0,  DT  op1){ if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return (DT){0,0}   ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  return G ? op1 : op0;}    



     
     
     


# 1451 "iec_std_lib.h"

 	



  static inline   BYTE    MAX_BYTE  (BOOL EN, BOOL *ENO , UINT param_count,   BYTE   op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0    ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  ( ap  = ((__gnuc_va_list) __builtin_next_arg (  op1 ))) ; for (i = 0; i < param_count - 1; i++){   BYTE   tmp = ( ap  = (__gnuc_va_list) ((char *) ( ap ) + (((sizeof (   DWORD     ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ),	*((  DWORD     *) (void *) ((char *) ( ap ) - (((sizeof (   DWORD     ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ))) ; op1 =   op1 < tmp  ? tmp : op1; } ((void)0) ; return op1;}  static inline   BYTE    MAX__BYTE__BYTE  (BOOL EN, BOOL *ENO , UINT param_count,   BYTE   op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0    ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  ( ap  = ((__gnuc_va_list) __builtin_next_arg (  op1 ))) ; for (i = 0; i < param_count - 1; i++){   BYTE   tmp = ( ap  = (__gnuc_va_list) ((char *) ( ap ) + (((sizeof (   DWORD     ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ),	*((  DWORD     *) (void *) ((char *) ( ap ) - (((sizeof (   DWORD     ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ))) ; op1 =   op1 < tmp  ? tmp : op1; } ((void)0) ; return op1;}     static inline   WORD    MAX_WORD  (BOOL EN, BOOL *ENO , UINT param_count,   WORD   op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0    ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  ( ap  = ((__gnuc_va_list) __builtin_next_arg (  op1 ))) ; for (i = 0; i < param_count - 1; i++){   WORD   tmp = ( ap  = (__gnuc_va_list) ((char *) ( ap ) + (((sizeof (   DWORD     ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ),	*((  DWORD     *) (void *) ((char *) ( ap ) - (((sizeof (   DWORD     ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ))) ; op1 =   op1 < tmp  ? tmp : op1; } ((void)0) ; return op1;}  static inline   WORD    MAX__WORD__WORD  (BOOL EN, BOOL *ENO , UINT param_count,   WORD   op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0    ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  ( ap  = ((__gnuc_va_list) __builtin_next_arg (  op1 ))) ; for (i = 0; i < param_count - 1; i++){   WORD   tmp = ( ap  = (__gnuc_va_list) ((char *) ( ap ) + (((sizeof (   DWORD     ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ),	*((  DWORD     *) (void *) ((char *) ( ap ) - (((sizeof (   DWORD     ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ))) ; op1 =   op1 < tmp  ? tmp : op1; } ((void)0) ; return op1;}     static inline   DWORD    MAX_DWORD  (BOOL EN, BOOL *ENO , UINT param_count,   DWORD   op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0    ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  ( ap  = ((__gnuc_va_list) __builtin_next_arg (  op1 ))) ; for (i = 0; i < param_count - 1; i++){   DWORD   tmp = ( ap  = (__gnuc_va_list) ((char *) ( ap ) + (((sizeof (   DWORD     ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ),	*((  DWORD     *) (void *) ((char *) ( ap ) - (((sizeof (   DWORD     ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ))) ; op1 =   op1 < tmp  ? tmp : op1; } ((void)0) ; return op1;}  static inline   DWORD    MAX__DWORD__DWORD  (BOOL EN, BOOL *ENO , UINT param_count,   DWORD   op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0    ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  ( ap  = ((__gnuc_va_list) __builtin_next_arg (  op1 ))) ; for (i = 0; i < param_count - 1; i++){   DWORD   tmp = ( ap  = (__gnuc_va_list) ((char *) ( ap ) + (((sizeof (   DWORD     ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ),	*((  DWORD     *) (void *) ((char *) ( ap ) - (((sizeof (   DWORD     ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ))) ; op1 =   op1 < tmp  ? tmp : op1; } ((void)0) ; return op1;}     static inline   LWORD    MAX_LWORD  (BOOL EN, BOOL *ENO , UINT param_count,   LWORD   op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0    ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  ( ap  = ((__gnuc_va_list) __builtin_next_arg (  op1 ))) ; for (i = 0; i < param_count - 1; i++){   LWORD   tmp = ( ap  = (__gnuc_va_list) ((char *) ( ap ) + (((sizeof (   LWORD     ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ),	*((  LWORD     *) (void *) ((char *) ( ap ) - (((sizeof (   LWORD     ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ))) ; op1 =   op1 < tmp  ? tmp : op1; } ((void)0) ; return op1;}  static inline   LWORD    MAX__LWORD__LWORD  (BOOL EN, BOOL *ENO , UINT param_count,   LWORD   op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0    ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  ( ap  = ((__gnuc_va_list) __builtin_next_arg (  op1 ))) ; for (i = 0; i < param_count - 1; i++){   LWORD   tmp = ( ap  = (__gnuc_va_list) ((char *) ( ap ) + (((sizeof (   LWORD     ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ),	*((  LWORD     *) (void *) ((char *) ( ap ) - (((sizeof (   LWORD     ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ))) ; op1 =   op1 < tmp  ? tmp : op1; } ((void)0) ; return op1;}     static inline   BOOL    MAX_BOOL  (BOOL EN, BOOL *ENO , UINT param_count,   BOOL   op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0    ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  ( ap  = ((__gnuc_va_list) __builtin_next_arg (  op1 ))) ; for (i = 0; i < param_count - 1; i++){   BOOL   tmp = ( ap  = (__gnuc_va_list) ((char *) ( ap ) + (((sizeof (   DWORD     ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ),	*((  DWORD     *) (void *) ((char *) ( ap ) - (((sizeof (   DWORD     ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ))) ; op1 =   op1 < tmp  ? tmp : op1; } ((void)0) ; return op1;}  static inline   BOOL    MAX__BOOL__BOOL  (BOOL EN, BOOL *ENO , UINT param_count,   BOOL   op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0    ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  ( ap  = ((__gnuc_va_list) __builtin_next_arg (  op1 ))) ; for (i = 0; i < param_count - 1; i++){   BOOL   tmp = ( ap  = (__gnuc_va_list) ((char *) ( ap ) + (((sizeof (   DWORD     ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ),	*((  DWORD     *) (void *) ((char *) ( ap ) - (((sizeof (   DWORD     ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ))) ; op1 =   op1 < tmp  ? tmp : op1; } ((void)0) ; return op1;}   
  static inline   REAL    MAX_REAL  (BOOL EN, BOOL *ENO , UINT param_count,   REAL   op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0    ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  ( ap  = ((__gnuc_va_list) __builtin_next_arg (  op1 ))) ; for (i = 0; i < param_count - 1; i++){   REAL   tmp = ( ap  = (__gnuc_va_list) ((char *) ( ap ) + (((sizeof (   LREAL     ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ),	*((  LREAL     *) (void *) ((char *) ( ap ) - (((sizeof (   LREAL     ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ))) ; op1 =   op1 < tmp  ? tmp : op1; } ((void)0) ; return op1;}  static inline   REAL    MAX__REAL__REAL  (BOOL EN, BOOL *ENO , UINT param_count,   REAL   op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0    ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  ( ap  = ((__gnuc_va_list) __builtin_next_arg (  op1 ))) ; for (i = 0; i < param_count - 1; i++){   REAL   tmp = ( ap  = (__gnuc_va_list) ((char *) ( ap ) + (((sizeof (   LREAL     ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ),	*((  LREAL     *) (void *) ((char *) ( ap ) - (((sizeof (   LREAL     ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ))) ; op1 =   op1 < tmp  ? tmp : op1; } ((void)0) ; return op1;}     static inline   LREAL    MAX_LREAL  (BOOL EN, BOOL *ENO , UINT param_count,   LREAL   op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0    ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  ( ap  = ((__gnuc_va_list) __builtin_next_arg (  op1 ))) ; for (i = 0; i < param_count - 1; i++){   LREAL   tmp = ( ap  = (__gnuc_va_list) ((char *) ( ap ) + (((sizeof (   LREAL     ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ),	*((  LREAL     *) (void *) ((char *) ( ap ) - (((sizeof (   LREAL     ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ))) ; op1 =   op1 < tmp  ? tmp : op1; } ((void)0) ; return op1;}  static inline   LREAL    MAX__LREAL__LREAL  (BOOL EN, BOOL *ENO , UINT param_count,   LREAL   op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0    ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  ( ap  = ((__gnuc_va_list) __builtin_next_arg (  op1 ))) ; for (i = 0; i < param_count - 1; i++){   LREAL   tmp = ( ap  = (__gnuc_va_list) ((char *) ( ap ) + (((sizeof (   LREAL     ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ),	*((  LREAL     *) (void *) ((char *) ( ap ) - (((sizeof (   LREAL     ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ))) ; op1 =   op1 < tmp  ? tmp : op1; } ((void)0) ; return op1;}       static inline   SINT    MAX_SINT  (BOOL EN, BOOL *ENO , UINT param_count,   SINT   op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0    ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  ( ap  = ((__gnuc_va_list) __builtin_next_arg (  op1 ))) ; for (i = 0; i < param_count - 1; i++){   SINT   tmp = ( ap  = (__gnuc_va_list) ((char *) ( ap ) + (((sizeof (   DINT     ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ),	*((  DINT     *) (void *) ((char *) ( ap ) - (((sizeof (   DINT     ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ))) ; op1 =   op1 < tmp  ? tmp : op1; } ((void)0) ; return op1;}  static inline   SINT    MAX__SINT__SINT  (BOOL EN, BOOL *ENO , UINT param_count,   SINT   op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0    ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  ( ap  = ((__gnuc_va_list) __builtin_next_arg (  op1 ))) ; for (i = 0; i < param_count - 1; i++){   SINT   tmp = ( ap  = (__gnuc_va_list) ((char *) ( ap ) + (((sizeof (   DINT     ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ),	*((  DINT     *) (void *) ((char *) ( ap ) - (((sizeof (   DINT     ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ))) ; op1 =   op1 < tmp  ? tmp : op1; } ((void)0) ; return op1;}      static inline   INT    MAX_INT  (BOOL EN, BOOL *ENO , UINT param_count,   INT   op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0    ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  ( ap  = ((__gnuc_va_list) __builtin_next_arg (  op1 ))) ; for (i = 0; i < param_count - 1; i++){   INT   tmp = ( ap  = (__gnuc_va_list) ((char *) ( ap ) + (((sizeof (   DINT     ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ),	*((  DINT     *) (void *) ((char *) ( ap ) - (((sizeof (   DINT     ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ))) ; op1 =   op1 < tmp  ? tmp : op1; } ((void)0) ; return op1;}  static inline   INT    MAX__INT__INT  (BOOL EN, BOOL *ENO , UINT param_count,   INT   op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0    ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  ( ap  = ((__gnuc_va_list) __builtin_next_arg (  op1 ))) ; for (i = 0; i < param_count - 1; i++){   INT   tmp = ( ap  = (__gnuc_va_list) ((char *) ( ap ) + (((sizeof (   DINT     ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ),	*((  DINT     *) (void *) ((char *) ( ap ) - (((sizeof (   DINT     ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ))) ; op1 =   op1 < tmp  ? tmp : op1; } ((void)0) ; return op1;}      static inline   DINT    MAX_DINT  (BOOL EN, BOOL *ENO , UINT param_count,   DINT   op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0    ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  ( ap  = ((__gnuc_va_list) __builtin_next_arg (  op1 ))) ; for (i = 0; i < param_count - 1; i++){   DINT   tmp = ( ap  = (__gnuc_va_list) ((char *) ( ap ) + (((sizeof (   DINT     ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ),	*((  DINT     *) (void *) ((char *) ( ap ) - (((sizeof (   DINT     ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ))) ; op1 =   op1 < tmp  ? tmp : op1; } ((void)0) ; return op1;}  static inline   DINT    MAX__DINT__DINT  (BOOL EN, BOOL *ENO , UINT param_count,   DINT   op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0    ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  ( ap  = ((__gnuc_va_list) __builtin_next_arg (  op1 ))) ; for (i = 0; i < param_count - 1; i++){   DINT   tmp = ( ap  = (__gnuc_va_list) ((char *) ( ap ) + (((sizeof (   DINT     ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ),	*((  DINT     *) (void *) ((char *) ( ap ) - (((sizeof (   DINT     ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ))) ; op1 =   op1 < tmp  ? tmp : op1; } ((void)0) ; return op1;}      static inline   LINT    MAX_LINT  (BOOL EN, BOOL *ENO , UINT param_count,   LINT   op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0    ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  ( ap  = ((__gnuc_va_list) __builtin_next_arg (  op1 ))) ; for (i = 0; i < param_count - 1; i++){   LINT   tmp = ( ap  = (__gnuc_va_list) ((char *) ( ap ) + (((sizeof (   LINT     ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ),	*((  LINT     *) (void *) ((char *) ( ap ) - (((sizeof (   LINT     ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ))) ; op1 =   op1 < tmp  ? tmp : op1; } ((void)0) ; return op1;}  static inline   LINT    MAX__LINT__LINT  (BOOL EN, BOOL *ENO , UINT param_count,   LINT   op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0    ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  ( ap  = ((__gnuc_va_list) __builtin_next_arg (  op1 ))) ; for (i = 0; i < param_count - 1; i++){   LINT   tmp = ( ap  = (__gnuc_va_list) ((char *) ( ap ) + (((sizeof (   LINT     ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ),	*((  LINT     *) (void *) ((char *) ( ap ) - (((sizeof (   LINT     ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ))) ; op1 =   op1 < tmp  ? tmp : op1; } ((void)0) ; return op1;}       static inline   USINT    MAX_USINT  (BOOL EN, BOOL *ENO , UINT param_count,   USINT   op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0    ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  ( ap  = ((__gnuc_va_list) __builtin_next_arg (  op1 ))) ; for (i = 0; i < param_count - 1; i++){   USINT   tmp = ( ap  = (__gnuc_va_list) ((char *) ( ap ) + (((sizeof (   UDINT     ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ),	*((  UDINT     *) (void *) ((char *) ( ap ) - (((sizeof (   UDINT     ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ))) ; op1 =   op1 < tmp  ? tmp : op1; } ((void)0) ; return op1;}  static inline   USINT    MAX__USINT__USINT  (BOOL EN, BOOL *ENO , UINT param_count,   USINT   op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0    ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  ( ap  = ((__gnuc_va_list) __builtin_next_arg (  op1 ))) ; for (i = 0; i < param_count - 1; i++){   USINT   tmp = ( ap  = (__gnuc_va_list) ((char *) ( ap ) + (((sizeof (   UDINT     ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ),	*((  UDINT     *) (void *) ((char *) ( ap ) - (((sizeof (   UDINT     ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ))) ; op1 =   op1 < tmp  ? tmp : op1; } ((void)0) ; return op1;}      static inline   UINT    MAX_UINT  (BOOL EN, BOOL *ENO , UINT param_count,   UINT   op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0    ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  ( ap  = ((__gnuc_va_list) __builtin_next_arg (  op1 ))) ; for (i = 0; i < param_count - 1; i++){   UINT   tmp = ( ap  = (__gnuc_va_list) ((char *) ( ap ) + (((sizeof (   UDINT     ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ),	*((  UDINT     *) (void *) ((char *) ( ap ) - (((sizeof (   UDINT     ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ))) ; op1 =   op1 < tmp  ? tmp : op1; } ((void)0) ; return op1;}  static inline   UINT    MAX__UINT__UINT  (BOOL EN, BOOL *ENO , UINT param_count,   UINT   op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0    ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  ( ap  = ((__gnuc_va_list) __builtin_next_arg (  op1 ))) ; for (i = 0; i < param_count - 1; i++){   UINT   tmp = ( ap  = (__gnuc_va_list) ((char *) ( ap ) + (((sizeof (   UDINT     ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ),	*((  UDINT     *) (void *) ((char *) ( ap ) - (((sizeof (   UDINT     ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ))) ; op1 =   op1 < tmp  ? tmp : op1; } ((void)0) ; return op1;}      static inline   UDINT    MAX_UDINT  (BOOL EN, BOOL *ENO , UINT param_count,   UDINT   op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0    ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  ( ap  = ((__gnuc_va_list) __builtin_next_arg (  op1 ))) ; for (i = 0; i < param_count - 1; i++){   UDINT   tmp = ( ap  = (__gnuc_va_list) ((char *) ( ap ) + (((sizeof (   UDINT     ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ),	*((  UDINT     *) (void *) ((char *) ( ap ) - (((sizeof (   UDINT     ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ))) ; op1 =   op1 < tmp  ? tmp : op1; } ((void)0) ; return op1;}  static inline   UDINT    MAX__UDINT__UDINT  (BOOL EN, BOOL *ENO , UINT param_count,   UDINT   op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0    ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  ( ap  = ((__gnuc_va_list) __builtin_next_arg (  op1 ))) ; for (i = 0; i < param_count - 1; i++){   UDINT   tmp = ( ap  = (__gnuc_va_list) ((char *) ( ap ) + (((sizeof (   UDINT     ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ),	*((  UDINT     *) (void *) ((char *) ( ap ) - (((sizeof (   UDINT     ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ))) ; op1 =   op1 < tmp  ? tmp : op1; } ((void)0) ; return op1;}      static inline   ULINT    MAX_ULINT  (BOOL EN, BOOL *ENO , UINT param_count,   ULINT   op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0    ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  ( ap  = ((__gnuc_va_list) __builtin_next_arg (  op1 ))) ; for (i = 0; i < param_count - 1; i++){   ULINT   tmp = ( ap  = (__gnuc_va_list) ((char *) ( ap ) + (((sizeof (   ULINT     ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ),	*((  ULINT     *) (void *) ((char *) ( ap ) - (((sizeof (   ULINT     ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ))) ; op1 =   op1 < tmp  ? tmp : op1; } ((void)0) ; return op1;}  static inline   ULINT    MAX__ULINT__ULINT  (BOOL EN, BOOL *ENO , UINT param_count,   ULINT   op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0    ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  ( ap  = ((__gnuc_va_list) __builtin_next_arg (  op1 ))) ; for (i = 0; i < param_count - 1; i++){   ULINT   tmp = ( ap  = (__gnuc_va_list) ((char *) ( ap ) + (((sizeof (   ULINT     ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ),	*((  ULINT     *) (void *) ((char *) ( ap ) - (((sizeof (   ULINT     ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ))) ; op1 =   op1 < tmp  ? tmp : op1; } ((void)0) ; return op1;}     


 	



 static inline    DATE    MAX_DATE  (BOOL EN, BOOL *ENO , UINT param_count,    DATE   op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return (DATE){0,0}    ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  ( ap  = ((__gnuc_va_list) __builtin_next_arg (  op1 ))) ; for (i = 0; i < param_count - 1; i++){    DATE   tmp = ( ap  = (__gnuc_va_list) ((char *) ( ap ) + (((sizeof (   DATE     ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ),	*((  DATE     *) (void *) ((char *) ( ap ) - (((sizeof (   DATE     ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ))) ; op1 =   (  tmp .tv_sec ==  op1 .tv_sec ?  op1 .tv_nsec -   tmp .tv_nsec :  op1 .tv_sec -   tmp .tv_sec)  < 0  ? tmp : op1; } ((void)0) ; return op1;}  static inline    DATE    MAX__DATE__DATE  (BOOL EN, BOOL *ENO , UINT param_count,    DATE   op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return (DATE){0,0}    ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  ( ap  = ((__gnuc_va_list) __builtin_next_arg (  op1 ))) ; for (i = 0; i < param_count - 1; i++){    DATE   tmp = ( ap  = (__gnuc_va_list) ((char *) ( ap ) + (((sizeof (   DATE     ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ),	*((  DATE     *) (void *) ((char *) ( ap ) - (((sizeof (   DATE     ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ))) ; op1 =   (  tmp .tv_sec ==  op1 .tv_sec ?  op1 .tv_nsec -   tmp .tv_nsec :  op1 .tv_sec -   tmp .tv_sec)  < 0  ? tmp : op1; } ((void)0) ; return op1;}    static inline    TOD    MAX_TOD  (BOOL EN, BOOL *ENO , UINT param_count,    TOD   op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return (TOD){0,0}    ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  ( ap  = ((__gnuc_va_list) __builtin_next_arg (  op1 ))) ; for (i = 0; i < param_count - 1; i++){    TOD   tmp = ( ap  = (__gnuc_va_list) ((char *) ( ap ) + (((sizeof (   TOD     ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ),	*((  TOD     *) (void *) ((char *) ( ap ) - (((sizeof (   TOD     ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ))) ; op1 =   (  tmp .tv_sec ==  op1 .tv_sec ?  op1 .tv_nsec -   tmp .tv_nsec :  op1 .tv_sec -   tmp .tv_sec)  < 0  ? tmp : op1; } ((void)0) ; return op1;}  static inline    TOD    MAX__TOD__TOD  (BOOL EN, BOOL *ENO , UINT param_count,    TOD   op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return (TOD){0,0}    ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  ( ap  = ((__gnuc_va_list) __builtin_next_arg (  op1 ))) ; for (i = 0; i < param_count - 1; i++){    TOD   tmp = ( ap  = (__gnuc_va_list) ((char *) ( ap ) + (((sizeof (   TOD     ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ),	*((  TOD     *) (void *) ((char *) ( ap ) - (((sizeof (   TOD     ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ))) ; op1 =   (  tmp .tv_sec ==  op1 .tv_sec ?  op1 .tv_nsec -   tmp .tv_nsec :  op1 .tv_sec -   tmp .tv_sec)  < 0  ? tmp : op1; } ((void)0) ; return op1;}    static inline    DT    MAX_DT  (BOOL EN, BOOL *ENO , UINT param_count,    DT   op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return (DT){0,0}    ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  ( ap  = ((__gnuc_va_list) __builtin_next_arg (  op1 ))) ; for (i = 0; i < param_count - 1; i++){    DT   tmp = ( ap  = (__gnuc_va_list) ((char *) ( ap ) + (((sizeof (   DT     ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ),	*((  DT     *) (void *) ((char *) ( ap ) - (((sizeof (   DT     ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ))) ; op1 =   (  tmp .tv_sec ==  op1 .tv_sec ?  op1 .tv_nsec -   tmp .tv_nsec :  op1 .tv_sec -   tmp .tv_sec)  < 0  ? tmp : op1; } ((void)0) ; return op1;}  static inline    DT    MAX__DT__DT  (BOOL EN, BOOL *ENO , UINT param_count,    DT   op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return (DT){0,0}    ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  ( ap  = ((__gnuc_va_list) __builtin_next_arg (  op1 ))) ; for (i = 0; i < param_count - 1; i++){    DT   tmp = ( ap  = (__gnuc_va_list) ((char *) ( ap ) + (((sizeof (   DT     ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ),	*((  DT     *) (void *) ((char *) ( ap ) - (((sizeof (   DT     ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ))) ; op1 =   (  tmp .tv_sec ==  op1 .tv_sec ?  op1 .tv_nsec -   tmp .tv_nsec :  op1 .tv_sec -   tmp .tv_sec)  < 0  ? tmp : op1; } ((void)0) ; return op1;}   
static inline    TIME    MAX_TIME  (BOOL EN, BOOL *ENO , UINT param_count,    TIME   op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return (TIME){0,0}    ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  ( ap  = ((__gnuc_va_list) __builtin_next_arg (  op1 ))) ; for (i = 0; i < param_count - 1; i++){    TIME   tmp = ( ap  = (__gnuc_va_list) ((char *) ( ap ) + (((sizeof (   TIME     ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ),	*((  TIME     *) (void *) ((char *) ( ap ) - (((sizeof (   TIME     ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ))) ; op1 =   (  tmp .tv_sec ==  op1 .tv_sec ?  op1 .tv_nsec -   tmp .tv_nsec :  op1 .tv_sec -   tmp .tv_sec)  < 0  ? tmp : op1; } ((void)0) ; return op1;}  static inline    TIME    MAX__TIME__TIME  (BOOL EN, BOOL *ENO , UINT param_count,    TIME   op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return (TIME){0,0}    ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  ( ap  = ((__gnuc_va_list) __builtin_next_arg (  op1 ))) ; for (i = 0; i < param_count - 1; i++){    TIME   tmp = ( ap  = (__gnuc_va_list) ((char *) ( ap ) + (((sizeof (   TIME     ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ),	*((  TIME     *) (void *) ((char *) ( ap ) - (((sizeof (   TIME     ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ))) ; op1 =   (  tmp .tv_sec ==  op1 .tv_sec ?  op1 .tv_nsec -   tmp .tv_nsec :  op1 .tv_sec -   tmp .tv_sec)  < 0  ? tmp : op1; } ((void)0) ; return op1;}  




 	
static inline   STRING   MAX_STRING (BOOL EN, BOOL *ENO , UINT param_count,   STRING  op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return (STRING){0,""}   ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  ( ap  = ((__gnuc_va_list) __builtin_next_arg (  op1 ))) ; for (i = 0; i < param_count - 1; i++){   STRING  tmp = ( ap  = (__gnuc_va_list) ((char *) ( ap ) + (((sizeof (   STRING    ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ),	*((  STRING    *) (void *) ((char *) ( ap ) - (((sizeof (   STRING    ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ))) ; op1 =   memcmp((char*)& op1 .body,(char*)& tmp .body,  op1 .len <  tmp .len ?  op1 .len :  tmp .len)  < 0  ? tmp : op1; } ((void)0) ; return op1;}   
static inline   STRING   MAX__STRING__STRING (BOOL EN, BOOL *ENO , UINT param_count,   STRING  op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return (STRING){0,""}   ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  ( ap  = ((__gnuc_va_list) __builtin_next_arg (  op1 ))) ; for (i = 0; i < param_count - 1; i++){   STRING  tmp = ( ap  = (__gnuc_va_list) ((char *) ( ap ) + (((sizeof (   STRING    ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ),	*((  STRING    *) (void *) ((char *) ( ap ) - (((sizeof (   STRING    ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ))) ; op1 =   memcmp((char*)& op1 .body,(char*)& tmp .body,  op1 .len <  tmp .len ?  op1 .len :  tmp .len)  < 0  ? tmp : op1; } ((void)0) ; return op1;}   

     
     
     
 	



 static inline    BYTE    MIN_BYTE  (BOOL EN, BOOL *ENO , UINT param_count,    BYTE   op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0    ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  ( ap  = ((__gnuc_va_list) __builtin_next_arg (  op1 ))) ; for (i = 0; i < param_count - 1; i++){    BYTE   tmp = ( ap  = (__gnuc_va_list) ((char *) ( ap ) + (((sizeof (   DWORD     ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ),	*((  DWORD     *) (void *) ((char *) ( ap ) - (((sizeof (   DWORD     ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ))) ; op1 =   op1 > tmp  ? tmp : op1; } ((void)0) ; return op1;}  static inline    BYTE    MIN__BYTE__BYTE  (BOOL EN, BOOL *ENO , UINT param_count,    BYTE   op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0    ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  ( ap  = ((__gnuc_va_list) __builtin_next_arg (  op1 ))) ; for (i = 0; i < param_count - 1; i++){    BYTE   tmp = ( ap  = (__gnuc_va_list) ((char *) ( ap ) + (((sizeof (   DWORD     ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ),	*((  DWORD     *) (void *) ((char *) ( ap ) - (((sizeof (   DWORD     ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ))) ; op1 =   op1 > tmp  ? tmp : op1; } ((void)0) ; return op1;}    static inline    WORD    MIN_WORD  (BOOL EN, BOOL *ENO , UINT param_count,    WORD   op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0    ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  ( ap  = ((__gnuc_va_list) __builtin_next_arg (  op1 ))) ; for (i = 0; i < param_count - 1; i++){    WORD   tmp = ( ap  = (__gnuc_va_list) ((char *) ( ap ) + (((sizeof (   DWORD     ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ),	*((  DWORD     *) (void *) ((char *) ( ap ) - (((sizeof (   DWORD     ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ))) ; op1 =   op1 > tmp  ? tmp : op1; } ((void)0) ; return op1;}  static inline    WORD    MIN__WORD__WORD  (BOOL EN, BOOL *ENO , UINT param_count,    WORD   op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0    ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  ( ap  = ((__gnuc_va_list) __builtin_next_arg (  op1 ))) ; for (i = 0; i < param_count - 1; i++){    WORD   tmp = ( ap  = (__gnuc_va_list) ((char *) ( ap ) + (((sizeof (   DWORD     ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ),	*((  DWORD     *) (void *) ((char *) ( ap ) - (((sizeof (   DWORD     ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ))) ; op1 =   op1 > tmp  ? tmp : op1; } ((void)0) ; return op1;}    static inline    DWORD    MIN_DWORD  (BOOL EN, BOOL *ENO , UINT param_count,    DWORD   op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0    ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  ( ap  = ((__gnuc_va_list) __builtin_next_arg (  op1 ))) ; for (i = 0; i < param_count - 1; i++){    DWORD   tmp = ( ap  = (__gnuc_va_list) ((char *) ( ap ) + (((sizeof (   DWORD     ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ),	*((  DWORD     *) (void *) ((char *) ( ap ) - (((sizeof (   DWORD     ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ))) ; op1 =   op1 > tmp  ? tmp : op1; } ((void)0) ; return op1;}  static inline    DWORD    MIN__DWORD__DWORD  (BOOL EN, BOOL *ENO , UINT param_count,    DWORD   op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0    ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  ( ap  = ((__gnuc_va_list) __builtin_next_arg (  op1 ))) ; for (i = 0; i < param_count - 1; i++){    DWORD   tmp = ( ap  = (__gnuc_va_list) ((char *) ( ap ) + (((sizeof (   DWORD     ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ),	*((  DWORD     *) (void *) ((char *) ( ap ) - (((sizeof (   DWORD     ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ))) ; op1 =   op1 > tmp  ? tmp : op1; } ((void)0) ; return op1;}    static inline    LWORD    MIN_LWORD  (BOOL EN, BOOL *ENO , UINT param_count,    LWORD   op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0    ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  ( ap  = ((__gnuc_va_list) __builtin_next_arg (  op1 ))) ; for (i = 0; i < param_count - 1; i++){    LWORD   tmp = ( ap  = (__gnuc_va_list) ((char *) ( ap ) + (((sizeof (   LWORD     ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ),	*((  LWORD     *) (void *) ((char *) ( ap ) - (((sizeof (   LWORD     ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ))) ; op1 =   op1 > tmp  ? tmp : op1; } ((void)0) ; return op1;}  static inline    LWORD    MIN__LWORD__LWORD  (BOOL EN, BOOL *ENO , UINT param_count,    LWORD   op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0    ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  ( ap  = ((__gnuc_va_list) __builtin_next_arg (  op1 ))) ; for (i = 0; i < param_count - 1; i++){    LWORD   tmp = ( ap  = (__gnuc_va_list) ((char *) ( ap ) + (((sizeof (   LWORD     ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ),	*((  LWORD     *) (void *) ((char *) ( ap ) - (((sizeof (   LWORD     ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ))) ; op1 =   op1 > tmp  ? tmp : op1; } ((void)0) ; return op1;}   
  static inline    REAL    MIN_REAL  (BOOL EN, BOOL *ENO , UINT param_count,    REAL   op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0    ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  ( ap  = ((__gnuc_va_list) __builtin_next_arg (  op1 ))) ; for (i = 0; i < param_count - 1; i++){    REAL   tmp = ( ap  = (__gnuc_va_list) ((char *) ( ap ) + (((sizeof (   LREAL     ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ),	*((  LREAL     *) (void *) ((char *) ( ap ) - (((sizeof (   LREAL     ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ))) ; op1 =   op1 > tmp  ? tmp : op1; } ((void)0) ; return op1;}  static inline    REAL    MIN__REAL__REAL  (BOOL EN, BOOL *ENO , UINT param_count,    REAL   op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0    ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  ( ap  = ((__gnuc_va_list) __builtin_next_arg (  op1 ))) ; for (i = 0; i < param_count - 1; i++){    REAL   tmp = ( ap  = (__gnuc_va_list) ((char *) ( ap ) + (((sizeof (   LREAL     ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ),	*((  LREAL     *) (void *) ((char *) ( ap ) - (((sizeof (   LREAL     ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ))) ; op1 =   op1 > tmp  ? tmp : op1; } ((void)0) ; return op1;}     static inline    LREAL    MIN_LREAL  (BOOL EN, BOOL *ENO , UINT param_count,    LREAL   op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0    ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  ( ap  = ((__gnuc_va_list) __builtin_next_arg (  op1 ))) ; for (i = 0; i < param_count - 1; i++){    LREAL   tmp = ( ap  = (__gnuc_va_list) ((char *) ( ap ) + (((sizeof (   LREAL     ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ),	*((  LREAL     *) (void *) ((char *) ( ap ) - (((sizeof (   LREAL     ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ))) ; op1 =   op1 > tmp  ? tmp : op1; } ((void)0) ; return op1;}  static inline    LREAL    MIN__LREAL__LREAL  (BOOL EN, BOOL *ENO , UINT param_count,    LREAL   op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0    ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  ( ap  = ((__gnuc_va_list) __builtin_next_arg (  op1 ))) ; for (i = 0; i < param_count - 1; i++){    LREAL   tmp = ( ap  = (__gnuc_va_list) ((char *) ( ap ) + (((sizeof (   LREAL     ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ),	*((  LREAL     *) (void *) ((char *) ( ap ) - (((sizeof (   LREAL     ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ))) ; op1 =   op1 > tmp  ? tmp : op1; } ((void)0) ; return op1;}       static inline    SINT    MIN_SINT  (BOOL EN, BOOL *ENO , UINT param_count,    SINT   op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0    ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  ( ap  = ((__gnuc_va_list) __builtin_next_arg (  op1 ))) ; for (i = 0; i < param_count - 1; i++){    SINT   tmp = ( ap  = (__gnuc_va_list) ((char *) ( ap ) + (((sizeof (   DINT     ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ),	*((  DINT     *) (void *) ((char *) ( ap ) - (((sizeof (   DINT     ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ))) ; op1 =   op1 > tmp  ? tmp : op1; } ((void)0) ; return op1;}  static inline    SINT    MIN__SINT__SINT  (BOOL EN, BOOL *ENO , UINT param_count,    SINT   op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0    ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  ( ap  = ((__gnuc_va_list) __builtin_next_arg (  op1 ))) ; for (i = 0; i < param_count - 1; i++){    SINT   tmp = ( ap  = (__gnuc_va_list) ((char *) ( ap ) + (((sizeof (   DINT     ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ),	*((  DINT     *) (void *) ((char *) ( ap ) - (((sizeof (   DINT     ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ))) ; op1 =   op1 > tmp  ? tmp : op1; } ((void)0) ; return op1;}      static inline    INT    MIN_INT  (BOOL EN, BOOL *ENO , UINT param_count,    INT   op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0    ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  ( ap  = ((__gnuc_va_list) __builtin_next_arg (  op1 ))) ; for (i = 0; i < param_count - 1; i++){    INT   tmp = ( ap  = (__gnuc_va_list) ((char *) ( ap ) + (((sizeof (   DINT     ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ),	*((  DINT     *) (void *) ((char *) ( ap ) - (((sizeof (   DINT     ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ))) ; op1 =   op1 > tmp  ? tmp : op1; } ((void)0) ; return op1;}  static inline    INT    MIN__INT__INT  (BOOL EN, BOOL *ENO , UINT param_count,    INT   op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0    ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  ( ap  = ((__gnuc_va_list) __builtin_next_arg (  op1 ))) ; for (i = 0; i < param_count - 1; i++){    INT   tmp = ( ap  = (__gnuc_va_list) ((char *) ( ap ) + (((sizeof (   DINT     ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ),	*((  DINT     *) (void *) ((char *) ( ap ) - (((sizeof (   DINT     ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ))) ; op1 =   op1 > tmp  ? tmp : op1; } ((void)0) ; return op1;}      static inline    DINT    MIN_DINT  (BOOL EN, BOOL *ENO , UINT param_count,    DINT   op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0    ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  ( ap  = ((__gnuc_va_list) __builtin_next_arg (  op1 ))) ; for (i = 0; i < param_count - 1; i++){    DINT   tmp = ( ap  = (__gnuc_va_list) ((char *) ( ap ) + (((sizeof (   DINT     ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ),	*((  DINT     *) (void *) ((char *) ( ap ) - (((sizeof (   DINT     ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ))) ; op1 =   op1 > tmp  ? tmp : op1; } ((void)0) ; return op1;}  static inline    DINT    MIN__DINT__DINT  (BOOL EN, BOOL *ENO , UINT param_count,    DINT   op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0    ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  ( ap  = ((__gnuc_va_list) __builtin_next_arg (  op1 ))) ; for (i = 0; i < param_count - 1; i++){    DINT   tmp = ( ap  = (__gnuc_va_list) ((char *) ( ap ) + (((sizeof (   DINT     ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ),	*((  DINT     *) (void *) ((char *) ( ap ) - (((sizeof (   DINT     ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ))) ; op1 =   op1 > tmp  ? tmp : op1; } ((void)0) ; return op1;}      static inline    LINT    MIN_LINT  (BOOL EN, BOOL *ENO , UINT param_count,    LINT   op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0    ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  ( ap  = ((__gnuc_va_list) __builtin_next_arg (  op1 ))) ; for (i = 0; i < param_count - 1; i++){    LINT   tmp = ( ap  = (__gnuc_va_list) ((char *) ( ap ) + (((sizeof (   LINT     ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ),	*((  LINT     *) (void *) ((char *) ( ap ) - (((sizeof (   LINT     ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ))) ; op1 =   op1 > tmp  ? tmp : op1; } ((void)0) ; return op1;}  static inline    LINT    MIN__LINT__LINT  (BOOL EN, BOOL *ENO , UINT param_count,    LINT   op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0    ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  ( ap  = ((__gnuc_va_list) __builtin_next_arg (  op1 ))) ; for (i = 0; i < param_count - 1; i++){    LINT   tmp = ( ap  = (__gnuc_va_list) ((char *) ( ap ) + (((sizeof (   LINT     ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ),	*((  LINT     *) (void *) ((char *) ( ap ) - (((sizeof (   LINT     ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ))) ; op1 =   op1 > tmp  ? tmp : op1; } ((void)0) ; return op1;}       static inline    USINT    MIN_USINT  (BOOL EN, BOOL *ENO , UINT param_count,    USINT   op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0    ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  ( ap  = ((__gnuc_va_list) __builtin_next_arg (  op1 ))) ; for (i = 0; i < param_count - 1; i++){    USINT   tmp = ( ap  = (__gnuc_va_list) ((char *) ( ap ) + (((sizeof (   UDINT     ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ),	*((  UDINT     *) (void *) ((char *) ( ap ) - (((sizeof (   UDINT     ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ))) ; op1 =   op1 > tmp  ? tmp : op1; } ((void)0) ; return op1;}  static inline    USINT    MIN__USINT__USINT  (BOOL EN, BOOL *ENO , UINT param_count,    USINT   op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0    ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  ( ap  = ((__gnuc_va_list) __builtin_next_arg (  op1 ))) ; for (i = 0; i < param_count - 1; i++){    USINT   tmp = ( ap  = (__gnuc_va_list) ((char *) ( ap ) + (((sizeof (   UDINT     ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ),	*((  UDINT     *) (void *) ((char *) ( ap ) - (((sizeof (   UDINT     ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ))) ; op1 =   op1 > tmp  ? tmp : op1; } ((void)0) ; return op1;}      static inline    UINT    MIN_UINT  (BOOL EN, BOOL *ENO , UINT param_count,    UINT   op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0    ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  ( ap  = ((__gnuc_va_list) __builtin_next_arg (  op1 ))) ; for (i = 0; i < param_count - 1; i++){    UINT   tmp = ( ap  = (__gnuc_va_list) ((char *) ( ap ) + (((sizeof (   UDINT     ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ),	*((  UDINT     *) (void *) ((char *) ( ap ) - (((sizeof (   UDINT     ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ))) ; op1 =   op1 > tmp  ? tmp : op1; } ((void)0) ; return op1;}  static inline    UINT    MIN__UINT__UINT  (BOOL EN, BOOL *ENO , UINT param_count,    UINT   op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0    ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  ( ap  = ((__gnuc_va_list) __builtin_next_arg (  op1 ))) ; for (i = 0; i < param_count - 1; i++){    UINT   tmp = ( ap  = (__gnuc_va_list) ((char *) ( ap ) + (((sizeof (   UDINT     ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ),	*((  UDINT     *) (void *) ((char *) ( ap ) - (((sizeof (   UDINT     ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ))) ; op1 =   op1 > tmp  ? tmp : op1; } ((void)0) ; return op1;}      static inline    UDINT    MIN_UDINT  (BOOL EN, BOOL *ENO , UINT param_count,    UDINT   op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0    ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  ( ap  = ((__gnuc_va_list) __builtin_next_arg (  op1 ))) ; for (i = 0; i < param_count - 1; i++){    UDINT   tmp = ( ap  = (__gnuc_va_list) ((char *) ( ap ) + (((sizeof (   UDINT     ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ),	*((  UDINT     *) (void *) ((char *) ( ap ) - (((sizeof (   UDINT     ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ))) ; op1 =   op1 > tmp  ? tmp : op1; } ((void)0) ; return op1;}  static inline    UDINT    MIN__UDINT__UDINT  (BOOL EN, BOOL *ENO , UINT param_count,    UDINT   op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0    ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  ( ap  = ((__gnuc_va_list) __builtin_next_arg (  op1 ))) ; for (i = 0; i < param_count - 1; i++){    UDINT   tmp = ( ap  = (__gnuc_va_list) ((char *) ( ap ) + (((sizeof (   UDINT     ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ),	*((  UDINT     *) (void *) ((char *) ( ap ) - (((sizeof (   UDINT     ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ))) ; op1 =   op1 > tmp  ? tmp : op1; } ((void)0) ; return op1;}      static inline    ULINT    MIN_ULINT  (BOOL EN, BOOL *ENO , UINT param_count,    ULINT   op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0    ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  ( ap  = ((__gnuc_va_list) __builtin_next_arg (  op1 ))) ; for (i = 0; i < param_count - 1; i++){    ULINT   tmp = ( ap  = (__gnuc_va_list) ((char *) ( ap ) + (((sizeof (   ULINT     ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ),	*((  ULINT     *) (void *) ((char *) ( ap ) - (((sizeof (   ULINT     ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ))) ; op1 =   op1 > tmp  ? tmp : op1; } ((void)0) ; return op1;}  static inline    ULINT    MIN__ULINT__ULINT  (BOOL EN, BOOL *ENO , UINT param_count,    ULINT   op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0    ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  ( ap  = ((__gnuc_va_list) __builtin_next_arg (  op1 ))) ; for (i = 0; i < param_count - 1; i++){    ULINT   tmp = ( ap  = (__gnuc_va_list) ((char *) ( ap ) + (((sizeof (   ULINT     ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ),	*((  ULINT     *) (void *) ((char *) ( ap ) - (((sizeof (   ULINT     ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ))) ; op1 =   op1 > tmp  ? tmp : op1; } ((void)0) ; return op1;}     


 	



 static inline    DATE    MIN_DATE  (BOOL EN, BOOL *ENO , UINT param_count,    DATE   op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return (DATE){0,0}    ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  ( ap  = ((__gnuc_va_list) __builtin_next_arg (  op1 ))) ; for (i = 0; i < param_count - 1; i++){    DATE   tmp = ( ap  = (__gnuc_va_list) ((char *) ( ap ) + (((sizeof (   DATE     ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ),	*((  DATE     *) (void *) ((char *) ( ap ) - (((sizeof (   DATE     ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ))) ; op1 =   (  tmp .tv_sec ==  op1 .tv_sec ?  op1 .tv_nsec -   tmp .tv_nsec :  op1 .tv_sec -   tmp .tv_sec)  > 0  ? tmp : op1; } ((void)0) ; return op1;}  static inline    DATE    MIN__DATE__DATE  (BOOL EN, BOOL *ENO , UINT param_count,    DATE   op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return (DATE){0,0}    ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  ( ap  = ((__gnuc_va_list) __builtin_next_arg (  op1 ))) ; for (i = 0; i < param_count - 1; i++){    DATE   tmp = ( ap  = (__gnuc_va_list) ((char *) ( ap ) + (((sizeof (   DATE     ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ),	*((  DATE     *) (void *) ((char *) ( ap ) - (((sizeof (   DATE     ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ))) ; op1 =   (  tmp .tv_sec ==  op1 .tv_sec ?  op1 .tv_nsec -   tmp .tv_nsec :  op1 .tv_sec -   tmp .tv_sec)  > 0  ? tmp : op1; } ((void)0) ; return op1;}    static inline    TOD    MIN_TOD  (BOOL EN, BOOL *ENO , UINT param_count,    TOD   op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return (TOD){0,0}    ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  ( ap  = ((__gnuc_va_list) __builtin_next_arg (  op1 ))) ; for (i = 0; i < param_count - 1; i++){    TOD   tmp = ( ap  = (__gnuc_va_list) ((char *) ( ap ) + (((sizeof (   TOD     ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ),	*((  TOD     *) (void *) ((char *) ( ap ) - (((sizeof (   TOD     ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ))) ; op1 =   (  tmp .tv_sec ==  op1 .tv_sec ?  op1 .tv_nsec -   tmp .tv_nsec :  op1 .tv_sec -   tmp .tv_sec)  > 0  ? tmp : op1; } ((void)0) ; return op1;}  static inline    TOD    MIN__TOD__TOD  (BOOL EN, BOOL *ENO , UINT param_count,    TOD   op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return (TOD){0,0}    ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  ( ap  = ((__gnuc_va_list) __builtin_next_arg (  op1 ))) ; for (i = 0; i < param_count - 1; i++){    TOD   tmp = ( ap  = (__gnuc_va_list) ((char *) ( ap ) + (((sizeof (   TOD     ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ),	*((  TOD     *) (void *) ((char *) ( ap ) - (((sizeof (   TOD     ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ))) ; op1 =   (  tmp .tv_sec ==  op1 .tv_sec ?  op1 .tv_nsec -   tmp .tv_nsec :  op1 .tv_sec -   tmp .tv_sec)  > 0  ? tmp : op1; } ((void)0) ; return op1;}    static inline    DT    MIN_DT  (BOOL EN, BOOL *ENO , UINT param_count,    DT   op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return (DT){0,0}    ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  ( ap  = ((__gnuc_va_list) __builtin_next_arg (  op1 ))) ; for (i = 0; i < param_count - 1; i++){    DT   tmp = ( ap  = (__gnuc_va_list) ((char *) ( ap ) + (((sizeof (   DT     ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ),	*((  DT     *) (void *) ((char *) ( ap ) - (((sizeof (   DT     ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ))) ; op1 =   (  tmp .tv_sec ==  op1 .tv_sec ?  op1 .tv_nsec -   tmp .tv_nsec :  op1 .tv_sec -   tmp .tv_sec)  > 0  ? tmp : op1; } ((void)0) ; return op1;}  static inline    DT    MIN__DT__DT  (BOOL EN, BOOL *ENO , UINT param_count,    DT   op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return (DT){0,0}    ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  ( ap  = ((__gnuc_va_list) __builtin_next_arg (  op1 ))) ; for (i = 0; i < param_count - 1; i++){    DT   tmp = ( ap  = (__gnuc_va_list) ((char *) ( ap ) + (((sizeof (   DT     ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ),	*((  DT     *) (void *) ((char *) ( ap ) - (((sizeof (   DT     ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ))) ; op1 =   (  tmp .tv_sec ==  op1 .tv_sec ?  op1 .tv_nsec -   tmp .tv_nsec :  op1 .tv_sec -   tmp .tv_sec)  > 0  ? tmp : op1; } ((void)0) ; return op1;}   
static inline    TIME    MIN_TIME  (BOOL EN, BOOL *ENO , UINT param_count,    TIME   op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return (TIME){0,0}    ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  ( ap  = ((__gnuc_va_list) __builtin_next_arg (  op1 ))) ; for (i = 0; i < param_count - 1; i++){    TIME   tmp = ( ap  = (__gnuc_va_list) ((char *) ( ap ) + (((sizeof (   TIME     ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ),	*((  TIME     *) (void *) ((char *) ( ap ) - (((sizeof (   TIME     ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ))) ; op1 =   (  tmp .tv_sec ==  op1 .tv_sec ?  op1 .tv_nsec -   tmp .tv_nsec :  op1 .tv_sec -   tmp .tv_sec)  > 0  ? tmp : op1; } ((void)0) ; return op1;}  static inline    TIME    MIN__TIME__TIME  (BOOL EN, BOOL *ENO , UINT param_count,    TIME   op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return (TIME){0,0}    ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  ( ap  = ((__gnuc_va_list) __builtin_next_arg (  op1 ))) ; for (i = 0; i < param_count - 1; i++){    TIME   tmp = ( ap  = (__gnuc_va_list) ((char *) ( ap ) + (((sizeof (   TIME     ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ),	*((  TIME     *) (void *) ((char *) ( ap ) - (((sizeof (   TIME     ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ))) ; op1 =   (  tmp .tv_sec ==  op1 .tv_sec ?  op1 .tv_nsec -   tmp .tv_nsec :  op1 .tv_sec -   tmp .tv_sec)  > 0  ? tmp : op1; } ((void)0) ; return op1;}  


 
static inline   STRING   MIN_STRING (BOOL EN, BOOL *ENO , UINT param_count,   STRING  op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return (STRING){0,""}   ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  ( ap  = ((__gnuc_va_list) __builtin_next_arg (  op1 ))) ; for (i = 0; i < param_count - 1; i++){   STRING  tmp = ( ap  = (__gnuc_va_list) ((char *) ( ap ) + (((sizeof (   STRING    ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ),	*((  STRING    *) (void *) ((char *) ( ap ) - (((sizeof (   STRING    ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ))) ; op1 =   memcmp((char*)& op1 .body,(char*)& tmp .body,  op1 .len <  tmp .len ?  op1 .len :  tmp .len)  > 0  ? tmp : op1; } ((void)0) ; return op1;}   
static inline   STRING   MIN__STRING__STRING (BOOL EN, BOOL *ENO , UINT param_count,   STRING  op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return (STRING){0,""}   ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  ( ap  = ((__gnuc_va_list) __builtin_next_arg (  op1 ))) ; for (i = 0; i < param_count - 1; i++){   STRING  tmp = ( ap  = (__gnuc_va_list) ((char *) ( ap ) + (((sizeof (   STRING    ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ),	*((  STRING    *) (void *) ((char *) ( ap ) - (((sizeof (   STRING    ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ))) ; op1 =   memcmp((char*)& op1 .body,(char*)& tmp .body,  op1 .len <  tmp .len ?  op1 .len :  tmp .len)  > 0  ? tmp : op1; } ((void)0) ; return op1;}   

     
     
     

 

# 1513 "iec_std_lib.h"
 static inline  BYTE  LIMIT_BYTE (BOOL EN, BOOL *ENO ,  BYTE  MN,  BYTE  IN,  BYTE  MX){ if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0   ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  return IN > MN ? IN < MX ? IN : MX : MN;} static inline  BYTE  LIMIT__BYTE__BYTE__BYTE__BYTE (BOOL EN, BOOL *ENO ,  BYTE  MN,  BYTE  IN,  BYTE  MX){ if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0   ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  return IN > MN ? IN < MX ? IN : MX : MN;}   static inline  WORD  LIMIT_WORD (BOOL EN, BOOL *ENO ,  WORD  MN,  WORD  IN,  WORD  MX){ if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0   ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  return IN > MN ? IN < MX ? IN : MX : MN;} static inline  WORD  LIMIT__WORD__WORD__WORD__WORD (BOOL EN, BOOL *ENO ,  WORD  MN,  WORD  IN,  WORD  MX){ if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0   ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  return IN > MN ? IN < MX ? IN : MX : MN;}   static inline  DWORD  LIMIT_DWORD (BOOL EN, BOOL *ENO ,  DWORD  MN,  DWORD  IN,  DWORD  MX){ if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0   ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  return IN > MN ? IN < MX ? IN : MX : MN;} static inline  DWORD  LIMIT__DWORD__DWORD__DWORD__DWORD (BOOL EN, BOOL *ENO ,  DWORD  MN,  DWORD  IN,  DWORD  MX){ if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0   ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  return IN > MN ? IN < MX ? IN : MX : MN;}   static inline  LWORD  LIMIT_LWORD (BOOL EN, BOOL *ENO ,  LWORD  MN,  LWORD  IN,  LWORD  MX){ if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0   ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  return IN > MN ? IN < MX ? IN : MX : MN;} static inline  LWORD  LIMIT__LWORD__LWORD__LWORD__LWORD (BOOL EN, BOOL *ENO ,  LWORD  MN,  LWORD  IN,  LWORD  MX){ if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0   ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  return IN > MN ? IN < MX ? IN : MX : MN;}  
  static inline  REAL  LIMIT_REAL (BOOL EN, BOOL *ENO ,  REAL  MN,  REAL  IN,  REAL  MX){ if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0   ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  return IN > MN ? IN < MX ? IN : MX : MN;} static inline  REAL  LIMIT__REAL__REAL__REAL__REAL (BOOL EN, BOOL *ENO ,  REAL  MN,  REAL  IN,  REAL  MX){ if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0   ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  return IN > MN ? IN < MX ? IN : MX : MN;}    static inline  LREAL  LIMIT_LREAL (BOOL EN, BOOL *ENO ,  LREAL  MN,  LREAL  IN,  LREAL  MX){ if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0   ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  return IN > MN ? IN < MX ? IN : MX : MN;} static inline  LREAL  LIMIT__LREAL__LREAL__LREAL__LREAL (BOOL EN, BOOL *ENO ,  LREAL  MN,  LREAL  IN,  LREAL  MX){ if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0   ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  return IN > MN ? IN < MX ? IN : MX : MN;}      static inline  SINT  LIMIT_SINT (BOOL EN, BOOL *ENO ,  SINT  MN,  SINT  IN,  SINT  MX){ if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0   ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  return IN > MN ? IN < MX ? IN : MX : MN;} static inline  SINT  LIMIT__SINT__SINT__SINT__SINT (BOOL EN, BOOL *ENO ,  SINT  MN,  SINT  IN,  SINT  MX){ if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0   ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  return IN > MN ? IN < MX ? IN : MX : MN;}     static inline  INT  LIMIT_INT (BOOL EN, BOOL *ENO ,  INT  MN,  INT  IN,  INT  MX){ if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0   ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  return IN > MN ? IN < MX ? IN : MX : MN;} static inline  INT  LIMIT__INT__INT__INT__INT (BOOL EN, BOOL *ENO ,  INT  MN,  INT  IN,  INT  MX){ if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0   ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  return IN > MN ? IN < MX ? IN : MX : MN;}     static inline  DINT  LIMIT_DINT (BOOL EN, BOOL *ENO ,  DINT  MN,  DINT  IN,  DINT  MX){ if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0   ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  return IN > MN ? IN < MX ? IN : MX : MN;} static inline  DINT  LIMIT__DINT__DINT__DINT__DINT (BOOL EN, BOOL *ENO ,  DINT  MN,  DINT  IN,  DINT  MX){ if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0   ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  return IN > MN ? IN < MX ? IN : MX : MN;}     static inline  LINT  LIMIT_LINT (BOOL EN, BOOL *ENO ,  LINT  MN,  LINT  IN,  LINT  MX){ if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0   ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  return IN > MN ? IN < MX ? IN : MX : MN;} static inline  LINT  LIMIT__LINT__LINT__LINT__LINT (BOOL EN, BOOL *ENO ,  LINT  MN,  LINT  IN,  LINT  MX){ if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0   ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  return IN > MN ? IN < MX ? IN : MX : MN;}      static inline  USINT  LIMIT_USINT (BOOL EN, BOOL *ENO ,  USINT  MN,  USINT  IN,  USINT  MX){ if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0   ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  return IN > MN ? IN < MX ? IN : MX : MN;} static inline  USINT  LIMIT__USINT__USINT__USINT__USINT (BOOL EN, BOOL *ENO ,  USINT  MN,  USINT  IN,  USINT  MX){ if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0   ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  return IN > MN ? IN < MX ? IN : MX : MN;}     static inline  UINT  LIMIT_UINT (BOOL EN, BOOL *ENO ,  UINT  MN,  UINT  IN,  UINT  MX){ if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0   ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  return IN > MN ? IN < MX ? IN : MX : MN;} static inline  UINT  LIMIT__UINT__UINT__UINT__UINT (BOOL EN, BOOL *ENO ,  UINT  MN,  UINT  IN,  UINT  MX){ if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0   ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  return IN > MN ? IN < MX ? IN : MX : MN;}     static inline  UDINT  LIMIT_UDINT (BOOL EN, BOOL *ENO ,  UDINT  MN,  UDINT  IN,  UDINT  MX){ if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0   ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  return IN > MN ? IN < MX ? IN : MX : MN;} static inline  UDINT  LIMIT__UDINT__UDINT__UDINT__UDINT (BOOL EN, BOOL *ENO ,  UDINT  MN,  UDINT  IN,  UDINT  MX){ if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0   ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  return IN > MN ? IN < MX ? IN : MX : MN;}     static inline  ULINT  LIMIT_ULINT (BOOL EN, BOOL *ENO ,  ULINT  MN,  ULINT  IN,  ULINT  MX){ if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0   ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  return IN > MN ? IN < MX ? IN : MX : MN;} static inline  ULINT  LIMIT__ULINT__ULINT__ULINT__ULINT (BOOL EN, BOOL *ENO ,  ULINT  MN,  ULINT  IN,  ULINT  MX){ if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0   ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  return IN > MN ? IN < MX ? IN : MX : MN;}    



 	

# 1534 "iec_std_lib.h"

 static inline  DATE  LIMIT_DATE (BOOL EN, BOOL *ENO ,  DATE  MN,  DATE  IN,  DATE  MX){ if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return (DATE){0,0}   ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  return (  MN .tv_sec ==  IN .tv_sec ?  IN .tv_nsec -   MN .tv_nsec :  IN .tv_sec -   MN .tv_sec)  > 0 ? (  MX .tv_sec ==  IN .tv_sec ?  IN .tv_nsec -   MX .tv_nsec :  IN .tv_sec -   MX .tv_sec)  < 0 ? IN : MX : MN;} static inline  DATE  LIMIT__DATE__DATE__DATE__DATE (BOOL EN, BOOL *ENO ,  DATE  MN,  DATE  IN,  DATE  MX){ if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return (DATE){0,0}   ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  return (  MN .tv_sec ==  IN .tv_sec ?  IN .tv_nsec -   MN .tv_nsec :  IN .tv_sec -   MN .tv_sec)  > 0 ? (  MX .tv_sec ==  IN .tv_sec ?  IN .tv_nsec -   MX .tv_nsec :  IN .tv_sec -   MX .tv_sec)  < 0 ? IN : MX : MN;}   static inline  TOD  LIMIT_TOD (BOOL EN, BOOL *ENO ,  TOD  MN,  TOD  IN,  TOD  MX){ if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return (TOD){0,0}   ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  return (  MN .tv_sec ==  IN .tv_sec ?  IN .tv_nsec -   MN .tv_nsec :  IN .tv_sec -   MN .tv_sec)  > 0 ? (  MX .tv_sec ==  IN .tv_sec ?  IN .tv_nsec -   MX .tv_nsec :  IN .tv_sec -   MX .tv_sec)  < 0 ? IN : MX : MN;} static inline  TOD  LIMIT__TOD__TOD__TOD__TOD (BOOL EN, BOOL *ENO ,  TOD  MN,  TOD  IN,  TOD  MX){ if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return (TOD){0,0}   ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  return (  MN .tv_sec ==  IN .tv_sec ?  IN .tv_nsec -   MN .tv_nsec :  IN .tv_sec -   MN .tv_sec)  > 0 ? (  MX .tv_sec ==  IN .tv_sec ?  IN .tv_nsec -   MX .tv_nsec :  IN .tv_sec -   MX .tv_sec)  < 0 ? IN : MX : MN;}   static inline  DT  LIMIT_DT (BOOL EN, BOOL *ENO ,  DT  MN,  DT  IN,  DT  MX){ if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return (DT){0,0}   ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  return (  MN .tv_sec ==  IN .tv_sec ?  IN .tv_nsec -   MN .tv_nsec :  IN .tv_sec -   MN .tv_sec)  > 0 ? (  MX .tv_sec ==  IN .tv_sec ?  IN .tv_nsec -   MX .tv_nsec :  IN .tv_sec -   MX .tv_sec)  < 0 ? IN : MX : MN;} static inline  DT  LIMIT__DT__DT__DT__DT (BOOL EN, BOOL *ENO ,  DT  MN,  DT  IN,  DT  MX){ if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return (DT){0,0}   ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  return (  MN .tv_sec ==  IN .tv_sec ?  IN .tv_nsec -   MN .tv_nsec :  IN .tv_sec -   MN .tv_sec)  > 0 ? (  MX .tv_sec ==  IN .tv_sec ?  IN .tv_nsec -   MX .tv_nsec :  IN .tv_sec -   MX .tv_sec)  < 0 ? IN : MX : MN;}  
static inline  TIME  LIMIT_TIME (BOOL EN, BOOL *ENO ,  TIME  MN,  TIME  IN,  TIME  MX){ if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return (TIME){0,0}   ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  return (  MN .tv_sec ==  IN .tv_sec ?  IN .tv_nsec -   MN .tv_nsec :  IN .tv_sec -   MN .tv_sec)  > 0 ? (  MX .tv_sec ==  IN .tv_sec ?  IN .tv_nsec -   MX .tv_nsec :  IN .tv_sec -   MX .tv_sec)  < 0 ? IN : MX : MN;} static inline  TIME  LIMIT__TIME__TIME__TIME__TIME (BOOL EN, BOOL *ENO ,  TIME  MN,  TIME  IN,  TIME  MX){ if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return (TIME){0,0}   ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  return (  MN .tv_sec ==  IN .tv_sec ?  IN .tv_nsec -   MN .tv_nsec :  IN .tv_sec -   MN .tv_sec)  > 0 ? (  MX .tv_sec ==  IN .tv_sec ?  IN .tv_nsec -   MX .tv_nsec :  IN .tv_sec -   MX .tv_sec)  < 0 ? IN : MX : MN;} 


 	
 
static inline STRING LIMIT_STRING(BOOL EN, BOOL *ENO , STRING MN, STRING IN, STRING MX){
    if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return (STRING){0,""}  ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ; 
    return memcmp((char*)& IN .body,(char*)&  MN .body,  IN .len <   MN .len ?  IN .len :   MN .len)  > 0 ? memcmp((char*)& IN .body,(char*)&  MX .body,  IN .len <   MX .len ?  IN .len :   MX .len)  < 0 ? IN : MX : MN;
}

 
static inline STRING LIMIT__STRING__STRING__STRING__STRING(BOOL EN, BOOL *ENO , STRING MN, STRING IN, STRING MX){
    if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return (STRING){0,""}  ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ; 
    return memcmp((char*)& IN .body,(char*)&  MN .body,  IN .len <   MN .len ?  IN .len :   MN .len)  > 0 ? memcmp((char*)& IN .body,(char*)&  MX .body,  IN .len <   MX .len ?  IN .len :   MX .len)  < 0 ? IN : MX : MN;
}


     
     
     
 

    
 


# 1584 "iec_std_lib.h"

         static inline     REAL     MUX__REAL__SINT__REAL    (BOOL EN, BOOL *ENO ,  SINT  K, UINT param_count, ...){ va_list ap; UINT i;     REAL     tmp; if (!EN || (  K >= param_count )) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0      ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  tmp = 0     ; ( ap  = ((__gnuc_va_list) __builtin_next_arg (  param_count ))) ; for (i = 0; i < param_count; i++){ if(K == i){ tmp = ( ap  = (__gnuc_va_list) ((char *) ( ap ) + (((sizeof (   LREAL       ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ),	*((  LREAL       *) (void *) ((char *) ( ap ) - (((sizeof (   LREAL       ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ))) ; ((void)0) ; return tmp; }else{ ( ap  = (__gnuc_va_list) ((char *) ( ap ) + (((sizeof (   LREAL       ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ),	*((  LREAL       *) (void *) ((char *) ( ap ) - (((sizeof (   LREAL       ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ))) ; } } ((void)0) ; return tmp;}    static inline     REAL     MUX__REAL__INT__REAL    (BOOL EN, BOOL *ENO ,  INT  K, UINT param_count, ...){ va_list ap; UINT i;     REAL     tmp; if (!EN || (  K >= param_count )) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0      ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  tmp = 0     ; ( ap  = ((__gnuc_va_list) __builtin_next_arg (  param_count ))) ; for (i = 0; i < param_count; i++){ if(K == i){ tmp = ( ap  = (__gnuc_va_list) ((char *) ( ap ) + (((sizeof (   LREAL       ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ),	*((  LREAL       *) (void *) ((char *) ( ap ) - (((sizeof (   LREAL       ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ))) ; ((void)0) ; return tmp; }else{ ( ap  = (__gnuc_va_list) ((char *) ( ap ) + (((sizeof (   LREAL       ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ),	*((  LREAL       *) (void *) ((char *) ( ap ) - (((sizeof (   LREAL       ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ))) ; } } ((void)0) ; return tmp;}    static inline     REAL     MUX__REAL__DINT__REAL    (BOOL EN, BOOL *ENO ,  DINT  K, UINT param_count, ...){ va_list ap; UINT i;     REAL     tmp; if (!EN || (  K >= param_count )) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0      ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  tmp = 0     ; ( ap  = ((__gnuc_va_list) __builtin_next_arg (  param_count ))) ; for (i = 0; i < param_count; i++){ if(K == i){ tmp = ( ap  = (__gnuc_va_list) ((char *) ( ap ) + (((sizeof (   LREAL       ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ),	*((  LREAL       *) (void *) ((char *) ( ap ) - (((sizeof (   LREAL       ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ))) ; ((void)0) ; return tmp; }else{ ( ap  = (__gnuc_va_list) ((char *) ( ap ) + (((sizeof (   LREAL       ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ),	*((  LREAL       *) (void *) ((char *) ( ap ) - (((sizeof (   LREAL       ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ))) ; } } ((void)0) ; return tmp;}    static inline     REAL     MUX__REAL__LINT__REAL    (BOOL EN, BOOL *ENO ,  LINT  K, UINT param_count, ...){ va_list ap; UINT i;     REAL     tmp; if (!EN || (  K >= param_count )) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0      ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  tmp = 0     ; ( ap  = ((__gnuc_va_list) __builtin_next_arg (  param_count ))) ; for (i = 0; i < param_count; i++){ if(K == i){ tmp = ( ap  = (__gnuc_va_list) ((char *) ( ap ) + (((sizeof (   LREAL       ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ),	*((  LREAL       *) (void *) ((char *) ( ap ) - (((sizeof (   LREAL       ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ))) ; ((void)0) ; return tmp; }else{ ( ap  = (__gnuc_va_list) ((char *) ( ap ) + (((sizeof (   LREAL       ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ),	*((  LREAL       *) (void *) ((char *) ( ap ) - (((sizeof (   LREAL       ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ))) ; } } ((void)0) ; return tmp;}     static inline     REAL     MUX__REAL__USINT__REAL    (BOOL EN, BOOL *ENO ,  USINT  K, UINT param_count, ...){ va_list ap; UINT i;     REAL     tmp; if (!EN || (  K >= param_count )) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0      ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  tmp = 0     ; ( ap  = ((__gnuc_va_list) __builtin_next_arg (  param_count ))) ; for (i = 0; i < param_count; i++){ if(K == i){ tmp = ( ap  = (__gnuc_va_list) ((char *) ( ap ) + (((sizeof (   LREAL       ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ),	*((  LREAL       *) (void *) ((char *) ( ap ) - (((sizeof (   LREAL       ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ))) ; ((void)0) ; return tmp; }else{ ( ap  = (__gnuc_va_list) ((char *) ( ap ) + (((sizeof (   LREAL       ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ),	*((  LREAL       *) (void *) ((char *) ( ap ) - (((sizeof (   LREAL       ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ))) ; } } ((void)0) ; return tmp;}    static inline     REAL     MUX__REAL__UINT__REAL    (BOOL EN, BOOL *ENO ,  UINT  K, UINT param_count, ...){ va_list ap; UINT i;     REAL     tmp; if (!EN || (  K >= param_count )) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0      ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  tmp = 0     ; ( ap  = ((__gnuc_va_list) __builtin_next_arg (  param_count ))) ; for (i = 0; i < param_count; i++){ if(K == i){ tmp = ( ap  = (__gnuc_va_list) ((char *) ( ap ) + (((sizeof (   LREAL       ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ),	*((  LREAL       *) (void *) ((char *) ( ap ) - (((sizeof (   LREAL       ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ))) ; ((void)0) ; return tmp; }else{ ( ap  = (__gnuc_va_list) ((char *) ( ap ) + (((sizeof (   LREAL       ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ),	*((  LREAL       *) (void *) ((char *) ( ap ) - (((sizeof (   LREAL       ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ))) ; } } ((void)0) ; return tmp;}    static inline     REAL     MUX__REAL__UDINT__REAL    (BOOL EN, BOOL *ENO ,  UDINT  K, UINT param_count, ...){ va_list ap; UINT i;     REAL     tmp; if (!EN || (  K >= param_count )) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0      ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  tmp = 0     ; ( ap  = ((__gnuc_va_list) __builtin_next_arg (  param_count ))) ; for (i = 0; i < param_count; i++){ if(K == i){ tmp = ( ap  = (__gnuc_va_list) ((char *) ( ap ) + (((sizeof (   LREAL       ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ),	*((  LREAL       *) (void *) ((char *) ( ap ) - (((sizeof (   LREAL       ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ))) ; ((void)0) ; return tmp; }else{ ( ap  = (__gnuc_va_list) ((char *) ( ap ) + (((sizeof (   LREAL       ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ),	*((  LREAL       *) (void *) ((char *) ( ap ) - (((sizeof (   LREAL       ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ))) ; } } ((void)0) ; return tmp;}    static inline     REAL     MUX__REAL__ULINT__REAL    (BOOL EN, BOOL *ENO ,  ULINT  K, UINT param_count, ...){ va_list ap; UINT i;     REAL     tmp; if (!EN || (  K >= param_count )) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0      ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  tmp = 0     ; ( ap  = ((__gnuc_va_list) __builtin_next_arg (  param_count ))) ; for (i = 0; i < param_count; i++){ if(K == i){ tmp = ( ap  = (__gnuc_va_list) ((char *) ( ap ) + (((sizeof (   LREAL       ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ),	*((  LREAL       *) (void *) ((char *) ( ap ) - (((sizeof (   LREAL       ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ))) ; ((void)0) ; return tmp; }else{ ( ap  = (__gnuc_va_list) ((char *) ( ap ) + (((sizeof (   LREAL       ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ),	*((  LREAL       *) (void *) ((char *) ( ap ) - (((sizeof (   LREAL       ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ))) ; } } ((void)0) ; return tmp;}            static inline     LREAL     MUX__LREAL__SINT__LREAL    (BOOL EN, BOOL *ENO ,  SINT  K, UINT param_count, ...){ va_list ap; UINT i;     LREAL     tmp; if (!EN || (  K >= param_count )) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0      ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  tmp = 0     ; ( ap  = ((__gnuc_va_list) __builtin_next_arg (  param_count ))) ; for (i = 0; i < param_count; i++){ if(K == i){ tmp = ( ap  = (__gnuc_va_list) ((char *) ( ap ) + (((sizeof (   LREAL       ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ),	*((  LREAL       *) (void *) ((char *) ( ap ) - (((sizeof (   LREAL       ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ))) ; ((void)0) ; return tmp; }else{ ( ap  = (__gnuc_va_list) ((char *) ( ap ) + (((sizeof (   LREAL       ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ),	*((  LREAL       *) (void *) ((char *) ( ap ) - (((sizeof (   LREAL       ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ))) ; } } ((void)0) ; return tmp;}    static inline     LREAL     MUX__LREAL__INT__LREAL    (BOOL EN, BOOL *ENO ,  INT  K, UINT param_count, ...){ va_list ap; UINT i;     LREAL     tmp; if (!EN || (  K >= param_count )) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0      ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  tmp = 0     ; ( ap  = ((__gnuc_va_list) __builtin_next_arg (  param_count ))) ; for (i = 0; i < param_count; i++){ if(K == i){ tmp = ( ap  = (__gnuc_va_list) ((char *) ( ap ) + (((sizeof (   LREAL       ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ),	*((  LREAL       *) (void *) ((char *) ( ap ) - (((sizeof (   LREAL       ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ))) ; ((void)0) ; return tmp; }else{ ( ap  = (__gnuc_va_list) ((char *) ( ap ) + (((sizeof (   LREAL       ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ),	*((  LREAL       *) (void *) ((char *) ( ap ) - (((sizeof (   LREAL       ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ))) ; } } ((void)0) ; return tmp;}    static inline     LREAL     MUX__LREAL__DINT__LREAL    (BOOL EN, BOOL *ENO ,  DINT  K, UINT param_count, ...){ va_list ap; UINT i;     LREAL     tmp; if (!EN || (  K >= param_count )) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0      ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  tmp = 0     ; ( ap  = ((__gnuc_va_list) __builtin_next_arg (  param_count ))) ; for (i = 0; i < param_count; i++){ if(K == i){ tmp = ( ap  = (__gnuc_va_list) ((char *) ( ap ) + (((sizeof (   LREAL       ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ),	*((  LREAL       *) (void *) ((char *) ( ap ) - (((sizeof (   LREAL       ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ))) ; ((void)0) ; return tmp; }else{ ( ap  = (__gnuc_va_list) ((char *) ( ap ) + (((sizeof (   LREAL       ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ),	*((  LREAL       *) (void *) ((char *) ( ap ) - (((sizeof (   LREAL       ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ))) ; } } ((void)0) ; return tmp;}    static inline     LREAL     MUX__LREAL__LINT__LREAL    (BOOL EN, BOOL *ENO ,  LINT  K, UINT param_count, ...){ va_list ap; UINT i;     LREAL     tmp; if (!EN || (  K >= param_count )) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0      ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  tmp = 0     ; ( ap  = ((__gnuc_va_list) __builtin_next_arg (  param_count ))) ; for (i = 0; i < param_count; i++){ if(K == i){ tmp = ( ap  = (__gnuc_va_list) ((char *) ( ap ) + (((sizeof (   LREAL       ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ),	*((  LREAL       *) (void *) ((char *) ( ap ) - (((sizeof (   LREAL       ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ))) ; ((void)0) ; return tmp; }else{ ( ap  = (__gnuc_va_list) ((char *) ( ap ) + (((sizeof (   LREAL       ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ),	*((  LREAL       *) (void *) ((char *) ( ap ) - (((sizeof (   LREAL       ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ))) ; } } ((void)0) ; return tmp;}     static inline     LREAL     MUX__LREAL__USINT__LREAL    (BOOL EN, BOOL *ENO ,  USINT  K, UINT param_count, ...){ va_list ap; UINT i;     LREAL     tmp; if (!EN || (  K >= param_count )) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0      ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  tmp = 0     ; ( ap  = ((__gnuc_va_list) __builtin_next_arg (  param_count ))) ; for (i = 0; i < param_count; i++){ if(K == i){ tmp = ( ap  = (__gnuc_va_list) ((char *) ( ap ) + (((sizeof (   LREAL       ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ),	*((  LREAL       *) (void *) ((char *) ( ap ) - (((sizeof (   LREAL       ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ))) ; ((void)0) ; return tmp; }else{ ( ap  = (__gnuc_va_list) ((char *) ( ap ) + (((sizeof (   LREAL       ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ),	*((  LREAL       *) (void *) ((char *) ( ap ) - (((sizeof (   LREAL       ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ))) ; } } ((void)0) ; return tmp;}    static inline     LREAL     MUX__LREAL__UINT__LREAL    (BOOL EN, BOOL *ENO ,  UINT  K, UINT param_count, ...){ va_list ap; UINT i;     LREAL     tmp; if (!EN || (  K >= param_count )) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0      ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  tmp = 0     ; ( ap  = ((__gnuc_va_list) __builtin_next_arg (  param_count ))) ; for (i = 0; i < param_count; i++){ if(K == i){ tmp = ( ap  = (__gnuc_va_list) ((char *) ( ap ) + (((sizeof (   LREAL       ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ),	*((  LREAL       *) (void *) ((char *) ( ap ) - (((sizeof (   LREAL       ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ))) ; ((void)0) ; return tmp; }else{ ( ap  = (__gnuc_va_list) ((char *) ( ap ) + (((sizeof (   LREAL       ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ),	*((  LREAL       *) (void *) ((char *) ( ap ) - (((sizeof (   LREAL       ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ))) ; } } ((void)0) ; return tmp;}    static inline     LREAL     MUX__LREAL__UDINT__LREAL    (BOOL EN, BOOL *ENO ,  UDINT  K, UINT param_count, ...){ va_list ap; UINT i;     LREAL     tmp; if (!EN || (  K >= param_count )) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0      ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  tmp = 0     ; ( ap  = ((__gnuc_va_list) __builtin_next_arg (  param_count ))) ; for (i = 0; i < param_count; i++){ if(K == i){ tmp = ( ap  = (__gnuc_va_list) ((char *) ( ap ) + (((sizeof (   LREAL       ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ),	*((  LREAL       *) (void *) ((char *) ( ap ) - (((sizeof (   LREAL       ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ))) ; ((void)0) ; return tmp; }else{ ( ap  = (__gnuc_va_list) ((char *) ( ap ) + (((sizeof (   LREAL       ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ),	*((  LREAL       *) (void *) ((char *) ( ap ) - (((sizeof (   LREAL       ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ))) ; } } ((void)0) ; return tmp;}    static inline     LREAL     MUX__LREAL__ULINT__LREAL    (BOOL EN, BOOL *ENO ,  ULINT  K, UINT param_count, ...){ va_list ap; UINT i;     LREAL     tmp; if (!EN || (  K >= param_count )) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0      ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  tmp = 0     ; ( ap  = ((__gnuc_va_list) __builtin_next_arg (  param_count ))) ; for (i = 0; i < param_count; i++){ if(K == i){ tmp = ( ap  = (__gnuc_va_list) ((char *) ( ap ) + (((sizeof (   LREAL       ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ),	*((  LREAL       *) (void *) ((char *) ( ap ) - (((sizeof (   LREAL       ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ))) ; ((void)0) ; return tmp; }else{ ( ap  = (__gnuc_va_list) ((char *) ( ap ) + (((sizeof (   LREAL       ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ),	*((  LREAL       *) (void *) ((char *) ( ap ) - (((sizeof (   LREAL       ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ))) ; } } ((void)0) ; return tmp;}              static inline     SINT     MUX__SINT__SINT__SINT    (BOOL EN, BOOL *ENO ,  SINT  K, UINT param_count, ...){ va_list ap; UINT i;     SINT     tmp; if (!EN || (  K >= param_count )) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0      ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  tmp = 0     ; ( ap  = ((__gnuc_va_list) __builtin_next_arg (  param_count ))) ; for (i = 0; i < param_count; i++){ if(K == i){ tmp = ( ap  = (__gnuc_va_list) ((char *) ( ap ) + (((sizeof (   DINT       ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ),	*((  DINT       *) (void *) ((char *) ( ap ) - (((sizeof (   DINT       ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ))) ; ((void)0) ; return tmp; }else{ ( ap  = (__gnuc_va_list) ((char *) ( ap ) + (((sizeof (   DINT       ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ),	*((  DINT       *) (void *) ((char *) ( ap ) - (((sizeof (   DINT       ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ))) ; } } ((void)0) ; return tmp;}    static inline     SINT     MUX__SINT__INT__SINT    (BOOL EN, BOOL *ENO ,  INT  K, UINT param_count, ...){ va_list ap; UINT i;     SINT     tmp; if (!EN || (  K >= param_count )) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0      ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  tmp = 0     ; ( ap  = ((__gnuc_va_list) __builtin_next_arg (  param_count ))) ; for (i = 0; i < param_count; i++){ if(K == i){ tmp = ( ap  = (__gnuc_va_list) ((char *) ( ap ) + (((sizeof (   DINT       ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ),	*((  DINT       *) (void *) ((char *) ( ap ) - (((sizeof (   DINT       ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ))) ; ((void)0) ; return tmp; }else{ ( ap  = (__gnuc_va_list) ((char *) ( ap ) + (((sizeof (   DINT       ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ),	*((  DINT       *) (void *) ((char *) ( ap ) - (((sizeof (   DINT       ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ))) ; } } ((void)0) ; return tmp;}    static inline     SINT     MUX__SINT__DINT__SINT    (BOOL EN, BOOL *ENO ,  DINT  K, UINT param_count, ...){ va_list ap; UINT i;     SINT     tmp; if (!EN || (  K >= param_count )) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0      ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  tmp = 0     ; ( ap  = ((__gnuc_va_list) __builtin_next_arg (  param_count ))) ; for (i = 0; i < param_count; i++){ if(K == i){ tmp = ( ap  = (__gnuc_va_list) ((char *) ( ap ) + (((sizeof (   DINT       ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ),	*((  DINT       *) (void *) ((char *) ( ap ) - (((sizeof (   DINT       ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ))) ; ((void)0) ; return tmp; }else{ ( ap  = (__gnuc_va_list) ((char *) ( ap ) + (((sizeof (   DINT       ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ),	*((  DINT       *) (void *) ((char *) ( ap ) - (((sizeof (   DINT       ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ))) ; } } ((void)0) ; return tmp;}    static inline     SINT     MUX__SINT__LINT__SINT    (BOOL EN, BOOL *ENO ,  LINT  K, UINT param_count, ...){ va_list ap; UINT i;     SINT     tmp; if (!EN || (  K >= param_count )) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0      ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  tmp = 0     ; ( ap  = ((__gnuc_va_list) __builtin_next_arg (  param_count ))) ; for (i = 0; i < param_count; i++){ if(K == i){ tmp = ( ap  = (__gnuc_va_list) ((char *) ( ap ) + (((sizeof (   DINT       ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ),	*((  DINT       *) (void *) ((char *) ( ap ) - (((sizeof (   DINT       ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ))) ; ((void)0) ; return tmp; }else{ ( ap  = (__gnuc_va_list) ((char *) ( ap ) + (((sizeof (   DINT       ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ),	*((  DINT       *) (void *) ((char *) ( ap ) - (((sizeof (   DINT       ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ))) ; } } ((void)0) ; return tmp;}     static inline     SINT     MUX__SINT__USINT__SINT    (BOOL EN, BOOL *ENO ,  USINT  K, UINT param_count, ...){ va_list ap; UINT i;     SINT     tmp; if (!EN || (  K >= param_count )) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0      ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  tmp = 0     ; ( ap  = ((__gnuc_va_list) __builtin_next_arg (  param_count ))) ; for (i = 0; i < param_count; i++){ if(K == i){ tmp = ( ap  = (__gnuc_va_list) ((char *) ( ap ) + (((sizeof (   DINT       ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ),	*((  DINT       *) (void *) ((char *) ( ap ) - (((sizeof (   DINT       ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ))) ; ((void)0) ; return tmp; }else{ ( ap  = (__gnuc_va_list) ((char *) ( ap ) + (((sizeof (   DINT       ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ),	*((  DINT       *) (void *) ((char *) ( ap ) - (((sizeof (   DINT       ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ))) ; } } ((void)0) ; return tmp;}    static inline     SINT     MUX__SINT__UINT__SINT    (BOOL EN, BOOL *ENO ,  UINT  K, UINT param_count, ...){ va_list ap; UINT i;     SINT     tmp; if (!EN || (  K >= param_count )) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0      ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  tmp = 0     ; ( ap  = ((__gnuc_va_list) __builtin_next_arg (  param_count ))) ; for (i = 0; i < param_count; i++){ if(K == i){ tmp = ( ap  = (__gnuc_va_list) ((char *) ( ap ) + (((sizeof (   DINT       ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ),	*((  DINT       *) (void *) ((char *) ( ap ) - (((sizeof (   DINT       ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ))) ; ((void)0) ; return tmp; }else{ ( ap  = (__gnuc_va_list) ((char *) ( ap ) + (((sizeof (   DINT       ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ),	*((  DINT       *) (void *) ((char *) ( ap ) - (((sizeof (   DINT       ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ))) ; } } ((void)0) ; return tmp;}    static inline     SINT     MUX__SINT__UDINT__SINT    (BOOL EN, BOOL *ENO ,  UDINT  K, UINT param_count, ...){ va_list ap; UINT i;     SINT     tmp; if (!EN || (  K >= param_count )) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0      ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  tmp = 0     ; ( ap  = ((__gnuc_va_list) __builtin_next_arg (  param_count ))) ; for (i = 0; i < param_count; i++){ if(K == i){ tmp = ( ap  = (__gnuc_va_list) ((char *) ( ap ) + (((sizeof (   DINT       ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ),	*((  DINT       *) (void *) ((char *) ( ap ) - (((sizeof (   DINT       ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ))) ; ((void)0) ; return tmp; }else{ ( ap  = (__gnuc_va_list) ((char *) ( ap ) + (((sizeof (   DINT       ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ),	*((  DINT       *) (void *) ((char *) ( ap ) - (((sizeof (   DINT       ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ))) ; } } ((void)0) ; return tmp;}    static inline     SINT     MUX__SINT__ULINT__SINT    (BOOL EN, BOOL *ENO ,  ULINT  K, UINT param_count, ...){ va_list ap; UINT i;     SINT     tmp; if (!EN || (  K >= param_count )) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0      ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  tmp = 0     ; ( ap  = ((__gnuc_va_list) __builtin_next_arg (  param_count ))) ; for (i = 0; i < param_count; i++){ if(K == i){ tmp = ( ap  = (__gnuc_va_list) ((char *) ( ap ) + (((sizeof (   DINT       ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ),	*((  DINT       *) (void *) ((char *) ( ap ) - (((sizeof (   DINT       ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ))) ; ((void)0) ; return tmp; }else{ ( ap  = (__gnuc_va_list) ((char *) ( ap ) + (((sizeof (   DINT       ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ),	*((  DINT       *) (void *) ((char *) ( ap ) - (((sizeof (   DINT       ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ))) ; } } ((void)0) ; return tmp;}             static inline     INT     MUX__INT__SINT__INT    (BOOL EN, BOOL *ENO ,  SINT  K, UINT param_count, ...){ va_list ap; UINT i;     INT     tmp; if (!EN || (  K >= param_count )) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0      ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  tmp = 0     ; ( ap  = ((__gnuc_va_list) __builtin_next_arg (  param_count ))) ; for (i = 0; i < param_count; i++){ if(K == i){ tmp = ( ap  = (__gnuc_va_list) ((char *) ( ap ) + (((sizeof (   DINT       ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ),	*((  DINT       *) (void *) ((char *) ( ap ) - (((sizeof (   DINT       ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ))) ; ((void)0) ; return tmp; }else{ ( ap  = (__gnuc_va_list) ((char *) ( ap ) + (((sizeof (   DINT       ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ),	*((  DINT       *) (void *) ((char *) ( ap ) - (((sizeof (   DINT       ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ))) ; } } ((void)0) ; return tmp;}    static inline     INT     MUX__INT__INT__INT    (BOOL EN, BOOL *ENO ,  INT  K, UINT param_count, ...){ va_list ap; UINT i;     INT     tmp; if (!EN || (  K >= param_count )) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0      ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  tmp = 0     ; ( ap  = ((__gnuc_va_list) __builtin_next_arg (  param_count ))) ; for (i = 0; i < param_count; i++){ if(K == i){ tmp = ( ap  = (__gnuc_va_list) ((char *) ( ap ) + (((sizeof (   DINT       ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ),	*((  DINT       *) (void *) ((char *) ( ap ) - (((sizeof (   DINT       ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ))) ; ((void)0) ; return tmp; }else{ ( ap  = (__gnuc_va_list) ((char *) ( ap ) + (((sizeof (   DINT       ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ),	*((  DINT       *) (void *) ((char *) ( ap ) - (((sizeof (   DINT       ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ))) ; } } ((void)0) ; return tmp;}    static inline     INT     MUX__INT__DINT__INT    (BOOL EN, BOOL *ENO ,  DINT  K, UINT param_count, ...){ va_list ap; UINT i;     INT     tmp; if (!EN || (  K >= param_count )) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0      ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  tmp = 0     ; ( ap  = ((__gnuc_va_list) __builtin_next_arg (  param_count ))) ; for (i = 0; i < param_count; i++){ if(K == i){ tmp = ( ap  = (__gnuc_va_list) ((char *) ( ap ) + (((sizeof (   DINT       ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ),	*((  DINT       *) (void *) ((char *) ( ap ) - (((sizeof (   DINT       ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ))) ; ((void)0) ; return tmp; }else{ ( ap  = (__gnuc_va_list) ((char *) ( ap ) + (((sizeof (   DINT       ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ),	*((  DINT       *) (void *) ((char *) ( ap ) - (((sizeof (   DINT       ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ))) ; } } ((void)0) ; return tmp;}    static inline     INT     MUX__INT__LINT__INT    (BOOL EN, BOOL *ENO ,  LINT  K, UINT param_count, ...){ va_list ap; UINT i;     INT     tmp; if (!EN || (  K >= param_count )) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0      ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  tmp = 0     ; ( ap  = ((__gnuc_va_list) __builtin_next_arg (  param_count ))) ; for (i = 0; i < param_count; i++){ if(K == i){ tmp = ( ap  = (__gnuc_va_list) ((char *) ( ap ) + (((sizeof (   DINT       ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ),	*((  DINT       *) (void *) ((char *) ( ap ) - (((sizeof (   DINT       ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ))) ; ((void)0) ; return tmp; }else{ ( ap  = (__gnuc_va_list) ((char *) ( ap ) + (((sizeof (   DINT       ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ),	*((  DINT       *) (void *) ((char *) ( ap ) - (((sizeof (   DINT       ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ))) ; } } ((void)0) ; return tmp;}     static inline     INT     MUX__INT__USINT__INT    (BOOL EN, BOOL *ENO ,  USINT  K, UINT param_count, ...){ va_list ap; UINT i;     INT     tmp; if (!EN || (  K >= param_count )) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0      ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  tmp = 0     ; ( ap  = ((__gnuc_va_list) __builtin_next_arg (  param_count ))) ; for (i = 0; i < param_count; i++){ if(K == i){ tmp = ( ap  = (__gnuc_va_list) ((char *) ( ap ) + (((sizeof (   DINT       ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ),	*((  DINT       *) (void *) ((char *) ( ap ) - (((sizeof (   DINT       ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ))) ; ((void)0) ; return tmp; }else{ ( ap  = (__gnuc_va_list) ((char *) ( ap ) + (((sizeof (   DINT       ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ),	*((  DINT       *) (void *) ((char *) ( ap ) - (((sizeof (   DINT       ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ))) ; } } ((void)0) ; return tmp;}    static inline     INT     MUX__INT__UINT__INT    (BOOL EN, BOOL *ENO ,  UINT  K, UINT param_count, ...){ va_list ap; UINT i;     INT     tmp; if (!EN || (  K >= param_count )) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0      ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  tmp = 0     ; ( ap  = ((__gnuc_va_list) __builtin_next_arg (  param_count ))) ; for (i = 0; i < param_count; i++){ if(K == i){ tmp = ( ap  = (__gnuc_va_list) ((char *) ( ap ) + (((sizeof (   DINT       ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ),	*((  DINT       *) (void *) ((char *) ( ap ) - (((sizeof (   DINT       ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ))) ; ((void)0) ; return tmp; }else{ ( ap  = (__gnuc_va_list) ((char *) ( ap ) + (((sizeof (   DINT       ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ),	*((  DINT       *) (void *) ((char *) ( ap ) - (((sizeof (   DINT       ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ))) ; } } ((void)0) ; return tmp;}    static inline     INT     MUX__INT__UDINT__INT    (BOOL EN, BOOL *ENO ,  UDINT  K, UINT param_count, ...){ va_list ap; UINT i;     INT     tmp; if (!EN || (  K >= param_count )) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0      ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  tmp = 0     ; ( ap  = ((__gnuc_va_list) __builtin_next_arg (  param_count ))) ; for (i = 0; i < param_count; i++){ if(K == i){ tmp = ( ap  = (__gnuc_va_list) ((char *) ( ap ) + (((sizeof (   DINT       ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ),	*((  DINT       *) (void *) ((char *) ( ap ) - (((sizeof (   DINT       ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ))) ; ((void)0) ; return tmp; }else{ ( ap  = (__gnuc_va_list) ((char *) ( ap ) + (((sizeof (   DINT       ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ),	*((  DINT       *) (void *) ((char *) ( ap ) - (((sizeof (   DINT       ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ))) ; } } ((void)0) ; return tmp;}    static inline     INT     MUX__INT__ULINT__INT    (BOOL EN, BOOL *ENO ,  ULINT  K, UINT param_count, ...){ va_list ap; UINT i;     INT     tmp; if (!EN || (  K >= param_count )) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0      ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  tmp = 0     ; ( ap  = ((__gnuc_va_list) __builtin_next_arg (  param_count ))) ; for (i = 0; i < param_count; i++){ if(K == i){ tmp = ( ap  = (__gnuc_va_list) ((char *) ( ap ) + (((sizeof (   DINT       ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ),	*((  DINT       *) (void *) ((char *) ( ap ) - (((sizeof (   DINT       ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ))) ; ((void)0) ; return tmp; }else{ ( ap  = (__gnuc_va_list) ((char *) ( ap ) + (((sizeof (   DINT       ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ),	*((  DINT       *) (void *) ((char *) ( ap ) - (((sizeof (   DINT       ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ))) ; } } ((void)0) ; return tmp;}             static inline     DINT     MUX__DINT__SINT__DINT    (BOOL EN, BOOL *ENO ,  SINT  K, UINT param_count, ...){ va_list ap; UINT i;     DINT     tmp; if (!EN || (  K >= param_count )) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0      ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  tmp = 0     ; ( ap  = ((__gnuc_va_list) __builtin_next_arg (  param_count ))) ; for (i = 0; i < param_count; i++){ if(K == i){ tmp = ( ap  = (__gnuc_va_list) ((char *) ( ap ) + (((sizeof (   DINT       ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ),	*((  DINT       *) (void *) ((char *) ( ap ) - (((sizeof (   DINT       ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ))) ; ((void)0) ; return tmp; }else{ ( ap  = (__gnuc_va_list) ((char *) ( ap ) + (((sizeof (   DINT       ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ),	*((  DINT       *) (void *) ((char *) ( ap ) - (((sizeof (   DINT       ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ))) ; } } ((void)0) ; return tmp;}    static inline     DINT     MUX__DINT__INT__DINT    (BOOL EN, BOOL *ENO ,  INT  K, UINT param_count, ...){ va_list ap; UINT i;     DINT     tmp; if (!EN || (  K >= param_count )) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0      ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  tmp = 0     ; ( ap  = ((__gnuc_va_list) __builtin_next_arg (  param_count ))) ; for (i = 0; i < param_count; i++){ if(K == i){ tmp = ( ap  = (__gnuc_va_list) ((char *) ( ap ) + (((sizeof (   DINT       ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ),	*((  DINT       *) (void *) ((char *) ( ap ) - (((sizeof (   DINT       ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ))) ; ((void)0) ; return tmp; }else{ ( ap  = (__gnuc_va_list) ((char *) ( ap ) + (((sizeof (   DINT       ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ),	*((  DINT       *) (void *) ((char *) ( ap ) - (((sizeof (   DINT       ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ))) ; } } ((void)0) ; return tmp;}    static inline     DINT     MUX__DINT__DINT__DINT    (BOOL EN, BOOL *ENO ,  DINT  K, UINT param_count, ...){ va_list ap; UINT i;     DINT     tmp; if (!EN || (  K >= param_count )) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0      ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  tmp = 0     ; ( ap  = ((__gnuc_va_list) __builtin_next_arg (  param_count ))) ; for (i = 0; i < param_count; i++){ if(K == i){ tmp = ( ap  = (__gnuc_va_list) ((char *) ( ap ) + (((sizeof (   DINT       ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ),	*((  DINT       *) (void *) ((char *) ( ap ) - (((sizeof (   DINT       ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ))) ; ((void)0) ; return tmp; }else{ ( ap  = (__gnuc_va_list) ((char *) ( ap ) + (((sizeof (   DINT       ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ),	*((  DINT       *) (void *) ((char *) ( ap ) - (((sizeof (   DINT       ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ))) ; } } ((void)0) ; return tmp;}    static inline     DINT     MUX__DINT__LINT__DINT    (BOOL EN, BOOL *ENO ,  LINT  K, UINT param_count, ...){ va_list ap; UINT i;     DINT     tmp; if (!EN || (  K >= param_count )) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0      ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  tmp = 0     ; ( ap  = ((__gnuc_va_list) __builtin_next_arg (  param_count ))) ; for (i = 0; i < param_count; i++){ if(K == i){ tmp = ( ap  = (__gnuc_va_list) ((char *) ( ap ) + (((sizeof (   DINT       ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ),	*((  DINT       *) (void *) ((char *) ( ap ) - (((sizeof (   DINT       ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ))) ; ((void)0) ; return tmp; }else{ ( ap  = (__gnuc_va_list) ((char *) ( ap ) + (((sizeof (   DINT       ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ),	*((  DINT       *) (void *) ((char *) ( ap ) - (((sizeof (   DINT       ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ))) ; } } ((void)0) ; return tmp;}     static inline     DINT     MUX__DINT__USINT__DINT    (BOOL EN, BOOL *ENO ,  USINT  K, UINT param_count, ...){ va_list ap; UINT i;     DINT     tmp; if (!EN || (  K >= param_count )) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0      ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  tmp = 0     ; ( ap  = ((__gnuc_va_list) __builtin_next_arg (  param_count ))) ; for (i = 0; i < param_count; i++){ if(K == i){ tmp = ( ap  = (__gnuc_va_list) ((char *) ( ap ) + (((sizeof (   DINT       ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ),	*((  DINT       *) (void *) ((char *) ( ap ) - (((sizeof (   DINT       ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ))) ; ((void)0) ; return tmp; }else{ ( ap  = (__gnuc_va_list) ((char *) ( ap ) + (((sizeof (   DINT       ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ),	*((  DINT       *) (void *) ((char *) ( ap ) - (((sizeof (   DINT       ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ))) ; } } ((void)0) ; return tmp;}    static inline     DINT     MUX__DINT__UINT__DINT    (BOOL EN, BOOL *ENO ,  UINT  K, UINT param_count, ...){ va_list ap; UINT i;     DINT     tmp; if (!EN || (  K >= param_count )) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0      ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  tmp = 0     ; ( ap  = ((__gnuc_va_list) __builtin_next_arg (  param_count ))) ; for (i = 0; i < param_count; i++){ if(K == i){ tmp = ( ap  = (__gnuc_va_list) ((char *) ( ap ) + (((sizeof (   DINT       ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ),	*((  DINT       *) (void *) ((char *) ( ap ) - (((sizeof (   DINT       ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ))) ; ((void)0) ; return tmp; }else{ ( ap  = (__gnuc_va_list) ((char *) ( ap ) + (((sizeof (   DINT       ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ),	*((  DINT       *) (void *) ((char *) ( ap ) - (((sizeof (   DINT       ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ))) ; } } ((void)0) ; return tmp;}    static inline     DINT     MUX__DINT__UDINT__DINT    (BOOL EN, BOOL *ENO ,  UDINT  K, UINT param_count, ...){ va_list ap; UINT i;     DINT     tmp; if (!EN || (  K >= param_count )) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0      ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  tmp = 0     ; ( ap  = ((__gnuc_va_list) __builtin_next_arg (  param_count ))) ; for (i = 0; i < param_count; i++){ if(K == i){ tmp = ( ap  = (__gnuc_va_list) ((char *) ( ap ) + (((sizeof (   DINT       ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ),	*((  DINT       *) (void *) ((char *) ( ap ) - (((sizeof (   DINT       ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ))) ; ((void)0) ; return tmp; }else{ ( ap  = (__gnuc_va_list) ((char *) ( ap ) + (((sizeof (   DINT       ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ),	*((  DINT       *) (void *) ((char *) ( ap ) - (((sizeof (   DINT       ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ))) ; } } ((void)0) ; return tmp;}    static inline     DINT     MUX__DINT__ULINT__DINT    (BOOL EN, BOOL *ENO ,  ULINT  K, UINT param_count, ...){ va_list ap; UINT i;     DINT     tmp; if (!EN || (  K >= param_count )) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0      ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  tmp = 0     ; ( ap  = ((__gnuc_va_list) __builtin_next_arg (  param_count ))) ; for (i = 0; i < param_count; i++){ if(K == i){ tmp = ( ap  = (__gnuc_va_list) ((char *) ( ap ) + (((sizeof (   DINT       ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ),	*((  DINT       *) (void *) ((char *) ( ap ) - (((sizeof (   DINT       ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ))) ; ((void)0) ; return tmp; }else{ ( ap  = (__gnuc_va_list) ((char *) ( ap ) + (((sizeof (   DINT       ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ),	*((  DINT       *) (void *) ((char *) ( ap ) - (((sizeof (   DINT       ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ))) ; } } ((void)0) ; return tmp;}             static inline     LINT     MUX__LINT__SINT__LINT    (BOOL EN, BOOL *ENO ,  SINT  K, UINT param_count, ...){ va_list ap; UINT i;     LINT     tmp; if (!EN || (  K >= param_count )) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0      ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  tmp = 0     ; ( ap  = ((__gnuc_va_list) __builtin_next_arg (  param_count ))) ; for (i = 0; i < param_count; i++){ if(K == i){ tmp = ( ap  = (__gnuc_va_list) ((char *) ( ap ) + (((sizeof (   LINT       ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ),	*((  LINT       *) (void *) ((char *) ( ap ) - (((sizeof (   LINT       ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ))) ; ((void)0) ; return tmp; }else{ ( ap  = (__gnuc_va_list) ((char *) ( ap ) + (((sizeof (   LINT       ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ),	*((  LINT       *) (void *) ((char *) ( ap ) - (((sizeof (   LINT       ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ))) ; } } ((void)0) ; return tmp;}    static inline     LINT     MUX__LINT__INT__LINT    (BOOL EN, BOOL *ENO ,  INT  K, UINT param_count, ...){ va_list ap; UINT i;     LINT     tmp; if (!EN || (  K >= param_count )) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0      ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  tmp = 0     ; ( ap  = ((__gnuc_va_list) __builtin_next_arg (  param_count ))) ; for (i = 0; i < param_count; i++){ if(K == i){ tmp = ( ap  = (__gnuc_va_list) ((char *) ( ap ) + (((sizeof (   LINT       ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ),	*((  LINT       *) (void *) ((char *) ( ap ) - (((sizeof (   LINT       ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ))) ; ((void)0) ; return tmp; }else{ ( ap  = (__gnuc_va_list) ((char *) ( ap ) + (((sizeof (   LINT       ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ),	*((  LINT       *) (void *) ((char *) ( ap ) - (((sizeof (   LINT       ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ))) ; } } ((void)0) ; return tmp;}    static inline     LINT     MUX__LINT__DINT__LINT    (BOOL EN, BOOL *ENO ,  DINT  K, UINT param_count, ...){ va_list ap; UINT i;     LINT     tmp; if (!EN || (  K >= param_count )) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0      ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  tmp = 0     ; ( ap  = ((__gnuc_va_list) __builtin_next_arg (  param_count ))) ; for (i = 0; i < param_count; i++){ if(K == i){ tmp = ( ap  = (__gnuc_va_list) ((char *) ( ap ) + (((sizeof (   LINT       ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ),	*((  LINT       *) (void *) ((char *) ( ap ) - (((sizeof (   LINT       ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ))) ; ((void)0) ; return tmp; }else{ ( ap  = (__gnuc_va_list) ((char *) ( ap ) + (((sizeof (   LINT       ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ),	*((  LINT       *) (void *) ((char *) ( ap ) - (((sizeof (   LINT       ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ))) ; } } ((void)0) ; return tmp;}    static inline     LINT     MUX__LINT__LINT__LINT    (BOOL EN, BOOL *ENO ,  LINT  K, UINT param_count, ...){ va_list ap; UINT i;     LINT     tmp; if (!EN || (  K >= param_count )) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0      ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  tmp = 0     ; ( ap  = ((__gnuc_va_list) __builtin_next_arg (  param_count ))) ; for (i = 0; i < param_count; i++){ if(K == i){ tmp = ( ap  = (__gnuc_va_list) ((char *) ( ap ) + (((sizeof (   LINT       ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ),	*((  LINT       *) (void *) ((char *) ( ap ) - (((sizeof (   LINT       ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ))) ; ((void)0) ; return tmp; }else{ ( ap  = (__gnuc_va_list) ((char *) ( ap ) + (((sizeof (   LINT       ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ),	*((  LINT       *) (void *) ((char *) ( ap ) - (((sizeof (   LINT       ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ))) ; } } ((void)0) ; return tmp;}     static inline     LINT     MUX__LINT__USINT__LINT    (BOOL EN, BOOL *ENO ,  USINT  K, UINT param_count, ...){ va_list ap; UINT i;     LINT     tmp; if (!EN || (  K >= param_count )) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0      ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  tmp = 0     ; ( ap  = ((__gnuc_va_list) __builtin_next_arg (  param_count ))) ; for (i = 0; i < param_count; i++){ if(K == i){ tmp = ( ap  = (__gnuc_va_list) ((char *) ( ap ) + (((sizeof (   LINT       ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ),	*((  LINT       *) (void *) ((char *) ( ap ) - (((sizeof (   LINT       ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ))) ; ((void)0) ; return tmp; }else{ ( ap  = (__gnuc_va_list) ((char *) ( ap ) + (((sizeof (   LINT       ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ),	*((  LINT       *) (void *) ((char *) ( ap ) - (((sizeof (   LINT       ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ))) ; } } ((void)0) ; return tmp;}    static inline     LINT     MUX__LINT__UINT__LINT    (BOOL EN, BOOL *ENO ,  UINT  K, UINT param_count, ...){ va_list ap; UINT i;     LINT     tmp; if (!EN || (  K >= param_count )) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0      ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  tmp = 0     ; ( ap  = ((__gnuc_va_list) __builtin_next_arg (  param_count ))) ; for (i = 0; i < param_count; i++){ if(K == i){ tmp = ( ap  = (__gnuc_va_list) ((char *) ( ap ) + (((sizeof (   LINT       ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ),	*((  LINT       *) (void *) ((char *) ( ap ) - (((sizeof (   LINT       ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ))) ; ((void)0) ; return tmp; }else{ ( ap  = (__gnuc_va_list) ((char *) ( ap ) + (((sizeof (   LINT       ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ),	*((  LINT       *) (void *) ((char *) ( ap ) - (((sizeof (   LINT       ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ))) ; } } ((void)0) ; return tmp;}    static inline     LINT     MUX__LINT__UDINT__LINT    (BOOL EN, BOOL *ENO ,  UDINT  K, UINT param_count, ...){ va_list ap; UINT i;     LINT     tmp; if (!EN || (  K >= param_count )) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0      ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  tmp = 0     ; ( ap  = ((__gnuc_va_list) __builtin_next_arg (  param_count ))) ; for (i = 0; i < param_count; i++){ if(K == i){ tmp = ( ap  = (__gnuc_va_list) ((char *) ( ap ) + (((sizeof (   LINT       ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ),	*((  LINT       *) (void *) ((char *) ( ap ) - (((sizeof (   LINT       ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ))) ; ((void)0) ; return tmp; }else{ ( ap  = (__gnuc_va_list) ((char *) ( ap ) + (((sizeof (   LINT       ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ),	*((  LINT       *) (void *) ((char *) ( ap ) - (((sizeof (   LINT       ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ))) ; } } ((void)0) ; return tmp;}    static inline     LINT     MUX__LINT__ULINT__LINT    (BOOL EN, BOOL *ENO ,  ULINT  K, UINT param_count, ...){ va_list ap; UINT i;     LINT     tmp; if (!EN || (  K >= param_count )) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0      ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  tmp = 0     ; ( ap  = ((__gnuc_va_list) __builtin_next_arg (  param_count ))) ; for (i = 0; i < param_count; i++){ if(K == i){ tmp = ( ap  = (__gnuc_va_list) ((char *) ( ap ) + (((sizeof (   LINT       ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ),	*((  LINT       *) (void *) ((char *) ( ap ) - (((sizeof (   LINT       ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ))) ; ((void)0) ; return tmp; }else{ ( ap  = (__gnuc_va_list) ((char *) ( ap ) + (((sizeof (   LINT       ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ),	*((  LINT       *) (void *) ((char *) ( ap ) - (((sizeof (   LINT       ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ))) ; } } ((void)0) ; return tmp;}              static inline     USINT     MUX__USINT__SINT__USINT    (BOOL EN, BOOL *ENO ,  SINT  K, UINT param_count, ...){ va_list ap; UINT i;     USINT     tmp; if (!EN || (  K >= param_count )) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0      ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  tmp = 0     ; ( ap  = ((__gnuc_va_list) __builtin_next_arg (  param_count ))) ; for (i = 0; i < param_count; i++){ if(K == i){ tmp = ( ap  = (__gnuc_va_list) ((char *) ( ap ) + (((sizeof (   UDINT       ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ),	*((  UDINT       *) (void *) ((char *) ( ap ) - (((sizeof (   UDINT       ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ))) ; ((void)0) ; return tmp; }else{ ( ap  = (__gnuc_va_list) ((char *) ( ap ) + (((sizeof (   UDINT       ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ),	*((  UDINT       *) (void *) ((char *) ( ap ) - (((sizeof (   UDINT       ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ))) ; } } ((void)0) ; return tmp;}    static inline     USINT     MUX__USINT__INT__USINT    (BOOL EN, BOOL *ENO ,  INT  K, UINT param_count, ...){ va_list ap; UINT i;     USINT     tmp; if (!EN || (  K >= param_count )) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0      ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  tmp = 0     ; ( ap  = ((__gnuc_va_list) __builtin_next_arg (  param_count ))) ; for (i = 0; i < param_count; i++){ if(K == i){ tmp = ( ap  = (__gnuc_va_list) ((char *) ( ap ) + (((sizeof (   UDINT       ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ),	*((  UDINT       *) (void *) ((char *) ( ap ) - (((sizeof (   UDINT       ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ))) ; ((void)0) ; return tmp; }else{ ( ap  = (__gnuc_va_list) ((char *) ( ap ) + (((sizeof (   UDINT       ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ),	*((  UDINT       *) (void *) ((char *) ( ap ) - (((sizeof (   UDINT       ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ))) ; } } ((void)0) ; return tmp;}    static inline     USINT     MUX__USINT__DINT__USINT    (BOOL EN, BOOL *ENO ,  DINT  K, UINT param_count, ...){ va_list ap; UINT i;     USINT     tmp; if (!EN || (  K >= param_count )) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0      ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  tmp = 0     ; ( ap  = ((__gnuc_va_list) __builtin_next_arg (  param_count ))) ; for (i = 0; i < param_count; i++){ if(K == i){ tmp = ( ap  = (__gnuc_va_list) ((char *) ( ap ) + (((sizeof (   UDINT       ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ),	*((  UDINT       *) (void *) ((char *) ( ap ) - (((sizeof (   UDINT       ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ))) ; ((void)0) ; return tmp; }else{ ( ap  = (__gnuc_va_list) ((char *) ( ap ) + (((sizeof (   UDINT       ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ),	*((  UDINT       *) (void *) ((char *) ( ap ) - (((sizeof (   UDINT       ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ))) ; } } ((void)0) ; return tmp;}    static inline     USINT     MUX__USINT__LINT__USINT    (BOOL EN, BOOL *ENO ,  LINT  K, UINT param_count, ...){ va_list ap; UINT i;     USINT     tmp; if (!EN || (  K >= param_count )) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0      ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  tmp = 0     ; ( ap  = ((__gnuc_va_list) __builtin_next_arg (  param_count ))) ; for (i = 0; i < param_count; i++){ if(K == i){ tmp = ( ap  = (__gnuc_va_list) ((char *) ( ap ) + (((sizeof (   UDINT       ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ),	*((  UDINT       *) (void *) ((char *) ( ap ) - (((sizeof (   UDINT       ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ))) ; ((void)0) ; return tmp; }else{ ( ap  = (__gnuc_va_list) ((char *) ( ap ) + (((sizeof (   UDINT       ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ),	*((  UDINT       *) (void *) ((char *) ( ap ) - (((sizeof (   UDINT       ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ))) ; } } ((void)0) ; return tmp;}     static inline     USINT     MUX__USINT__USINT__USINT    (BOOL EN, BOOL *ENO ,  USINT  K, UINT param_count, ...){ va_list ap; UINT i;     USINT     tmp; if (!EN || (  K >= param_count )) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0      ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  tmp = 0     ; ( ap  = ((__gnuc_va_list) __builtin_next_arg (  param_count ))) ; for (i = 0; i < param_count; i++){ if(K == i){ tmp = ( ap  = (__gnuc_va_list) ((char *) ( ap ) + (((sizeof (   UDINT       ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ),	*((  UDINT       *) (void *) ((char *) ( ap ) - (((sizeof (   UDINT       ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ))) ; ((void)0) ; return tmp; }else{ ( ap  = (__gnuc_va_list) ((char *) ( ap ) + (((sizeof (   UDINT       ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ),	*((  UDINT       *) (void *) ((char *) ( ap ) - (((sizeof (   UDINT       ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ))) ; } } ((void)0) ; return tmp;}    static inline     USINT     MUX__USINT__UINT__USINT    (BOOL EN, BOOL *ENO ,  UINT  K, UINT param_count, ...){ va_list ap; UINT i;     USINT     tmp; if (!EN || (  K >= param_count )) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0      ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  tmp = 0     ; ( ap  = ((__gnuc_va_list) __builtin_next_arg (  param_count ))) ; for (i = 0; i < param_count; i++){ if(K == i){ tmp = ( ap  = (__gnuc_va_list) ((char *) ( ap ) + (((sizeof (   UDINT       ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ),	*((  UDINT       *) (void *) ((char *) ( ap ) - (((sizeof (   UDINT       ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ))) ; ((void)0) ; return tmp; }else{ ( ap  = (__gnuc_va_list) ((char *) ( ap ) + (((sizeof (   UDINT       ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ),	*((  UDINT       *) (void *) ((char *) ( ap ) - (((sizeof (   UDINT       ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ))) ; } } ((void)0) ; return tmp;}    static inline     USINT     MUX__USINT__UDINT__USINT    (BOOL EN, BOOL *ENO ,  UDINT  K, UINT param_count, ...){ va_list ap; UINT i;     USINT     tmp; if (!EN || (  K >= param_count )) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0      ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  tmp = 0     ; ( ap  = ((__gnuc_va_list) __builtin_next_arg (  param_count ))) ; for (i = 0; i < param_count; i++){ if(K == i){ tmp = ( ap  = (__gnuc_va_list) ((char *) ( ap ) + (((sizeof (   UDINT       ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ),	*((  UDINT       *) (void *) ((char *) ( ap ) - (((sizeof (   UDINT       ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ))) ; ((void)0) ; return tmp; }else{ ( ap  = (__gnuc_va_list) ((char *) ( ap ) + (((sizeof (   UDINT       ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ),	*((  UDINT       *) (void *) ((char *) ( ap ) - (((sizeof (   UDINT       ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ))) ; } } ((void)0) ; return tmp;}    static inline     USINT     MUX__USINT__ULINT__USINT    (BOOL EN, BOOL *ENO ,  ULINT  K, UINT param_count, ...){ va_list ap; UINT i;     USINT     tmp; if (!EN || (  K >= param_count )) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0      ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  tmp = 0     ; ( ap  = ((__gnuc_va_list) __builtin_next_arg (  param_count ))) ; for (i = 0; i < param_count; i++){ if(K == i){ tmp = ( ap  = (__gnuc_va_list) ((char *) ( ap ) + (((sizeof (   UDINT       ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ),	*((  UDINT       *) (void *) ((char *) ( ap ) - (((sizeof (   UDINT       ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ))) ; ((void)0) ; return tmp; }else{ ( ap  = (__gnuc_va_list) ((char *) ( ap ) + (((sizeof (   UDINT       ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ),	*((  UDINT       *) (void *) ((char *) ( ap ) - (((sizeof (   UDINT       ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ))) ; } } ((void)0) ; return tmp;}             static inline     UINT     MUX__UINT__SINT__UINT    (BOOL EN, BOOL *ENO ,  SINT  K, UINT param_count, ...){ va_list ap; UINT i;     UINT     tmp; if (!EN || (  K >= param_count )) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0      ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  tmp = 0     ; ( ap  = ((__gnuc_va_list) __builtin_next_arg (  param_count ))) ; for (i = 0; i < param_count; i++){ if(K == i){ tmp = ( ap  = (__gnuc_va_list) ((char *) ( ap ) + (((sizeof (   UDINT       ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ),	*((  UDINT       *) (void *) ((char *) ( ap ) - (((sizeof (   UDINT       ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ))) ; ((void)0) ; return tmp; }else{ ( ap  = (__gnuc_va_list) ((char *) ( ap ) + (((sizeof (   UDINT       ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ),	*((  UDINT       *) (void *) ((char *) ( ap ) - (((sizeof (   UDINT       ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ))) ; } } ((void)0) ; return tmp;}    static inline     UINT     MUX__UINT__INT__UINT    (BOOL EN, BOOL *ENO ,  INT  K, UINT param_count, ...){ va_list ap; UINT i;     UINT     tmp; if (!EN || (  K >= param_count )) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0      ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  tmp = 0     ; ( ap  = ((__gnuc_va_list) __builtin_next_arg (  param_count ))) ; for (i = 0; i < param_count; i++){ if(K == i){ tmp = ( ap  = (__gnuc_va_list) ((char *) ( ap ) + (((sizeof (   UDINT       ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ),	*((  UDINT       *) (void *) ((char *) ( ap ) - (((sizeof (   UDINT       ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ))) ; ((void)0) ; return tmp; }else{ ( ap  = (__gnuc_va_list) ((char *) ( ap ) + (((sizeof (   UDINT       ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ),	*((  UDINT       *) (void *) ((char *) ( ap ) - (((sizeof (   UDINT       ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ))) ; } } ((void)0) ; return tmp;}    static inline     UINT     MUX__UINT__DINT__UINT    (BOOL EN, BOOL *ENO ,  DINT  K, UINT param_count, ...){ va_list ap; UINT i;     UINT     tmp; if (!EN || (  K >= param_count )) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0      ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  tmp = 0     ; ( ap  = ((__gnuc_va_list) __builtin_next_arg (  param_count ))) ; for (i = 0; i < param_count; i++){ if(K == i){ tmp = ( ap  = (__gnuc_va_list) ((char *) ( ap ) + (((sizeof (   UDINT       ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ),	*((  UDINT       *) (void *) ((char *) ( ap ) - (((sizeof (   UDINT       ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ))) ; ((void)0) ; return tmp; }else{ ( ap  = (__gnuc_va_list) ((char *) ( ap ) + (((sizeof (   UDINT       ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ),	*((  UDINT       *) (void *) ((char *) ( ap ) - (((sizeof (   UDINT       ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ))) ; } } ((void)0) ; return tmp;}    static inline     UINT     MUX__UINT__LINT__UINT    (BOOL EN, BOOL *ENO ,  LINT  K, UINT param_count, ...){ va_list ap; UINT i;     UINT     tmp; if (!EN || (  K >= param_count )) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0      ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  tmp = 0     ; ( ap  = ((__gnuc_va_list) __builtin_next_arg (  param_count ))) ; for (i = 0; i < param_count; i++){ if(K == i){ tmp = ( ap  = (__gnuc_va_list) ((char *) ( ap ) + (((sizeof (   UDINT       ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ),	*((  UDINT       *) (void *) ((char *) ( ap ) - (((sizeof (   UDINT       ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ))) ; ((void)0) ; return tmp; }else{ ( ap  = (__gnuc_va_list) ((char *) ( ap ) + (((sizeof (   UDINT       ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ),	*((  UDINT       *) (void *) ((char *) ( ap ) - (((sizeof (   UDINT       ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ))) ; } } ((void)0) ; return tmp;}     static inline     UINT     MUX__UINT__USINT__UINT    (BOOL EN, BOOL *ENO ,  USINT  K, UINT param_count, ...){ va_list ap; UINT i;     UINT     tmp; if (!EN || (  K >= param_count )) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0      ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  tmp = 0     ; ( ap  = ((__gnuc_va_list) __builtin_next_arg (  param_count ))) ; for (i = 0; i < param_count; i++){ if(K == i){ tmp = ( ap  = (__gnuc_va_list) ((char *) ( ap ) + (((sizeof (   UDINT       ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ),	*((  UDINT       *) (void *) ((char *) ( ap ) - (((sizeof (   UDINT       ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ))) ; ((void)0) ; return tmp; }else{ ( ap  = (__gnuc_va_list) ((char *) ( ap ) + (((sizeof (   UDINT       ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ),	*((  UDINT       *) (void *) ((char *) ( ap ) - (((sizeof (   UDINT       ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ))) ; } } ((void)0) ; return tmp;}    static inline     UINT     MUX__UINT__UINT__UINT    (BOOL EN, BOOL *ENO ,  UINT  K, UINT param_count, ...){ va_list ap; UINT i;     UINT     tmp; if (!EN || (  K >= param_count )) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0      ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  tmp = 0     ; ( ap  = ((__gnuc_va_list) __builtin_next_arg (  param_count ))) ; for (i = 0; i < param_count; i++){ if(K == i){ tmp = ( ap  = (__gnuc_va_list) ((char *) ( ap ) + (((sizeof (   UDINT       ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ),	*((  UDINT       *) (void *) ((char *) ( ap ) - (((sizeof (   UDINT       ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ))) ; ((void)0) ; return tmp; }else{ ( ap  = (__gnuc_va_list) ((char *) ( ap ) + (((sizeof (   UDINT       ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ),	*((  UDINT       *) (void *) ((char *) ( ap ) - (((sizeof (   UDINT       ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ))) ; } } ((void)0) ; return tmp;}    static inline     UINT     MUX__UINT__UDINT__UINT    (BOOL EN, BOOL *ENO ,  UDINT  K, UINT param_count, ...){ va_list ap; UINT i;     UINT     tmp; if (!EN || (  K >= param_count )) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0      ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  tmp = 0     ; ( ap  = ((__gnuc_va_list) __builtin_next_arg (  param_count ))) ; for (i = 0; i < param_count; i++){ if(K == i){ tmp = ( ap  = (__gnuc_va_list) ((char *) ( ap ) + (((sizeof (   UDINT       ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ),	*((  UDINT       *) (void *) ((char *) ( ap ) - (((sizeof (   UDINT       ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ))) ; ((void)0) ; return tmp; }else{ ( ap  = (__gnuc_va_list) ((char *) ( ap ) + (((sizeof (   UDINT       ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ),	*((  UDINT       *) (void *) ((char *) ( ap ) - (((sizeof (   UDINT       ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ))) ; } } ((void)0) ; return tmp;}    static inline     UINT     MUX__UINT__ULINT__UINT    (BOOL EN, BOOL *ENO ,  ULINT  K, UINT param_count, ...){ va_list ap; UINT i;     UINT     tmp; if (!EN || (  K >= param_count )) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0      ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  tmp = 0     ; ( ap  = ((__gnuc_va_list) __builtin_next_arg (  param_count ))) ; for (i = 0; i < param_count; i++){ if(K == i){ tmp = ( ap  = (__gnuc_va_list) ((char *) ( ap ) + (((sizeof (   UDINT       ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ),	*((  UDINT       *) (void *) ((char *) ( ap ) - (((sizeof (   UDINT       ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ))) ; ((void)0) ; return tmp; }else{ ( ap  = (__gnuc_va_list) ((char *) ( ap ) + (((sizeof (   UDINT       ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ),	*((  UDINT       *) (void *) ((char *) ( ap ) - (((sizeof (   UDINT       ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ))) ; } } ((void)0) ; return tmp;}             static inline     UDINT     MUX__UDINT__SINT__UDINT    (BOOL EN, BOOL *ENO ,  SINT  K, UINT param_count, ...){ va_list ap; UINT i;     UDINT     tmp; if (!EN || (  K >= param_count )) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0      ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  tmp = 0     ; ( ap  = ((__gnuc_va_list) __builtin_next_arg (  param_count ))) ; for (i = 0; i < param_count; i++){ if(K == i){ tmp = ( ap  = (__gnuc_va_list) ((char *) ( ap ) + (((sizeof (   UDINT       ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ),	*((  UDINT       *) (void *) ((char *) ( ap ) - (((sizeof (   UDINT       ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ))) ; ((void)0) ; return tmp; }else{ ( ap  = (__gnuc_va_list) ((char *) ( ap ) + (((sizeof (   UDINT       ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ),	*((  UDINT       *) (void *) ((char *) ( ap ) - (((sizeof (   UDINT       ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ))) ; } } ((void)0) ; return tmp;}    static inline     UDINT     MUX__UDINT__INT__UDINT    (BOOL EN, BOOL *ENO ,  INT  K, UINT param_count, ...){ va_list ap; UINT i;     UDINT     tmp; if (!EN || (  K >= param_count )) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0      ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  tmp = 0     ; ( ap  = ((__gnuc_va_list) __builtin_next_arg (  param_count ))) ; for (i = 0; i < param_count; i++){ if(K == i){ tmp = ( ap  = (__gnuc_va_list) ((char *) ( ap ) + (((sizeof (   UDINT       ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ),	*((  UDINT       *) (void *) ((char *) ( ap ) - (((sizeof (   UDINT       ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ))) ; ((void)0) ; return tmp; }else{ ( ap  = (__gnuc_va_list) ((char *) ( ap ) + (((sizeof (   UDINT       ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ),	*((  UDINT       *) (void *) ((char *) ( ap ) - (((sizeof (   UDINT       ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ))) ; } } ((void)0) ; return tmp;}    static inline     UDINT     MUX__UDINT__DINT__UDINT    (BOOL EN, BOOL *ENO ,  DINT  K, UINT param_count, ...){ va_list ap; UINT i;     UDINT     tmp; if (!EN || (  K >= param_count )) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0      ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  tmp = 0     ; ( ap  = ((__gnuc_va_list) __builtin_next_arg (  param_count ))) ; for (i = 0; i < param_count; i++){ if(K == i){ tmp = ( ap  = (__gnuc_va_list) ((char *) ( ap ) + (((sizeof (   UDINT       ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ),	*((  UDINT       *) (void *) ((char *) ( ap ) - (((sizeof (   UDINT       ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ))) ; ((void)0) ; return tmp; }else{ ( ap  = (__gnuc_va_list) ((char *) ( ap ) + (((sizeof (   UDINT       ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ),	*((  UDINT       *) (void *) ((char *) ( ap ) - (((sizeof (   UDINT       ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ))) ; } } ((void)0) ; return tmp;}    static inline     UDINT     MUX__UDINT__LINT__UDINT    (BOOL EN, BOOL *ENO ,  LINT  K, UINT param_count, ...){ va_list ap; UINT i;     UDINT     tmp; if (!EN || (  K >= param_count )) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0      ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  tmp = 0     ; ( ap  = ((__gnuc_va_list) __builtin_next_arg (  param_count ))) ; for (i = 0; i < param_count; i++){ if(K == i){ tmp = ( ap  = (__gnuc_va_list) ((char *) ( ap ) + (((sizeof (   UDINT       ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ),	*((  UDINT       *) (void *) ((char *) ( ap ) - (((sizeof (   UDINT       ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ))) ; ((void)0) ; return tmp; }else{ ( ap  = (__gnuc_va_list) ((char *) ( ap ) + (((sizeof (   UDINT       ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ),	*((  UDINT       *) (void *) ((char *) ( ap ) - (((sizeof (   UDINT       ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ))) ; } } ((void)0) ; return tmp;}     static inline     UDINT     MUX__UDINT__USINT__UDINT    (BOOL EN, BOOL *ENO ,  USINT  K, UINT param_count, ...){ va_list ap; UINT i;     UDINT     tmp; if (!EN || (  K >= param_count )) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0      ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  tmp = 0     ; ( ap  = ((__gnuc_va_list) __builtin_next_arg (  param_count ))) ; for (i = 0; i < param_count; i++){ if(K == i){ tmp = ( ap  = (__gnuc_va_list) ((char *) ( ap ) + (((sizeof (   UDINT       ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ),	*((  UDINT       *) (void *) ((char *) ( ap ) - (((sizeof (   UDINT       ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ))) ; ((void)0) ; return tmp; }else{ ( ap  = (__gnuc_va_list) ((char *) ( ap ) + (((sizeof (   UDINT       ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ),	*((  UDINT       *) (void *) ((char *) ( ap ) - (((sizeof (   UDINT       ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ))) ; } } ((void)0) ; return tmp;}    static inline     UDINT     MUX__UDINT__UINT__UDINT    (BOOL EN, BOOL *ENO ,  UINT  K, UINT param_count, ...){ va_list ap; UINT i;     UDINT     tmp; if (!EN || (  K >= param_count )) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0      ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  tmp = 0     ; ( ap  = ((__gnuc_va_list) __builtin_next_arg (  param_count ))) ; for (i = 0; i < param_count; i++){ if(K == i){ tmp = ( ap  = (__gnuc_va_list) ((char *) ( ap ) + (((sizeof (   UDINT       ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ),	*((  UDINT       *) (void *) ((char *) ( ap ) - (((sizeof (   UDINT       ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ))) ; ((void)0) ; return tmp; }else{ ( ap  = (__gnuc_va_list) ((char *) ( ap ) + (((sizeof (   UDINT       ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ),	*((  UDINT       *) (void *) ((char *) ( ap ) - (((sizeof (   UDINT       ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ))) ; } } ((void)0) ; return tmp;}    static inline     UDINT     MUX__UDINT__UDINT__UDINT    (BOOL EN, BOOL *ENO ,  UDINT  K, UINT param_count, ...){ va_list ap; UINT i;     UDINT     tmp; if (!EN || (  K >= param_count )) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0      ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  tmp = 0     ; ( ap  = ((__gnuc_va_list) __builtin_next_arg (  param_count ))) ; for (i = 0; i < param_count; i++){ if(K == i){ tmp = ( ap  = (__gnuc_va_list) ((char *) ( ap ) + (((sizeof (   UDINT       ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ),	*((  UDINT       *) (void *) ((char *) ( ap ) - (((sizeof (   UDINT       ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ))) ; ((void)0) ; return tmp; }else{ ( ap  = (__gnuc_va_list) ((char *) ( ap ) + (((sizeof (   UDINT       ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ),	*((  UDINT       *) (void *) ((char *) ( ap ) - (((sizeof (   UDINT       ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ))) ; } } ((void)0) ; return tmp;}    static inline     UDINT     MUX__UDINT__ULINT__UDINT    (BOOL EN, BOOL *ENO ,  ULINT  K, UINT param_count, ...){ va_list ap; UINT i;     UDINT     tmp; if (!EN || (  K >= param_count )) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0      ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  tmp = 0     ; ( ap  = ((__gnuc_va_list) __builtin_next_arg (  param_count ))) ; for (i = 0; i < param_count; i++){ if(K == i){ tmp = ( ap  = (__gnuc_va_list) ((char *) ( ap ) + (((sizeof (   UDINT       ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ),	*((  UDINT       *) (void *) ((char *) ( ap ) - (((sizeof (   UDINT       ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ))) ; ((void)0) ; return tmp; }else{ ( ap  = (__gnuc_va_list) ((char *) ( ap ) + (((sizeof (   UDINT       ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ),	*((  UDINT       *) (void *) ((char *) ( ap ) - (((sizeof (   UDINT       ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ))) ; } } ((void)0) ; return tmp;}             static inline     ULINT     MUX__ULINT__SINT__ULINT    (BOOL EN, BOOL *ENO ,  SINT  K, UINT param_count, ...){ va_list ap; UINT i;     ULINT     tmp; if (!EN || (  K >= param_count )) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0      ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  tmp = 0     ; ( ap  = ((__gnuc_va_list) __builtin_next_arg (  param_count ))) ; for (i = 0; i < param_count; i++){ if(K == i){ tmp = ( ap  = (__gnuc_va_list) ((char *) ( ap ) + (((sizeof (   ULINT       ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ),	*((  ULINT       *) (void *) ((char *) ( ap ) - (((sizeof (   ULINT       ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ))) ; ((void)0) ; return tmp; }else{ ( ap  = (__gnuc_va_list) ((char *) ( ap ) + (((sizeof (   ULINT       ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ),	*((  ULINT       *) (void *) ((char *) ( ap ) - (((sizeof (   ULINT       ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ))) ; } } ((void)0) ; return tmp;}    static inline     ULINT     MUX__ULINT__INT__ULINT    (BOOL EN, BOOL *ENO ,  INT  K, UINT param_count, ...){ va_list ap; UINT i;     ULINT     tmp; if (!EN || (  K >= param_count )) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0      ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  tmp = 0     ; ( ap  = ((__gnuc_va_list) __builtin_next_arg (  param_count ))) ; for (i = 0; i < param_count; i++){ if(K == i){ tmp = ( ap  = (__gnuc_va_list) ((char *) ( ap ) + (((sizeof (   ULINT       ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ),	*((  ULINT       *) (void *) ((char *) ( ap ) - (((sizeof (   ULINT       ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ))) ; ((void)0) ; return tmp; }else{ ( ap  = (__gnuc_va_list) ((char *) ( ap ) + (((sizeof (   ULINT       ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ),	*((  ULINT       *) (void *) ((char *) ( ap ) - (((sizeof (   ULINT       ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ))) ; } } ((void)0) ; return tmp;}    static inline     ULINT     MUX__ULINT__DINT__ULINT    (BOOL EN, BOOL *ENO ,  DINT  K, UINT param_count, ...){ va_list ap; UINT i;     ULINT     tmp; if (!EN || (  K >= param_count )) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0      ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  tmp = 0     ; ( ap  = ((__gnuc_va_list) __builtin_next_arg (  param_count ))) ; for (i = 0; i < param_count; i++){ if(K == i){ tmp = ( ap  = (__gnuc_va_list) ((char *) ( ap ) + (((sizeof (   ULINT       ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ),	*((  ULINT       *) (void *) ((char *) ( ap ) - (((sizeof (   ULINT       ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ))) ; ((void)0) ; return tmp; }else{ ( ap  = (__gnuc_va_list) ((char *) ( ap ) + (((sizeof (   ULINT       ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ),	*((  ULINT       *) (void *) ((char *) ( ap ) - (((sizeof (   ULINT       ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ))) ; } } ((void)0) ; return tmp;}    static inline     ULINT     MUX__ULINT__LINT__ULINT    (BOOL EN, BOOL *ENO ,  LINT  K, UINT param_count, ...){ va_list ap; UINT i;     ULINT     tmp; if (!EN || (  K >= param_count )) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0      ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  tmp = 0     ; ( ap  = ((__gnuc_va_list) __builtin_next_arg (  param_count ))) ; for (i = 0; i < param_count; i++){ if(K == i){ tmp = ( ap  = (__gnuc_va_list) ((char *) ( ap ) + (((sizeof (   ULINT       ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ),	*((  ULINT       *) (void *) ((char *) ( ap ) - (((sizeof (   ULINT       ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ))) ; ((void)0) ; return tmp; }else{ ( ap  = (__gnuc_va_list) ((char *) ( ap ) + (((sizeof (   ULINT       ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ),	*((  ULINT       *) (void *) ((char *) ( ap ) - (((sizeof (   ULINT       ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ))) ; } } ((void)0) ; return tmp;}     static inline     ULINT     MUX__ULINT__USINT__ULINT    (BOOL EN, BOOL *ENO ,  USINT  K, UINT param_count, ...){ va_list ap; UINT i;     ULINT     tmp; if (!EN || (  K >= param_count )) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0      ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  tmp = 0     ; ( ap  = ((__gnuc_va_list) __builtin_next_arg (  param_count ))) ; for (i = 0; i < param_count; i++){ if(K == i){ tmp = ( ap  = (__gnuc_va_list) ((char *) ( ap ) + (((sizeof (   ULINT       ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ),	*((  ULINT       *) (void *) ((char *) ( ap ) - (((sizeof (   ULINT       ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ))) ; ((void)0) ; return tmp; }else{ ( ap  = (__gnuc_va_list) ((char *) ( ap ) + (((sizeof (   ULINT       ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ),	*((  ULINT       *) (void *) ((char *) ( ap ) - (((sizeof (   ULINT       ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ))) ; } } ((void)0) ; return tmp;}    static inline     ULINT     MUX__ULINT__UINT__ULINT    (BOOL EN, BOOL *ENO ,  UINT  K, UINT param_count, ...){ va_list ap; UINT i;     ULINT     tmp; if (!EN || (  K >= param_count )) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0      ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  tmp = 0     ; ( ap  = ((__gnuc_va_list) __builtin_next_arg (  param_count ))) ; for (i = 0; i < param_count; i++){ if(K == i){ tmp = ( ap  = (__gnuc_va_list) ((char *) ( ap ) + (((sizeof (   ULINT       ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ),	*((  ULINT       *) (void *) ((char *) ( ap ) - (((sizeof (   ULINT       ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ))) ; ((void)0) ; return tmp; }else{ ( ap  = (__gnuc_va_list) ((char *) ( ap ) + (((sizeof (   ULINT       ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ),	*((  ULINT       *) (void *) ((char *) ( ap ) - (((sizeof (   ULINT       ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ))) ; } } ((void)0) ; return tmp;}    static inline     ULINT     MUX__ULINT__UDINT__ULINT    (BOOL EN, BOOL *ENO ,  UDINT  K, UINT param_count, ...){ va_list ap; UINT i;     ULINT     tmp; if (!EN || (  K >= param_count )) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0      ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  tmp = 0     ; ( ap  = ((__gnuc_va_list) __builtin_next_arg (  param_count ))) ; for (i = 0; i < param_count; i++){ if(K == i){ tmp = ( ap  = (__gnuc_va_list) ((char *) ( ap ) + (((sizeof (   ULINT       ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ),	*((  ULINT       *) (void *) ((char *) ( ap ) - (((sizeof (   ULINT       ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ))) ; ((void)0) ; return tmp; }else{ ( ap  = (__gnuc_va_list) ((char *) ( ap ) + (((sizeof (   ULINT       ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ),	*((  ULINT       *) (void *) ((char *) ( ap ) - (((sizeof (   ULINT       ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ))) ; } } ((void)0) ; return tmp;}    static inline     ULINT     MUX__ULINT__ULINT__ULINT    (BOOL EN, BOOL *ENO ,  ULINT  K, UINT param_count, ...){ va_list ap; UINT i;     ULINT     tmp; if (!EN || (  K >= param_count )) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0      ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  tmp = 0     ; ( ap  = ((__gnuc_va_list) __builtin_next_arg (  param_count ))) ; for (i = 0; i < param_count; i++){ if(K == i){ tmp = ( ap  = (__gnuc_va_list) ((char *) ( ap ) + (((sizeof (   ULINT       ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ),	*((  ULINT       *) (void *) ((char *) ( ap ) - (((sizeof (   ULINT       ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ))) ; ((void)0) ; return tmp; }else{ ( ap  = (__gnuc_va_list) ((char *) ( ap ) + (((sizeof (   ULINT       ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ),	*((  ULINT       *) (void *) ((char *) ( ap ) - (((sizeof (   ULINT       ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ))) ; } } ((void)0) ; return tmp;}             static inline     TIME     MUX__TIME__SINT__TIME    (BOOL EN, BOOL *ENO ,  SINT  K, UINT param_count, ...){ va_list ap; UINT i;     TIME     tmp; if (!EN || (  K >= param_count )) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return (TIME){0,0}      ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  tmp = (TIME){0,0}     ; ( ap  = ((__gnuc_va_list) __builtin_next_arg (  param_count ))) ; for (i = 0; i < param_count; i++){ if(K == i){ tmp = ( ap  = (__gnuc_va_list) ((char *) ( ap ) + (((sizeof (   TIME       ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ),	*((  TIME       *) (void *) ((char *) ( ap ) - (((sizeof (   TIME       ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ))) ; ((void)0) ; return tmp; }else{ ( ap  = (__gnuc_va_list) ((char *) ( ap ) + (((sizeof (   TIME       ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ),	*((  TIME       *) (void *) ((char *) ( ap ) - (((sizeof (   TIME       ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ))) ; } } ((void)0) ; return tmp;}    static inline     TIME     MUX__TIME__INT__TIME    (BOOL EN, BOOL *ENO ,  INT  K, UINT param_count, ...){ va_list ap; UINT i;     TIME     tmp; if (!EN || (  K >= param_count )) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return (TIME){0,0}      ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  tmp = (TIME){0,0}     ; ( ap  = ((__gnuc_va_list) __builtin_next_arg (  param_count ))) ; for (i = 0; i < param_count; i++){ if(K == i){ tmp = ( ap  = (__gnuc_va_list) ((char *) ( ap ) + (((sizeof (   TIME       ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ),	*((  TIME       *) (void *) ((char *) ( ap ) - (((sizeof (   TIME       ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ))) ; ((void)0) ; return tmp; }else{ ( ap  = (__gnuc_va_list) ((char *) ( ap ) + (((sizeof (   TIME       ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ),	*((  TIME       *) (void *) ((char *) ( ap ) - (((sizeof (   TIME       ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ))) ; } } ((void)0) ; return tmp;}    static inline     TIME     MUX__TIME__DINT__TIME    (BOOL EN, BOOL *ENO ,  DINT  K, UINT param_count, ...){ va_list ap; UINT i;     TIME     tmp; if (!EN || (  K >= param_count )) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return (TIME){0,0}      ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  tmp = (TIME){0,0}     ; ( ap  = ((__gnuc_va_list) __builtin_next_arg (  param_count ))) ; for (i = 0; i < param_count; i++){ if(K == i){ tmp = ( ap  = (__gnuc_va_list) ((char *) ( ap ) + (((sizeof (   TIME       ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ),	*((  TIME       *) (void *) ((char *) ( ap ) - (((sizeof (   TIME       ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ))) ; ((void)0) ; return tmp; }else{ ( ap  = (__gnuc_va_list) ((char *) ( ap ) + (((sizeof (   TIME       ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ),	*((  TIME       *) (void *) ((char *) ( ap ) - (((sizeof (   TIME       ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ))) ; } } ((void)0) ; return tmp;}    static inline     TIME     MUX__TIME__LINT__TIME    (BOOL EN, BOOL *ENO ,  LINT  K, UINT param_count, ...){ va_list ap; UINT i;     TIME     tmp; if (!EN || (  K >= param_count )) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return (TIME){0,0}      ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  tmp = (TIME){0,0}     ; ( ap  = ((__gnuc_va_list) __builtin_next_arg (  param_count ))) ; for (i = 0; i < param_count; i++){ if(K == i){ tmp = ( ap  = (__gnuc_va_list) ((char *) ( ap ) + (((sizeof (   TIME       ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ),	*((  TIME       *) (void *) ((char *) ( ap ) - (((sizeof (   TIME       ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ))) ; ((void)0) ; return tmp; }else{ ( ap  = (__gnuc_va_list) ((char *) ( ap ) + (((sizeof (   TIME       ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ),	*((  TIME       *) (void *) ((char *) ( ap ) - (((sizeof (   TIME       ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ))) ; } } ((void)0) ; return tmp;}     static inline     TIME     MUX__TIME__USINT__TIME    (BOOL EN, BOOL *ENO ,  USINT  K, UINT param_count, ...){ va_list ap; UINT i;     TIME     tmp; if (!EN || (  K >= param_count )) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return (TIME){0,0}      ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  tmp = (TIME){0,0}     ; ( ap  = ((__gnuc_va_list) __builtin_next_arg (  param_count ))) ; for (i = 0; i < param_count; i++){ if(K == i){ tmp = ( ap  = (__gnuc_va_list) ((char *) ( ap ) + (((sizeof (   TIME       ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ),	*((  TIME       *) (void *) ((char *) ( ap ) - (((sizeof (   TIME       ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ))) ; ((void)0) ; return tmp; }else{ ( ap  = (__gnuc_va_list) ((char *) ( ap ) + (((sizeof (   TIME       ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ),	*((  TIME       *) (void *) ((char *) ( ap ) - (((sizeof (   TIME       ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ))) ; } } ((void)0) ; return tmp;}    static inline     TIME     MUX__TIME__UINT__TIME    (BOOL EN, BOOL *ENO ,  UINT  K, UINT param_count, ...){ va_list ap; UINT i;     TIME     tmp; if (!EN || (  K >= param_count )) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return (TIME){0,0}      ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  tmp = (TIME){0,0}     ; ( ap  = ((__gnuc_va_list) __builtin_next_arg (  param_count ))) ; for (i = 0; i < param_count; i++){ if(K == i){ tmp = ( ap  = (__gnuc_va_list) ((char *) ( ap ) + (((sizeof (   TIME       ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ),	*((  TIME       *) (void *) ((char *) ( ap ) - (((sizeof (   TIME       ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ))) ; ((void)0) ; return tmp; }else{ ( ap  = (__gnuc_va_list) ((char *) ( ap ) + (((sizeof (   TIME       ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ),	*((  TIME       *) (void *) ((char *) ( ap ) - (((sizeof (   TIME       ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ))) ; } } ((void)0) ; return tmp;}    static inline     TIME     MUX__TIME__UDINT__TIME    (BOOL EN, BOOL *ENO ,  UDINT  K, UINT param_count, ...){ va_list ap; UINT i;     TIME     tmp; if (!EN || (  K >= param_count )) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return (TIME){0,0}      ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  tmp = (TIME){0,0}     ; ( ap  = ((__gnuc_va_list) __builtin_next_arg (  param_count ))) ; for (i = 0; i < param_count; i++){ if(K == i){ tmp = ( ap  = (__gnuc_va_list) ((char *) ( ap ) + (((sizeof (   TIME       ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ),	*((  TIME       *) (void *) ((char *) ( ap ) - (((sizeof (   TIME       ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ))) ; ((void)0) ; return tmp; }else{ ( ap  = (__gnuc_va_list) ((char *) ( ap ) + (((sizeof (   TIME       ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ),	*((  TIME       *) (void *) ((char *) ( ap ) - (((sizeof (   TIME       ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ))) ; } } ((void)0) ; return tmp;}    static inline     TIME     MUX__TIME__ULINT__TIME    (BOOL EN, BOOL *ENO ,  ULINT  K, UINT param_count, ...){ va_list ap; UINT i;     TIME     tmp; if (!EN || (  K >= param_count )) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return (TIME){0,0}      ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  tmp = (TIME){0,0}     ; ( ap  = ((__gnuc_va_list) __builtin_next_arg (  param_count ))) ; for (i = 0; i < param_count; i++){ if(K == i){ tmp = ( ap  = (__gnuc_va_list) ((char *) ( ap ) + (((sizeof (   TIME       ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ),	*((  TIME       *) (void *) ((char *) ( ap ) - (((sizeof (   TIME       ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ))) ; ((void)0) ; return tmp; }else{ ( ap  = (__gnuc_va_list) ((char *) ( ap ) + (((sizeof (   TIME       ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ),	*((  TIME       *) (void *) ((char *) ( ap ) - (((sizeof (   TIME       ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ))) ; } } ((void)0) ; return tmp;}            static inline     BYTE     MUX__BYTE__SINT__BYTE    (BOOL EN, BOOL *ENO ,  SINT  K, UINT param_count, ...){ va_list ap; UINT i;     BYTE     tmp; if (!EN || (  K >= param_count )) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0      ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  tmp = 0     ; ( ap  = ((__gnuc_va_list) __builtin_next_arg (  param_count ))) ; for (i = 0; i < param_count; i++){ if(K == i){ tmp = ( ap  = (__gnuc_va_list) ((char *) ( ap ) + (((sizeof (   DWORD       ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ),	*((  DWORD       *) (void *) ((char *) ( ap ) - (((sizeof (   DWORD       ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ))) ; ((void)0) ; return tmp; }else{ ( ap  = (__gnuc_va_list) ((char *) ( ap ) + (((sizeof (   DWORD       ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ),	*((  DWORD       *) (void *) ((char *) ( ap ) - (((sizeof (   DWORD       ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ))) ; } } ((void)0) ; return tmp;}    static inline     BYTE     MUX__BYTE__INT__BYTE    (BOOL EN, BOOL *ENO ,  INT  K, UINT param_count, ...){ va_list ap; UINT i;     BYTE     tmp; if (!EN || (  K >= param_count )) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0      ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  tmp = 0     ; ( ap  = ((__gnuc_va_list) __builtin_next_arg (  param_count ))) ; for (i = 0; i < param_count; i++){ if(K == i){ tmp = ( ap  = (__gnuc_va_list) ((char *) ( ap ) + (((sizeof (   DWORD       ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ),	*((  DWORD       *) (void *) ((char *) ( ap ) - (((sizeof (   DWORD       ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ))) ; ((void)0) ; return tmp; }else{ ( ap  = (__gnuc_va_list) ((char *) ( ap ) + (((sizeof (   DWORD       ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ),	*((  DWORD       *) (void *) ((char *) ( ap ) - (((sizeof (   DWORD       ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ))) ; } } ((void)0) ; return tmp;}    static inline     BYTE     MUX__BYTE__DINT__BYTE    (BOOL EN, BOOL *ENO ,  DINT  K, UINT param_count, ...){ va_list ap; UINT i;     BYTE     tmp; if (!EN || (  K >= param_count )) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0      ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  tmp = 0     ; ( ap  = ((__gnuc_va_list) __builtin_next_arg (  param_count ))) ; for (i = 0; i < param_count; i++){ if(K == i){ tmp = ( ap  = (__gnuc_va_list) ((char *) ( ap ) + (((sizeof (   DWORD       ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ),	*((  DWORD       *) (void *) ((char *) ( ap ) - (((sizeof (   DWORD       ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ))) ; ((void)0) ; return tmp; }else{ ( ap  = (__gnuc_va_list) ((char *) ( ap ) + (((sizeof (   DWORD       ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ),	*((  DWORD       *) (void *) ((char *) ( ap ) - (((sizeof (   DWORD       ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ))) ; } } ((void)0) ; return tmp;}    static inline     BYTE     MUX__BYTE__LINT__BYTE    (BOOL EN, BOOL *ENO ,  LINT  K, UINT param_count, ...){ va_list ap; UINT i;     BYTE     tmp; if (!EN || (  K >= param_count )) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0      ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  tmp = 0     ; ( ap  = ((__gnuc_va_list) __builtin_next_arg (  param_count ))) ; for (i = 0; i < param_count; i++){ if(K == i){ tmp = ( ap  = (__gnuc_va_list) ((char *) ( ap ) + (((sizeof (   DWORD       ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ),	*((  DWORD       *) (void *) ((char *) ( ap ) - (((sizeof (   DWORD       ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ))) ; ((void)0) ; return tmp; }else{ ( ap  = (__gnuc_va_list) ((char *) ( ap ) + (((sizeof (   DWORD       ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ),	*((  DWORD       *) (void *) ((char *) ( ap ) - (((sizeof (   DWORD       ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ))) ; } } ((void)0) ; return tmp;}     static inline     BYTE     MUX__BYTE__USINT__BYTE    (BOOL EN, BOOL *ENO ,  USINT  K, UINT param_count, ...){ va_list ap; UINT i;     BYTE     tmp; if (!EN || (  K >= param_count )) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0      ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  tmp = 0     ; ( ap  = ((__gnuc_va_list) __builtin_next_arg (  param_count ))) ; for (i = 0; i < param_count; i++){ if(K == i){ tmp = ( ap  = (__gnuc_va_list) ((char *) ( ap ) + (((sizeof (   DWORD       ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ),	*((  DWORD       *) (void *) ((char *) ( ap ) - (((sizeof (   DWORD       ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ))) ; ((void)0) ; return tmp; }else{ ( ap  = (__gnuc_va_list) ((char *) ( ap ) + (((sizeof (   DWORD       ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ),	*((  DWORD       *) (void *) ((char *) ( ap ) - (((sizeof (   DWORD       ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ))) ; } } ((void)0) ; return tmp;}    static inline     BYTE     MUX__BYTE__UINT__BYTE    (BOOL EN, BOOL *ENO ,  UINT  K, UINT param_count, ...){ va_list ap; UINT i;     BYTE     tmp; if (!EN || (  K >= param_count )) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0      ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  tmp = 0     ; ( ap  = ((__gnuc_va_list) __builtin_next_arg (  param_count ))) ; for (i = 0; i < param_count; i++){ if(K == i){ tmp = ( ap  = (__gnuc_va_list) ((char *) ( ap ) + (((sizeof (   DWORD       ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ),	*((  DWORD       *) (void *) ((char *) ( ap ) - (((sizeof (   DWORD       ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ))) ; ((void)0) ; return tmp; }else{ ( ap  = (__gnuc_va_list) ((char *) ( ap ) + (((sizeof (   DWORD       ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ),	*((  DWORD       *) (void *) ((char *) ( ap ) - (((sizeof (   DWORD       ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ))) ; } } ((void)0) ; return tmp;}    static inline     BYTE     MUX__BYTE__UDINT__BYTE    (BOOL EN, BOOL *ENO ,  UDINT  K, UINT param_count, ...){ va_list ap; UINT i;     BYTE     tmp; if (!EN || (  K >= param_count )) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0      ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  tmp = 0     ; ( ap  = ((__gnuc_va_list) __builtin_next_arg (  param_count ))) ; for (i = 0; i < param_count; i++){ if(K == i){ tmp = ( ap  = (__gnuc_va_list) ((char *) ( ap ) + (((sizeof (   DWORD       ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ),	*((  DWORD       *) (void *) ((char *) ( ap ) - (((sizeof (   DWORD       ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ))) ; ((void)0) ; return tmp; }else{ ( ap  = (__gnuc_va_list) ((char *) ( ap ) + (((sizeof (   DWORD       ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ),	*((  DWORD       *) (void *) ((char *) ( ap ) - (((sizeof (   DWORD       ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ))) ; } } ((void)0) ; return tmp;}    static inline     BYTE     MUX__BYTE__ULINT__BYTE    (BOOL EN, BOOL *ENO ,  ULINT  K, UINT param_count, ...){ va_list ap; UINT i;     BYTE     tmp; if (!EN || (  K >= param_count )) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0      ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  tmp = 0     ; ( ap  = ((__gnuc_va_list) __builtin_next_arg (  param_count ))) ; for (i = 0; i < param_count; i++){ if(K == i){ tmp = ( ap  = (__gnuc_va_list) ((char *) ( ap ) + (((sizeof (   DWORD       ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ),	*((  DWORD       *) (void *) ((char *) ( ap ) - (((sizeof (   DWORD       ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ))) ; ((void)0) ; return tmp; }else{ ( ap  = (__gnuc_va_list) ((char *) ( ap ) + (((sizeof (   DWORD       ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ),	*((  DWORD       *) (void *) ((char *) ( ap ) - (((sizeof (   DWORD       ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ))) ; } } ((void)0) ; return tmp;}           static inline     WORD     MUX__WORD__SINT__WORD    (BOOL EN, BOOL *ENO ,  SINT  K, UINT param_count, ...){ va_list ap; UINT i;     WORD     tmp; if (!EN || (  K >= param_count )) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0      ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  tmp = 0     ; ( ap  = ((__gnuc_va_list) __builtin_next_arg (  param_count ))) ; for (i = 0; i < param_count; i++){ if(K == i){ tmp = ( ap  = (__gnuc_va_list) ((char *) ( ap ) + (((sizeof (   DWORD       ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ),	*((  DWORD       *) (void *) ((char *) ( ap ) - (((sizeof (   DWORD       ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ))) ; ((void)0) ; return tmp; }else{ ( ap  = (__gnuc_va_list) ((char *) ( ap ) + (((sizeof (   DWORD       ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ),	*((  DWORD       *) (void *) ((char *) ( ap ) - (((sizeof (   DWORD       ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ))) ; } } ((void)0) ; return tmp;}    static inline     WORD     MUX__WORD__INT__WORD    (BOOL EN, BOOL *ENO ,  INT  K, UINT param_count, ...){ va_list ap; UINT i;     WORD     tmp; if (!EN || (  K >= param_count )) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0      ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  tmp = 0     ; ( ap  = ((__gnuc_va_list) __builtin_next_arg (  param_count ))) ; for (i = 0; i < param_count; i++){ if(K == i){ tmp = ( ap  = (__gnuc_va_list) ((char *) ( ap ) + (((sizeof (   DWORD       ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ),	*((  DWORD       *) (void *) ((char *) ( ap ) - (((sizeof (   DWORD       ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ))) ; ((void)0) ; return tmp; }else{ ( ap  = (__gnuc_va_list) ((char *) ( ap ) + (((sizeof (   DWORD       ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ),	*((  DWORD       *) (void *) ((char *) ( ap ) - (((sizeof (   DWORD       ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ))) ; } } ((void)0) ; return tmp;}    static inline     WORD     MUX__WORD__DINT__WORD    (BOOL EN, BOOL *ENO ,  DINT  K, UINT param_count, ...){ va_list ap; UINT i;     WORD     tmp; if (!EN || (  K >= param_count )) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0      ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  tmp = 0     ; ( ap  = ((__gnuc_va_list) __builtin_next_arg (  param_count ))) ; for (i = 0; i < param_count; i++){ if(K == i){ tmp = ( ap  = (__gnuc_va_list) ((char *) ( ap ) + (((sizeof (   DWORD       ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ),	*((  DWORD       *) (void *) ((char *) ( ap ) - (((sizeof (   DWORD       ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ))) ; ((void)0) ; return tmp; }else{ ( ap  = (__gnuc_va_list) ((char *) ( ap ) + (((sizeof (   DWORD       ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ),	*((  DWORD       *) (void *) ((char *) ( ap ) - (((sizeof (   DWORD       ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ))) ; } } ((void)0) ; return tmp;}    static inline     WORD     MUX__WORD__LINT__WORD    (BOOL EN, BOOL *ENO ,  LINT  K, UINT param_count, ...){ va_list ap; UINT i;     WORD     tmp; if (!EN || (  K >= param_count )) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0      ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  tmp = 0     ; ( ap  = ((__gnuc_va_list) __builtin_next_arg (  param_count ))) ; for (i = 0; i < param_count; i++){ if(K == i){ tmp = ( ap  = (__gnuc_va_list) ((char *) ( ap ) + (((sizeof (   DWORD       ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ),	*((  DWORD       *) (void *) ((char *) ( ap ) - (((sizeof (   DWORD       ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ))) ; ((void)0) ; return tmp; }else{ ( ap  = (__gnuc_va_list) ((char *) ( ap ) + (((sizeof (   DWORD       ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ),	*((  DWORD       *) (void *) ((char *) ( ap ) - (((sizeof (   DWORD       ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ))) ; } } ((void)0) ; return tmp;}     static inline     WORD     MUX__WORD__USINT__WORD    (BOOL EN, BOOL *ENO ,  USINT  K, UINT param_count, ...){ va_list ap; UINT i;     WORD     tmp; if (!EN || (  K >= param_count )) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0      ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  tmp = 0     ; ( ap  = ((__gnuc_va_list) __builtin_next_arg (  param_count ))) ; for (i = 0; i < param_count; i++){ if(K == i){ tmp = ( ap  = (__gnuc_va_list) ((char *) ( ap ) + (((sizeof (   DWORD       ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ),	*((  DWORD       *) (void *) ((char *) ( ap ) - (((sizeof (   DWORD       ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ))) ; ((void)0) ; return tmp; }else{ ( ap  = (__gnuc_va_list) ((char *) ( ap ) + (((sizeof (   DWORD       ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ),	*((  DWORD       *) (void *) ((char *) ( ap ) - (((sizeof (   DWORD       ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ))) ; } } ((void)0) ; return tmp;}    static inline     WORD     MUX__WORD__UINT__WORD    (BOOL EN, BOOL *ENO ,  UINT  K, UINT param_count, ...){ va_list ap; UINT i;     WORD     tmp; if (!EN || (  K >= param_count )) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0      ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  tmp = 0     ; ( ap  = ((__gnuc_va_list) __builtin_next_arg (  param_count ))) ; for (i = 0; i < param_count; i++){ if(K == i){ tmp = ( ap  = (__gnuc_va_list) ((char *) ( ap ) + (((sizeof (   DWORD       ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ),	*((  DWORD       *) (void *) ((char *) ( ap ) - (((sizeof (   DWORD       ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ))) ; ((void)0) ; return tmp; }else{ ( ap  = (__gnuc_va_list) ((char *) ( ap ) + (((sizeof (   DWORD       ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ),	*((  DWORD       *) (void *) ((char *) ( ap ) - (((sizeof (   DWORD       ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ))) ; } } ((void)0) ; return tmp;}    static inline     WORD     MUX__WORD__UDINT__WORD    (BOOL EN, BOOL *ENO ,  UDINT  K, UINT param_count, ...){ va_list ap; UINT i;     WORD     tmp; if (!EN || (  K >= param_count )) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0      ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  tmp = 0     ; ( ap  = ((__gnuc_va_list) __builtin_next_arg (  param_count ))) ; for (i = 0; i < param_count; i++){ if(K == i){ tmp = ( ap  = (__gnuc_va_list) ((char *) ( ap ) + (((sizeof (   DWORD       ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ),	*((  DWORD       *) (void *) ((char *) ( ap ) - (((sizeof (   DWORD       ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ))) ; ((void)0) ; return tmp; }else{ ( ap  = (__gnuc_va_list) ((char *) ( ap ) + (((sizeof (   DWORD       ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ),	*((  DWORD       *) (void *) ((char *) ( ap ) - (((sizeof (   DWORD       ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ))) ; } } ((void)0) ; return tmp;}    static inline     WORD     MUX__WORD__ULINT__WORD    (BOOL EN, BOOL *ENO ,  ULINT  K, UINT param_count, ...){ va_list ap; UINT i;     WORD     tmp; if (!EN || (  K >= param_count )) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0      ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  tmp = 0     ; ( ap  = ((__gnuc_va_list) __builtin_next_arg (  param_count ))) ; for (i = 0; i < param_count; i++){ if(K == i){ tmp = ( ap  = (__gnuc_va_list) ((char *) ( ap ) + (((sizeof (   DWORD       ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ),	*((  DWORD       *) (void *) ((char *) ( ap ) - (((sizeof (   DWORD       ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ))) ; ((void)0) ; return tmp; }else{ ( ap  = (__gnuc_va_list) ((char *) ( ap ) + (((sizeof (   DWORD       ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ),	*((  DWORD       *) (void *) ((char *) ( ap ) - (((sizeof (   DWORD       ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ))) ; } } ((void)0) ; return tmp;}           static inline     DWORD     MUX__DWORD__SINT__DWORD    (BOOL EN, BOOL *ENO ,  SINT  K, UINT param_count, ...){ va_list ap; UINT i;     DWORD     tmp; if (!EN || (  K >= param_count )) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0      ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  tmp = 0     ; ( ap  = ((__gnuc_va_list) __builtin_next_arg (  param_count ))) ; for (i = 0; i < param_count; i++){ if(K == i){ tmp = ( ap  = (__gnuc_va_list) ((char *) ( ap ) + (((sizeof (   DWORD       ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ),	*((  DWORD       *) (void *) ((char *) ( ap ) - (((sizeof (   DWORD       ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ))) ; ((void)0) ; return tmp; }else{ ( ap  = (__gnuc_va_list) ((char *) ( ap ) + (((sizeof (   DWORD       ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ),	*((  DWORD       *) (void *) ((char *) ( ap ) - (((sizeof (   DWORD       ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ))) ; } } ((void)0) ; return tmp;}    static inline     DWORD     MUX__DWORD__INT__DWORD    (BOOL EN, BOOL *ENO ,  INT  K, UINT param_count, ...){ va_list ap; UINT i;     DWORD     tmp; if (!EN || (  K >= param_count )) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0      ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  tmp = 0     ; ( ap  = ((__gnuc_va_list) __builtin_next_arg (  param_count ))) ; for (i = 0; i < param_count; i++){ if(K == i){ tmp = ( ap  = (__gnuc_va_list) ((char *) ( ap ) + (((sizeof (   DWORD       ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ),	*((  DWORD       *) (void *) ((char *) ( ap ) - (((sizeof (   DWORD       ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ))) ; ((void)0) ; return tmp; }else{ ( ap  = (__gnuc_va_list) ((char *) ( ap ) + (((sizeof (   DWORD       ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ),	*((  DWORD       *) (void *) ((char *) ( ap ) - (((sizeof (   DWORD       ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ))) ; } } ((void)0) ; return tmp;}    static inline     DWORD     MUX__DWORD__DINT__DWORD    (BOOL EN, BOOL *ENO ,  DINT  K, UINT param_count, ...){ va_list ap; UINT i;     DWORD     tmp; if (!EN || (  K >= param_count )) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0      ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  tmp = 0     ; ( ap  = ((__gnuc_va_list) __builtin_next_arg (  param_count ))) ; for (i = 0; i < param_count; i++){ if(K == i){ tmp = ( ap  = (__gnuc_va_list) ((char *) ( ap ) + (((sizeof (   DWORD       ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ),	*((  DWORD       *) (void *) ((char *) ( ap ) - (((sizeof (   DWORD       ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ))) ; ((void)0) ; return tmp; }else{ ( ap  = (__gnuc_va_list) ((char *) ( ap ) + (((sizeof (   DWORD       ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ),	*((  DWORD       *) (void *) ((char *) ( ap ) - (((sizeof (   DWORD       ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ))) ; } } ((void)0) ; return tmp;}    static inline     DWORD     MUX__DWORD__LINT__DWORD    (BOOL EN, BOOL *ENO ,  LINT  K, UINT param_count, ...){ va_list ap; UINT i;     DWORD     tmp; if (!EN || (  K >= param_count )) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0      ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  tmp = 0     ; ( ap  = ((__gnuc_va_list) __builtin_next_arg (  param_count ))) ; for (i = 0; i < param_count; i++){ if(K == i){ tmp = ( ap  = (__gnuc_va_list) ((char *) ( ap ) + (((sizeof (   DWORD       ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ),	*((  DWORD       *) (void *) ((char *) ( ap ) - (((sizeof (   DWORD       ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ))) ; ((void)0) ; return tmp; }else{ ( ap  = (__gnuc_va_list) ((char *) ( ap ) + (((sizeof (   DWORD       ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ),	*((  DWORD       *) (void *) ((char *) ( ap ) - (((sizeof (   DWORD       ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ))) ; } } ((void)0) ; return tmp;}     static inline     DWORD     MUX__DWORD__USINT__DWORD    (BOOL EN, BOOL *ENO ,  USINT  K, UINT param_count, ...){ va_list ap; UINT i;     DWORD     tmp; if (!EN || (  K >= param_count )) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0      ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  tmp = 0     ; ( ap  = ((__gnuc_va_list) __builtin_next_arg (  param_count ))) ; for (i = 0; i < param_count; i++){ if(K == i){ tmp = ( ap  = (__gnuc_va_list) ((char *) ( ap ) + (((sizeof (   DWORD       ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ),	*((  DWORD       *) (void *) ((char *) ( ap ) - (((sizeof (   DWORD       ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ))) ; ((void)0) ; return tmp; }else{ ( ap  = (__gnuc_va_list) ((char *) ( ap ) + (((sizeof (   DWORD       ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ),	*((  DWORD       *) (void *) ((char *) ( ap ) - (((sizeof (   DWORD       ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ))) ; } } ((void)0) ; return tmp;}    static inline     DWORD     MUX__DWORD__UINT__DWORD    (BOOL EN, BOOL *ENO ,  UINT  K, UINT param_count, ...){ va_list ap; UINT i;     DWORD     tmp; if (!EN || (  K >= param_count )) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0      ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  tmp = 0     ; ( ap  = ((__gnuc_va_list) __builtin_next_arg (  param_count ))) ; for (i = 0; i < param_count; i++){ if(K == i){ tmp = ( ap  = (__gnuc_va_list) ((char *) ( ap ) + (((sizeof (   DWORD       ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ),	*((  DWORD       *) (void *) ((char *) ( ap ) - (((sizeof (   DWORD       ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ))) ; ((void)0) ; return tmp; }else{ ( ap  = (__gnuc_va_list) ((char *) ( ap ) + (((sizeof (   DWORD       ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ),	*((  DWORD       *) (void *) ((char *) ( ap ) - (((sizeof (   DWORD       ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ))) ; } } ((void)0) ; return tmp;}    static inline     DWORD     MUX__DWORD__UDINT__DWORD    (BOOL EN, BOOL *ENO ,  UDINT  K, UINT param_count, ...){ va_list ap; UINT i;     DWORD     tmp; if (!EN || (  K >= param_count )) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0      ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  tmp = 0     ; ( ap  = ((__gnuc_va_list) __builtin_next_arg (  param_count ))) ; for (i = 0; i < param_count; i++){ if(K == i){ tmp = ( ap  = (__gnuc_va_list) ((char *) ( ap ) + (((sizeof (   DWORD       ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ),	*((  DWORD       *) (void *) ((char *) ( ap ) - (((sizeof (   DWORD       ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ))) ; ((void)0) ; return tmp; }else{ ( ap  = (__gnuc_va_list) ((char *) ( ap ) + (((sizeof (   DWORD       ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ),	*((  DWORD       *) (void *) ((char *) ( ap ) - (((sizeof (   DWORD       ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ))) ; } } ((void)0) ; return tmp;}    static inline     DWORD     MUX__DWORD__ULINT__DWORD    (BOOL EN, BOOL *ENO ,  ULINT  K, UINT param_count, ...){ va_list ap; UINT i;     DWORD     tmp; if (!EN || (  K >= param_count )) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0      ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  tmp = 0     ; ( ap  = ((__gnuc_va_list) __builtin_next_arg (  param_count ))) ; for (i = 0; i < param_count; i++){ if(K == i){ tmp = ( ap  = (__gnuc_va_list) ((char *) ( ap ) + (((sizeof (   DWORD       ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ),	*((  DWORD       *) (void *) ((char *) ( ap ) - (((sizeof (   DWORD       ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ))) ; ((void)0) ; return tmp; }else{ ( ap  = (__gnuc_va_list) ((char *) ( ap ) + (((sizeof (   DWORD       ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ),	*((  DWORD       *) (void *) ((char *) ( ap ) - (((sizeof (   DWORD       ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ))) ; } } ((void)0) ; return tmp;}           static inline     LWORD     MUX__LWORD__SINT__LWORD    (BOOL EN, BOOL *ENO ,  SINT  K, UINT param_count, ...){ va_list ap; UINT i;     LWORD     tmp; if (!EN || (  K >= param_count )) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0      ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  tmp = 0     ; ( ap  = ((__gnuc_va_list) __builtin_next_arg (  param_count ))) ; for (i = 0; i < param_count; i++){ if(K == i){ tmp = ( ap  = (__gnuc_va_list) ((char *) ( ap ) + (((sizeof (   LWORD       ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ),	*((  LWORD       *) (void *) ((char *) ( ap ) - (((sizeof (   LWORD       ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ))) ; ((void)0) ; return tmp; }else{ ( ap  = (__gnuc_va_list) ((char *) ( ap ) + (((sizeof (   LWORD       ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ),	*((  LWORD       *) (void *) ((char *) ( ap ) - (((sizeof (   LWORD       ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ))) ; } } ((void)0) ; return tmp;}    static inline     LWORD     MUX__LWORD__INT__LWORD    (BOOL EN, BOOL *ENO ,  INT  K, UINT param_count, ...){ va_list ap; UINT i;     LWORD     tmp; if (!EN || (  K >= param_count )) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0      ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  tmp = 0     ; ( ap  = ((__gnuc_va_list) __builtin_next_arg (  param_count ))) ; for (i = 0; i < param_count; i++){ if(K == i){ tmp = ( ap  = (__gnuc_va_list) ((char *) ( ap ) + (((sizeof (   LWORD       ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ),	*((  LWORD       *) (void *) ((char *) ( ap ) - (((sizeof (   LWORD       ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ))) ; ((void)0) ; return tmp; }else{ ( ap  = (__gnuc_va_list) ((char *) ( ap ) + (((sizeof (   LWORD       ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ),	*((  LWORD       *) (void *) ((char *) ( ap ) - (((sizeof (   LWORD       ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ))) ; } } ((void)0) ; return tmp;}    static inline     LWORD     MUX__LWORD__DINT__LWORD    (BOOL EN, BOOL *ENO ,  DINT  K, UINT param_count, ...){ va_list ap; UINT i;     LWORD     tmp; if (!EN || (  K >= param_count )) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0      ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  tmp = 0     ; ( ap  = ((__gnuc_va_list) __builtin_next_arg (  param_count ))) ; for (i = 0; i < param_count; i++){ if(K == i){ tmp = ( ap  = (__gnuc_va_list) ((char *) ( ap ) + (((sizeof (   LWORD       ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ),	*((  LWORD       *) (void *) ((char *) ( ap ) - (((sizeof (   LWORD       ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ))) ; ((void)0) ; return tmp; }else{ ( ap  = (__gnuc_va_list) ((char *) ( ap ) + (((sizeof (   LWORD       ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ),	*((  LWORD       *) (void *) ((char *) ( ap ) - (((sizeof (   LWORD       ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ))) ; } } ((void)0) ; return tmp;}    static inline     LWORD     MUX__LWORD__LINT__LWORD    (BOOL EN, BOOL *ENO ,  LINT  K, UINT param_count, ...){ va_list ap; UINT i;     LWORD     tmp; if (!EN || (  K >= param_count )) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0      ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  tmp = 0     ; ( ap  = ((__gnuc_va_list) __builtin_next_arg (  param_count ))) ; for (i = 0; i < param_count; i++){ if(K == i){ tmp = ( ap  = (__gnuc_va_list) ((char *) ( ap ) + (((sizeof (   LWORD       ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ),	*((  LWORD       *) (void *) ((char *) ( ap ) - (((sizeof (   LWORD       ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ))) ; ((void)0) ; return tmp; }else{ ( ap  = (__gnuc_va_list) ((char *) ( ap ) + (((sizeof (   LWORD       ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ),	*((  LWORD       *) (void *) ((char *) ( ap ) - (((sizeof (   LWORD       ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ))) ; } } ((void)0) ; return tmp;}     static inline     LWORD     MUX__LWORD__USINT__LWORD    (BOOL EN, BOOL *ENO ,  USINT  K, UINT param_count, ...){ va_list ap; UINT i;     LWORD     tmp; if (!EN || (  K >= param_count )) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0      ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  tmp = 0     ; ( ap  = ((__gnuc_va_list) __builtin_next_arg (  param_count ))) ; for (i = 0; i < param_count; i++){ if(K == i){ tmp = ( ap  = (__gnuc_va_list) ((char *) ( ap ) + (((sizeof (   LWORD       ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ),	*((  LWORD       *) (void *) ((char *) ( ap ) - (((sizeof (   LWORD       ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ))) ; ((void)0) ; return tmp; }else{ ( ap  = (__gnuc_va_list) ((char *) ( ap ) + (((sizeof (   LWORD       ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ),	*((  LWORD       *) (void *) ((char *) ( ap ) - (((sizeof (   LWORD       ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ))) ; } } ((void)0) ; return tmp;}    static inline     LWORD     MUX__LWORD__UINT__LWORD    (BOOL EN, BOOL *ENO ,  UINT  K, UINT param_count, ...){ va_list ap; UINT i;     LWORD     tmp; if (!EN || (  K >= param_count )) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0      ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  tmp = 0     ; ( ap  = ((__gnuc_va_list) __builtin_next_arg (  param_count ))) ; for (i = 0; i < param_count; i++){ if(K == i){ tmp = ( ap  = (__gnuc_va_list) ((char *) ( ap ) + (((sizeof (   LWORD       ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ),	*((  LWORD       *) (void *) ((char *) ( ap ) - (((sizeof (   LWORD       ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ))) ; ((void)0) ; return tmp; }else{ ( ap  = (__gnuc_va_list) ((char *) ( ap ) + (((sizeof (   LWORD       ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ),	*((  LWORD       *) (void *) ((char *) ( ap ) - (((sizeof (   LWORD       ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ))) ; } } ((void)0) ; return tmp;}    static inline     LWORD     MUX__LWORD__UDINT__LWORD    (BOOL EN, BOOL *ENO ,  UDINT  K, UINT param_count, ...){ va_list ap; UINT i;     LWORD     tmp; if (!EN || (  K >= param_count )) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0      ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  tmp = 0     ; ( ap  = ((__gnuc_va_list) __builtin_next_arg (  param_count ))) ; for (i = 0; i < param_count; i++){ if(K == i){ tmp = ( ap  = (__gnuc_va_list) ((char *) ( ap ) + (((sizeof (   LWORD       ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ),	*((  LWORD       *) (void *) ((char *) ( ap ) - (((sizeof (   LWORD       ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ))) ; ((void)0) ; return tmp; }else{ ( ap  = (__gnuc_va_list) ((char *) ( ap ) + (((sizeof (   LWORD       ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ),	*((  LWORD       *) (void *) ((char *) ( ap ) - (((sizeof (   LWORD       ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ))) ; } } ((void)0) ; return tmp;}    static inline     LWORD     MUX__LWORD__ULINT__LWORD    (BOOL EN, BOOL *ENO ,  ULINT  K, UINT param_count, ...){ va_list ap; UINT i;     LWORD     tmp; if (!EN || (  K >= param_count )) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0      ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  tmp = 0     ; ( ap  = ((__gnuc_va_list) __builtin_next_arg (  param_count ))) ; for (i = 0; i < param_count; i++){ if(K == i){ tmp = ( ap  = (__gnuc_va_list) ((char *) ( ap ) + (((sizeof (   LWORD       ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ),	*((  LWORD       *) (void *) ((char *) ( ap ) - (((sizeof (   LWORD       ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ))) ; ((void)0) ; return tmp; }else{ ( ap  = (__gnuc_va_list) ((char *) ( ap ) + (((sizeof (   LWORD       ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ),	*((  LWORD       *) (void *) ((char *) ( ap ) - (((sizeof (   LWORD       ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ))) ; } } ((void)0) ; return tmp;}           static inline     BOOL     MUX__BOOL__SINT__BOOL    (BOOL EN, BOOL *ENO ,  SINT  K, UINT param_count, ...){ va_list ap; UINT i;     BOOL     tmp; if (!EN || (  K >= param_count )) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0      ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  tmp = 0     ; ( ap  = ((__gnuc_va_list) __builtin_next_arg (  param_count ))) ; for (i = 0; i < param_count; i++){ if(K == i){ tmp = ( ap  = (__gnuc_va_list) ((char *) ( ap ) + (((sizeof (   DWORD       ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ),	*((  DWORD       *) (void *) ((char *) ( ap ) - (((sizeof (   DWORD       ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ))) ; ((void)0) ; return tmp; }else{ ( ap  = (__gnuc_va_list) ((char *) ( ap ) + (((sizeof (   DWORD       ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ),	*((  DWORD       *) (void *) ((char *) ( ap ) - (((sizeof (   DWORD       ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ))) ; } } ((void)0) ; return tmp;}    static inline     BOOL     MUX__BOOL__INT__BOOL    (BOOL EN, BOOL *ENO ,  INT  K, UINT param_count, ...){ va_list ap; UINT i;     BOOL     tmp; if (!EN || (  K >= param_count )) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0      ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  tmp = 0     ; ( ap  = ((__gnuc_va_list) __builtin_next_arg (  param_count ))) ; for (i = 0; i < param_count; i++){ if(K == i){ tmp = ( ap  = (__gnuc_va_list) ((char *) ( ap ) + (((sizeof (   DWORD       ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ),	*((  DWORD       *) (void *) ((char *) ( ap ) - (((sizeof (   DWORD       ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ))) ; ((void)0) ; return tmp; }else{ ( ap  = (__gnuc_va_list) ((char *) ( ap ) + (((sizeof (   DWORD       ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ),	*((  DWORD       *) (void *) ((char *) ( ap ) - (((sizeof (   DWORD       ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ))) ; } } ((void)0) ; return tmp;}    static inline     BOOL     MUX__BOOL__DINT__BOOL    (BOOL EN, BOOL *ENO ,  DINT  K, UINT param_count, ...){ va_list ap; UINT i;     BOOL     tmp; if (!EN || (  K >= param_count )) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0      ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  tmp = 0     ; ( ap  = ((__gnuc_va_list) __builtin_next_arg (  param_count ))) ; for (i = 0; i < param_count; i++){ if(K == i){ tmp = ( ap  = (__gnuc_va_list) ((char *) ( ap ) + (((sizeof (   DWORD       ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ),	*((  DWORD       *) (void *) ((char *) ( ap ) - (((sizeof (   DWORD       ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ))) ; ((void)0) ; return tmp; }else{ ( ap  = (__gnuc_va_list) ((char *) ( ap ) + (((sizeof (   DWORD       ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ),	*((  DWORD       *) (void *) ((char *) ( ap ) - (((sizeof (   DWORD       ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ))) ; } } ((void)0) ; return tmp;}    static inline     BOOL     MUX__BOOL__LINT__BOOL    (BOOL EN, BOOL *ENO ,  LINT  K, UINT param_count, ...){ va_list ap; UINT i;     BOOL     tmp; if (!EN || (  K >= param_count )) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0      ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  tmp = 0     ; ( ap  = ((__gnuc_va_list) __builtin_next_arg (  param_count ))) ; for (i = 0; i < param_count; i++){ if(K == i){ tmp = ( ap  = (__gnuc_va_list) ((char *) ( ap ) + (((sizeof (   DWORD       ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ),	*((  DWORD       *) (void *) ((char *) ( ap ) - (((sizeof (   DWORD       ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ))) ; ((void)0) ; return tmp; }else{ ( ap  = (__gnuc_va_list) ((char *) ( ap ) + (((sizeof (   DWORD       ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ),	*((  DWORD       *) (void *) ((char *) ( ap ) - (((sizeof (   DWORD       ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ))) ; } } ((void)0) ; return tmp;}     static inline     BOOL     MUX__BOOL__USINT__BOOL    (BOOL EN, BOOL *ENO ,  USINT  K, UINT param_count, ...){ va_list ap; UINT i;     BOOL     tmp; if (!EN || (  K >= param_count )) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0      ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  tmp = 0     ; ( ap  = ((__gnuc_va_list) __builtin_next_arg (  param_count ))) ; for (i = 0; i < param_count; i++){ if(K == i){ tmp = ( ap  = (__gnuc_va_list) ((char *) ( ap ) + (((sizeof (   DWORD       ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ),	*((  DWORD       *) (void *) ((char *) ( ap ) - (((sizeof (   DWORD       ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ))) ; ((void)0) ; return tmp; }else{ ( ap  = (__gnuc_va_list) ((char *) ( ap ) + (((sizeof (   DWORD       ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ),	*((  DWORD       *) (void *) ((char *) ( ap ) - (((sizeof (   DWORD       ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ))) ; } } ((void)0) ; return tmp;}    static inline     BOOL     MUX__BOOL__UINT__BOOL    (BOOL EN, BOOL *ENO ,  UINT  K, UINT param_count, ...){ va_list ap; UINT i;     BOOL     tmp; if (!EN || (  K >= param_count )) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0      ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  tmp = 0     ; ( ap  = ((__gnuc_va_list) __builtin_next_arg (  param_count ))) ; for (i = 0; i < param_count; i++){ if(K == i){ tmp = ( ap  = (__gnuc_va_list) ((char *) ( ap ) + (((sizeof (   DWORD       ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ),	*((  DWORD       *) (void *) ((char *) ( ap ) - (((sizeof (   DWORD       ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ))) ; ((void)0) ; return tmp; }else{ ( ap  = (__gnuc_va_list) ((char *) ( ap ) + (((sizeof (   DWORD       ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ),	*((  DWORD       *) (void *) ((char *) ( ap ) - (((sizeof (   DWORD       ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ))) ; } } ((void)0) ; return tmp;}    static inline     BOOL     MUX__BOOL__UDINT__BOOL    (BOOL EN, BOOL *ENO ,  UDINT  K, UINT param_count, ...){ va_list ap; UINT i;     BOOL     tmp; if (!EN || (  K >= param_count )) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0      ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  tmp = 0     ; ( ap  = ((__gnuc_va_list) __builtin_next_arg (  param_count ))) ; for (i = 0; i < param_count; i++){ if(K == i){ tmp = ( ap  = (__gnuc_va_list) ((char *) ( ap ) + (((sizeof (   DWORD       ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ),	*((  DWORD       *) (void *) ((char *) ( ap ) - (((sizeof (   DWORD       ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ))) ; ((void)0) ; return tmp; }else{ ( ap  = (__gnuc_va_list) ((char *) ( ap ) + (((sizeof (   DWORD       ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ),	*((  DWORD       *) (void *) ((char *) ( ap ) - (((sizeof (   DWORD       ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ))) ; } } ((void)0) ; return tmp;}    static inline     BOOL     MUX__BOOL__ULINT__BOOL    (BOOL EN, BOOL *ENO ,  ULINT  K, UINT param_count, ...){ va_list ap; UINT i;     BOOL     tmp; if (!EN || (  K >= param_count )) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0      ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  tmp = 0     ; ( ap  = ((__gnuc_va_list) __builtin_next_arg (  param_count ))) ; for (i = 0; i < param_count; i++){ if(K == i){ tmp = ( ap  = (__gnuc_va_list) ((char *) ( ap ) + (((sizeof (   DWORD       ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ),	*((  DWORD       *) (void *) ((char *) ( ap ) - (((sizeof (   DWORD       ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ))) ; ((void)0) ; return tmp; }else{ ( ap  = (__gnuc_va_list) ((char *) ( ap ) + (((sizeof (   DWORD       ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ),	*((  DWORD       *) (void *) ((char *) ( ap ) - (((sizeof (   DWORD       ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ))) ; } } ((void)0) ; return tmp;}           static inline     STRING     MUX__STRING__SINT__STRING    (BOOL EN, BOOL *ENO ,  SINT  K, UINT param_count, ...){ va_list ap; UINT i;     STRING     tmp; if (!EN || (  K >= param_count )) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return (STRING){0,""}      ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  tmp = (STRING){0,""}     ; ( ap  = ((__gnuc_va_list) __builtin_next_arg (  param_count ))) ; for (i = 0; i < param_count; i++){ if(K == i){ tmp = ( ap  = (__gnuc_va_list) ((char *) ( ap ) + (((sizeof (   STRING       ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ),	*((  STRING       *) (void *) ((char *) ( ap ) - (((sizeof (   STRING       ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ))) ; ((void)0) ; return tmp; }else{ ( ap  = (__gnuc_va_list) ((char *) ( ap ) + (((sizeof (   STRING       ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ),	*((  STRING       *) (void *) ((char *) ( ap ) - (((sizeof (   STRING       ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ))) ; } } ((void)0) ; return tmp;}    static inline     STRING     MUX__STRING__INT__STRING    (BOOL EN, BOOL *ENO ,  INT  K, UINT param_count, ...){ va_list ap; UINT i;     STRING     tmp; if (!EN || (  K >= param_count )) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return (STRING){0,""}      ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  tmp = (STRING){0,""}     ; ( ap  = ((__gnuc_va_list) __builtin_next_arg (  param_count ))) ; for (i = 0; i < param_count; i++){ if(K == i){ tmp = ( ap  = (__gnuc_va_list) ((char *) ( ap ) + (((sizeof (   STRING       ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ),	*((  STRING       *) (void *) ((char *) ( ap ) - (((sizeof (   STRING       ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ))) ; ((void)0) ; return tmp; }else{ ( ap  = (__gnuc_va_list) ((char *) ( ap ) + (((sizeof (   STRING       ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ),	*((  STRING       *) (void *) ((char *) ( ap ) - (((sizeof (   STRING       ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ))) ; } } ((void)0) ; return tmp;}    static inline     STRING     MUX__STRING__DINT__STRING    (BOOL EN, BOOL *ENO ,  DINT  K, UINT param_count, ...){ va_list ap; UINT i;     STRING     tmp; if (!EN || (  K >= param_count )) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return (STRING){0,""}      ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  tmp = (STRING){0,""}     ; ( ap  = ((__gnuc_va_list) __builtin_next_arg (  param_count ))) ; for (i = 0; i < param_count; i++){ if(K == i){ tmp = ( ap  = (__gnuc_va_list) ((char *) ( ap ) + (((sizeof (   STRING       ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ),	*((  STRING       *) (void *) ((char *) ( ap ) - (((sizeof (   STRING       ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ))) ; ((void)0) ; return tmp; }else{ ( ap  = (__gnuc_va_list) ((char *) ( ap ) + (((sizeof (   STRING       ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ),	*((  STRING       *) (void *) ((char *) ( ap ) - (((sizeof (   STRING       ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ))) ; } } ((void)0) ; return tmp;}    static inline     STRING     MUX__STRING__LINT__STRING    (BOOL EN, BOOL *ENO ,  LINT  K, UINT param_count, ...){ va_list ap; UINT i;     STRING     tmp; if (!EN || (  K >= param_count )) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return (STRING){0,""}      ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  tmp = (STRING){0,""}     ; ( ap  = ((__gnuc_va_list) __builtin_next_arg (  param_count ))) ; for (i = 0; i < param_count; i++){ if(K == i){ tmp = ( ap  = (__gnuc_va_list) ((char *) ( ap ) + (((sizeof (   STRING       ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ),	*((  STRING       *) (void *) ((char *) ( ap ) - (((sizeof (   STRING       ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ))) ; ((void)0) ; return tmp; }else{ ( ap  = (__gnuc_va_list) ((char *) ( ap ) + (((sizeof (   STRING       ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ),	*((  STRING       *) (void *) ((char *) ( ap ) - (((sizeof (   STRING       ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ))) ; } } ((void)0) ; return tmp;}     static inline     STRING     MUX__STRING__USINT__STRING    (BOOL EN, BOOL *ENO ,  USINT  K, UINT param_count, ...){ va_list ap; UINT i;     STRING     tmp; if (!EN || (  K >= param_count )) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return (STRING){0,""}      ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  tmp = (STRING){0,""}     ; ( ap  = ((__gnuc_va_list) __builtin_next_arg (  param_count ))) ; for (i = 0; i < param_count; i++){ if(K == i){ tmp = ( ap  = (__gnuc_va_list) ((char *) ( ap ) + (((sizeof (   STRING       ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ),	*((  STRING       *) (void *) ((char *) ( ap ) - (((sizeof (   STRING       ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ))) ; ((void)0) ; return tmp; }else{ ( ap  = (__gnuc_va_list) ((char *) ( ap ) + (((sizeof (   STRING       ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ),	*((  STRING       *) (void *) ((char *) ( ap ) - (((sizeof (   STRING       ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ))) ; } } ((void)0) ; return tmp;}    static inline     STRING     MUX__STRING__UINT__STRING    (BOOL EN, BOOL *ENO ,  UINT  K, UINT param_count, ...){ va_list ap; UINT i;     STRING     tmp; if (!EN || (  K >= param_count )) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return (STRING){0,""}      ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  tmp = (STRING){0,""}     ; ( ap  = ((__gnuc_va_list) __builtin_next_arg (  param_count ))) ; for (i = 0; i < param_count; i++){ if(K == i){ tmp = ( ap  = (__gnuc_va_list) ((char *) ( ap ) + (((sizeof (   STRING       ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ),	*((  STRING       *) (void *) ((char *) ( ap ) - (((sizeof (   STRING       ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ))) ; ((void)0) ; return tmp; }else{ ( ap  = (__gnuc_va_list) ((char *) ( ap ) + (((sizeof (   STRING       ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ),	*((  STRING       *) (void *) ((char *) ( ap ) - (((sizeof (   STRING       ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ))) ; } } ((void)0) ; return tmp;}    static inline     STRING     MUX__STRING__UDINT__STRING    (BOOL EN, BOOL *ENO ,  UDINT  K, UINT param_count, ...){ va_list ap; UINT i;     STRING     tmp; if (!EN || (  K >= param_count )) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return (STRING){0,""}      ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  tmp = (STRING){0,""}     ; ( ap  = ((__gnuc_va_list) __builtin_next_arg (  param_count ))) ; for (i = 0; i < param_count; i++){ if(K == i){ tmp = ( ap  = (__gnuc_va_list) ((char *) ( ap ) + (((sizeof (   STRING       ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ),	*((  STRING       *) (void *) ((char *) ( ap ) - (((sizeof (   STRING       ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ))) ; ((void)0) ; return tmp; }else{ ( ap  = (__gnuc_va_list) ((char *) ( ap ) + (((sizeof (   STRING       ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ),	*((  STRING       *) (void *) ((char *) ( ap ) - (((sizeof (   STRING       ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ))) ; } } ((void)0) ; return tmp;}    static inline     STRING     MUX__STRING__ULINT__STRING    (BOOL EN, BOOL *ENO ,  ULINT  K, UINT param_count, ...){ va_list ap; UINT i;     STRING     tmp; if (!EN || (  K >= param_count )) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return (STRING){0,""}      ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  tmp = (STRING){0,""}     ; ( ap  = ((__gnuc_va_list) __builtin_next_arg (  param_count ))) ; for (i = 0; i < param_count; i++){ if(K == i){ tmp = ( ap  = (__gnuc_va_list) ((char *) ( ap ) + (((sizeof (   STRING       ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ),	*((  STRING       *) (void *) ((char *) ( ap ) - (((sizeof (   STRING       ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ))) ; ((void)0) ; return tmp; }else{ ( ap  = (__gnuc_va_list) ((char *) ( ap ) + (((sizeof (   STRING       ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ),	*((  STRING       *) (void *) ((char *) ( ap ) - (((sizeof (   STRING       ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ))) ; } } ((void)0) ; return tmp;}           static inline     DATE     MUX__DATE__SINT__DATE    (BOOL EN, BOOL *ENO ,  SINT  K, UINT param_count, ...){ va_list ap; UINT i;     DATE     tmp; if (!EN || (  K >= param_count )) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return (DATE){0,0}      ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  tmp = (DATE){0,0}     ; ( ap  = ((__gnuc_va_list) __builtin_next_arg (  param_count ))) ; for (i = 0; i < param_count; i++){ if(K == i){ tmp = ( ap  = (__gnuc_va_list) ((char *) ( ap ) + (((sizeof (   DATE       ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ),	*((  DATE       *) (void *) ((char *) ( ap ) - (((sizeof (   DATE       ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ))) ; ((void)0) ; return tmp; }else{ ( ap  = (__gnuc_va_list) ((char *) ( ap ) + (((sizeof (   DATE       ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ),	*((  DATE       *) (void *) ((char *) ( ap ) - (((sizeof (   DATE       ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ))) ; } } ((void)0) ; return tmp;}    static inline     DATE     MUX__DATE__INT__DATE    (BOOL EN, BOOL *ENO ,  INT  K, UINT param_count, ...){ va_list ap; UINT i;     DATE     tmp; if (!EN || (  K >= param_count )) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return (DATE){0,0}      ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  tmp = (DATE){0,0}     ; ( ap  = ((__gnuc_va_list) __builtin_next_arg (  param_count ))) ; for (i = 0; i < param_count; i++){ if(K == i){ tmp = ( ap  = (__gnuc_va_list) ((char *) ( ap ) + (((sizeof (   DATE       ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ),	*((  DATE       *) (void *) ((char *) ( ap ) - (((sizeof (   DATE       ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ))) ; ((void)0) ; return tmp; }else{ ( ap  = (__gnuc_va_list) ((char *) ( ap ) + (((sizeof (   DATE       ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ),	*((  DATE       *) (void *) ((char *) ( ap ) - (((sizeof (   DATE       ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ))) ; } } ((void)0) ; return tmp;}    static inline     DATE     MUX__DATE__DINT__DATE    (BOOL EN, BOOL *ENO ,  DINT  K, UINT param_count, ...){ va_list ap; UINT i;     DATE     tmp; if (!EN || (  K >= param_count )) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return (DATE){0,0}      ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  tmp = (DATE){0,0}     ; ( ap  = ((__gnuc_va_list) __builtin_next_arg (  param_count ))) ; for (i = 0; i < param_count; i++){ if(K == i){ tmp = ( ap  = (__gnuc_va_list) ((char *) ( ap ) + (((sizeof (   DATE       ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ),	*((  DATE       *) (void *) ((char *) ( ap ) - (((sizeof (   DATE       ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ))) ; ((void)0) ; return tmp; }else{ ( ap  = (__gnuc_va_list) ((char *) ( ap ) + (((sizeof (   DATE       ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ),	*((  DATE       *) (void *) ((char *) ( ap ) - (((sizeof (   DATE       ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ))) ; } } ((void)0) ; return tmp;}    static inline     DATE     MUX__DATE__LINT__DATE    (BOOL EN, BOOL *ENO ,  LINT  K, UINT param_count, ...){ va_list ap; UINT i;     DATE     tmp; if (!EN || (  K >= param_count )) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return (DATE){0,0}      ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  tmp = (DATE){0,0}     ; ( ap  = ((__gnuc_va_list) __builtin_next_arg (  param_count ))) ; for (i = 0; i < param_count; i++){ if(K == i){ tmp = ( ap  = (__gnuc_va_list) ((char *) ( ap ) + (((sizeof (   DATE       ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ),	*((  DATE       *) (void *) ((char *) ( ap ) - (((sizeof (   DATE       ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ))) ; ((void)0) ; return tmp; }else{ ( ap  = (__gnuc_va_list) ((char *) ( ap ) + (((sizeof (   DATE       ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ),	*((  DATE       *) (void *) ((char *) ( ap ) - (((sizeof (   DATE       ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ))) ; } } ((void)0) ; return tmp;}     static inline     DATE     MUX__DATE__USINT__DATE    (BOOL EN, BOOL *ENO ,  USINT  K, UINT param_count, ...){ va_list ap; UINT i;     DATE     tmp; if (!EN || (  K >= param_count )) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return (DATE){0,0}      ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  tmp = (DATE){0,0}     ; ( ap  = ((__gnuc_va_list) __builtin_next_arg (  param_count ))) ; for (i = 0; i < param_count; i++){ if(K == i){ tmp = ( ap  = (__gnuc_va_list) ((char *) ( ap ) + (((sizeof (   DATE       ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ),	*((  DATE       *) (void *) ((char *) ( ap ) - (((sizeof (   DATE       ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ))) ; ((void)0) ; return tmp; }else{ ( ap  = (__gnuc_va_list) ((char *) ( ap ) + (((sizeof (   DATE       ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ),	*((  DATE       *) (void *) ((char *) ( ap ) - (((sizeof (   DATE       ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ))) ; } } ((void)0) ; return tmp;}    static inline     DATE     MUX__DATE__UINT__DATE    (BOOL EN, BOOL *ENO ,  UINT  K, UINT param_count, ...){ va_list ap; UINT i;     DATE     tmp; if (!EN || (  K >= param_count )) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return (DATE){0,0}      ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  tmp = (DATE){0,0}     ; ( ap  = ((__gnuc_va_list) __builtin_next_arg (  param_count ))) ; for (i = 0; i < param_count; i++){ if(K == i){ tmp = ( ap  = (__gnuc_va_list) ((char *) ( ap ) + (((sizeof (   DATE       ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ),	*((  DATE       *) (void *) ((char *) ( ap ) - (((sizeof (   DATE       ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ))) ; ((void)0) ; return tmp; }else{ ( ap  = (__gnuc_va_list) ((char *) ( ap ) + (((sizeof (   DATE       ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ),	*((  DATE       *) (void *) ((char *) ( ap ) - (((sizeof (   DATE       ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ))) ; } } ((void)0) ; return tmp;}    static inline     DATE     MUX__DATE__UDINT__DATE    (BOOL EN, BOOL *ENO ,  UDINT  K, UINT param_count, ...){ va_list ap; UINT i;     DATE     tmp; if (!EN || (  K >= param_count )) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return (DATE){0,0}      ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  tmp = (DATE){0,0}     ; ( ap  = ((__gnuc_va_list) __builtin_next_arg (  param_count ))) ; for (i = 0; i < param_count; i++){ if(K == i){ tmp = ( ap  = (__gnuc_va_list) ((char *) ( ap ) + (((sizeof (   DATE       ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ),	*((  DATE       *) (void *) ((char *) ( ap ) - (((sizeof (   DATE       ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ))) ; ((void)0) ; return tmp; }else{ ( ap  = (__gnuc_va_list) ((char *) ( ap ) + (((sizeof (   DATE       ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ),	*((  DATE       *) (void *) ((char *) ( ap ) - (((sizeof (   DATE       ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ))) ; } } ((void)0) ; return tmp;}    static inline     DATE     MUX__DATE__ULINT__DATE    (BOOL EN, BOOL *ENO ,  ULINT  K, UINT param_count, ...){ va_list ap; UINT i;     DATE     tmp; if (!EN || (  K >= param_count )) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return (DATE){0,0}      ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  tmp = (DATE){0,0}     ; ( ap  = ((__gnuc_va_list) __builtin_next_arg (  param_count ))) ; for (i = 0; i < param_count; i++){ if(K == i){ tmp = ( ap  = (__gnuc_va_list) ((char *) ( ap ) + (((sizeof (   DATE       ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ),	*((  DATE       *) (void *) ((char *) ( ap ) - (((sizeof (   DATE       ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ))) ; ((void)0) ; return tmp; }else{ ( ap  = (__gnuc_va_list) ((char *) ( ap ) + (((sizeof (   DATE       ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ),	*((  DATE       *) (void *) ((char *) ( ap ) - (((sizeof (   DATE       ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ))) ; } } ((void)0) ; return tmp;}          static inline     TOD     MUX__TOD__SINT__TOD    (BOOL EN, BOOL *ENO ,  SINT  K, UINT param_count, ...){ va_list ap; UINT i;     TOD     tmp; if (!EN || (  K >= param_count )) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return (TOD){0,0}      ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  tmp = (TOD){0,0}     ; ( ap  = ((__gnuc_va_list) __builtin_next_arg (  param_count ))) ; for (i = 0; i < param_count; i++){ if(K == i){ tmp = ( ap  = (__gnuc_va_list) ((char *) ( ap ) + (((sizeof (   TOD       ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ),	*((  TOD       *) (void *) ((char *) ( ap ) - (((sizeof (   TOD       ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ))) ; ((void)0) ; return tmp; }else{ ( ap  = (__gnuc_va_list) ((char *) ( ap ) + (((sizeof (   TOD       ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ),	*((  TOD       *) (void *) ((char *) ( ap ) - (((sizeof (   TOD       ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ))) ; } } ((void)0) ; return tmp;}    static inline     TOD     MUX__TOD__INT__TOD    (BOOL EN, BOOL *ENO ,  INT  K, UINT param_count, ...){ va_list ap; UINT i;     TOD     tmp; if (!EN || (  K >= param_count )) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return (TOD){0,0}      ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  tmp = (TOD){0,0}     ; ( ap  = ((__gnuc_va_list) __builtin_next_arg (  param_count ))) ; for (i = 0; i < param_count; i++){ if(K == i){ tmp = ( ap  = (__gnuc_va_list) ((char *) ( ap ) + (((sizeof (   TOD       ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ),	*((  TOD       *) (void *) ((char *) ( ap ) - (((sizeof (   TOD       ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ))) ; ((void)0) ; return tmp; }else{ ( ap  = (__gnuc_va_list) ((char *) ( ap ) + (((sizeof (   TOD       ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ),	*((  TOD       *) (void *) ((char *) ( ap ) - (((sizeof (   TOD       ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ))) ; } } ((void)0) ; return tmp;}    static inline     TOD     MUX__TOD__DINT__TOD    (BOOL EN, BOOL *ENO ,  DINT  K, UINT param_count, ...){ va_list ap; UINT i;     TOD     tmp; if (!EN || (  K >= param_count )) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return (TOD){0,0}      ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  tmp = (TOD){0,0}     ; ( ap  = ((__gnuc_va_list) __builtin_next_arg (  param_count ))) ; for (i = 0; i < param_count; i++){ if(K == i){ tmp = ( ap  = (__gnuc_va_list) ((char *) ( ap ) + (((sizeof (   TOD       ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ),	*((  TOD       *) (void *) ((char *) ( ap ) - (((sizeof (   TOD       ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ))) ; ((void)0) ; return tmp; }else{ ( ap  = (__gnuc_va_list) ((char *) ( ap ) + (((sizeof (   TOD       ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ),	*((  TOD       *) (void *) ((char *) ( ap ) - (((sizeof (   TOD       ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ))) ; } } ((void)0) ; return tmp;}    static inline     TOD     MUX__TOD__LINT__TOD    (BOOL EN, BOOL *ENO ,  LINT  K, UINT param_count, ...){ va_list ap; UINT i;     TOD     tmp; if (!EN || (  K >= param_count )) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return (TOD){0,0}      ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  tmp = (TOD){0,0}     ; ( ap  = ((__gnuc_va_list) __builtin_next_arg (  param_count ))) ; for (i = 0; i < param_count; i++){ if(K == i){ tmp = ( ap  = (__gnuc_va_list) ((char *) ( ap ) + (((sizeof (   TOD       ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ),	*((  TOD       *) (void *) ((char *) ( ap ) - (((sizeof (   TOD       ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ))) ; ((void)0) ; return tmp; }else{ ( ap  = (__gnuc_va_list) ((char *) ( ap ) + (((sizeof (   TOD       ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ),	*((  TOD       *) (void *) ((char *) ( ap ) - (((sizeof (   TOD       ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ))) ; } } ((void)0) ; return tmp;}     static inline     TOD     MUX__TOD__USINT__TOD    (BOOL EN, BOOL *ENO ,  USINT  K, UINT param_count, ...){ va_list ap; UINT i;     TOD     tmp; if (!EN || (  K >= param_count )) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return (TOD){0,0}      ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  tmp = (TOD){0,0}     ; ( ap  = ((__gnuc_va_list) __builtin_next_arg (  param_count ))) ; for (i = 0; i < param_count; i++){ if(K == i){ tmp = ( ap  = (__gnuc_va_list) ((char *) ( ap ) + (((sizeof (   TOD       ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ),	*((  TOD       *) (void *) ((char *) ( ap ) - (((sizeof (   TOD       ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ))) ; ((void)0) ; return tmp; }else{ ( ap  = (__gnuc_va_list) ((char *) ( ap ) + (((sizeof (   TOD       ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ),	*((  TOD       *) (void *) ((char *) ( ap ) - (((sizeof (   TOD       ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ))) ; } } ((void)0) ; return tmp;}    static inline     TOD     MUX__TOD__UINT__TOD    (BOOL EN, BOOL *ENO ,  UINT  K, UINT param_count, ...){ va_list ap; UINT i;     TOD     tmp; if (!EN || (  K >= param_count )) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return (TOD){0,0}      ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  tmp = (TOD){0,0}     ; ( ap  = ((__gnuc_va_list) __builtin_next_arg (  param_count ))) ; for (i = 0; i < param_count; i++){ if(K == i){ tmp = ( ap  = (__gnuc_va_list) ((char *) ( ap ) + (((sizeof (   TOD       ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ),	*((  TOD       *) (void *) ((char *) ( ap ) - (((sizeof (   TOD       ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ))) ; ((void)0) ; return tmp; }else{ ( ap  = (__gnuc_va_list) ((char *) ( ap ) + (((sizeof (   TOD       ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ),	*((  TOD       *) (void *) ((char *) ( ap ) - (((sizeof (   TOD       ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ))) ; } } ((void)0) ; return tmp;}    static inline     TOD     MUX__TOD__UDINT__TOD    (BOOL EN, BOOL *ENO ,  UDINT  K, UINT param_count, ...){ va_list ap; UINT i;     TOD     tmp; if (!EN || (  K >= param_count )) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return (TOD){0,0}      ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  tmp = (TOD){0,0}     ; ( ap  = ((__gnuc_va_list) __builtin_next_arg (  param_count ))) ; for (i = 0; i < param_count; i++){ if(K == i){ tmp = ( ap  = (__gnuc_va_list) ((char *) ( ap ) + (((sizeof (   TOD       ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ),	*((  TOD       *) (void *) ((char *) ( ap ) - (((sizeof (   TOD       ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ))) ; ((void)0) ; return tmp; }else{ ( ap  = (__gnuc_va_list) ((char *) ( ap ) + (((sizeof (   TOD       ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ),	*((  TOD       *) (void *) ((char *) ( ap ) - (((sizeof (   TOD       ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ))) ; } } ((void)0) ; return tmp;}    static inline     TOD     MUX__TOD__ULINT__TOD    (BOOL EN, BOOL *ENO ,  ULINT  K, UINT param_count, ...){ va_list ap; UINT i;     TOD     tmp; if (!EN || (  K >= param_count )) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return (TOD){0,0}      ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  tmp = (TOD){0,0}     ; ( ap  = ((__gnuc_va_list) __builtin_next_arg (  param_count ))) ; for (i = 0; i < param_count; i++){ if(K == i){ tmp = ( ap  = (__gnuc_va_list) ((char *) ( ap ) + (((sizeof (   TOD       ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ),	*((  TOD       *) (void *) ((char *) ( ap ) - (((sizeof (   TOD       ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ))) ; ((void)0) ; return tmp; }else{ ( ap  = (__gnuc_va_list) ((char *) ( ap ) + (((sizeof (   TOD       ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ),	*((  TOD       *) (void *) ((char *) ( ap ) - (((sizeof (   TOD       ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ))) ; } } ((void)0) ; return tmp;}          static inline     DT     MUX__DT__SINT__DT    (BOOL EN, BOOL *ENO ,  SINT  K, UINT param_count, ...){ va_list ap; UINT i;     DT     tmp; if (!EN || (  K >= param_count )) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return (DT){0,0}      ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  tmp = (DT){0,0}     ; ( ap  = ((__gnuc_va_list) __builtin_next_arg (  param_count ))) ; for (i = 0; i < param_count; i++){ if(K == i){ tmp = ( ap  = (__gnuc_va_list) ((char *) ( ap ) + (((sizeof (   DT       ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ),	*((  DT       *) (void *) ((char *) ( ap ) - (((sizeof (   DT       ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ))) ; ((void)0) ; return tmp; }else{ ( ap  = (__gnuc_va_list) ((char *) ( ap ) + (((sizeof (   DT       ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ),	*((  DT       *) (void *) ((char *) ( ap ) - (((sizeof (   DT       ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ))) ; } } ((void)0) ; return tmp;}    static inline     DT     MUX__DT__INT__DT    (BOOL EN, BOOL *ENO ,  INT  K, UINT param_count, ...){ va_list ap; UINT i;     DT     tmp; if (!EN || (  K >= param_count )) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return (DT){0,0}      ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  tmp = (DT){0,0}     ; ( ap  = ((__gnuc_va_list) __builtin_next_arg (  param_count ))) ; for (i = 0; i < param_count; i++){ if(K == i){ tmp = ( ap  = (__gnuc_va_list) ((char *) ( ap ) + (((sizeof (   DT       ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ),	*((  DT       *) (void *) ((char *) ( ap ) - (((sizeof (   DT       ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ))) ; ((void)0) ; return tmp; }else{ ( ap  = (__gnuc_va_list) ((char *) ( ap ) + (((sizeof (   DT       ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ),	*((  DT       *) (void *) ((char *) ( ap ) - (((sizeof (   DT       ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ))) ; } } ((void)0) ; return tmp;}    static inline     DT     MUX__DT__DINT__DT    (BOOL EN, BOOL *ENO ,  DINT  K, UINT param_count, ...){ va_list ap; UINT i;     DT     tmp; if (!EN || (  K >= param_count )) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return (DT){0,0}      ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  tmp = (DT){0,0}     ; ( ap  = ((__gnuc_va_list) __builtin_next_arg (  param_count ))) ; for (i = 0; i < param_count; i++){ if(K == i){ tmp = ( ap  = (__gnuc_va_list) ((char *) ( ap ) + (((sizeof (   DT       ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ),	*((  DT       *) (void *) ((char *) ( ap ) - (((sizeof (   DT       ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ))) ; ((void)0) ; return tmp; }else{ ( ap  = (__gnuc_va_list) ((char *) ( ap ) + (((sizeof (   DT       ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ),	*((  DT       *) (void *) ((char *) ( ap ) - (((sizeof (   DT       ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ))) ; } } ((void)0) ; return tmp;}    static inline     DT     MUX__DT__LINT__DT    (BOOL EN, BOOL *ENO ,  LINT  K, UINT param_count, ...){ va_list ap; UINT i;     DT     tmp; if (!EN || (  K >= param_count )) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return (DT){0,0}      ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  tmp = (DT){0,0}     ; ( ap  = ((__gnuc_va_list) __builtin_next_arg (  param_count ))) ; for (i = 0; i < param_count; i++){ if(K == i){ tmp = ( ap  = (__gnuc_va_list) ((char *) ( ap ) + (((sizeof (   DT       ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ),	*((  DT       *) (void *) ((char *) ( ap ) - (((sizeof (   DT       ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ))) ; ((void)0) ; return tmp; }else{ ( ap  = (__gnuc_va_list) ((char *) ( ap ) + (((sizeof (   DT       ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ),	*((  DT       *) (void *) ((char *) ( ap ) - (((sizeof (   DT       ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ))) ; } } ((void)0) ; return tmp;}     static inline     DT     MUX__DT__USINT__DT    (BOOL EN, BOOL *ENO ,  USINT  K, UINT param_count, ...){ va_list ap; UINT i;     DT     tmp; if (!EN || (  K >= param_count )) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return (DT){0,0}      ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  tmp = (DT){0,0}     ; ( ap  = ((__gnuc_va_list) __builtin_next_arg (  param_count ))) ; for (i = 0; i < param_count; i++){ if(K == i){ tmp = ( ap  = (__gnuc_va_list) ((char *) ( ap ) + (((sizeof (   DT       ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ),	*((  DT       *) (void *) ((char *) ( ap ) - (((sizeof (   DT       ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ))) ; ((void)0) ; return tmp; }else{ ( ap  = (__gnuc_va_list) ((char *) ( ap ) + (((sizeof (   DT       ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ),	*((  DT       *) (void *) ((char *) ( ap ) - (((sizeof (   DT       ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ))) ; } } ((void)0) ; return tmp;}    static inline     DT     MUX__DT__UINT__DT    (BOOL EN, BOOL *ENO ,  UINT  K, UINT param_count, ...){ va_list ap; UINT i;     DT     tmp; if (!EN || (  K >= param_count )) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return (DT){0,0}      ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  tmp = (DT){0,0}     ; ( ap  = ((__gnuc_va_list) __builtin_next_arg (  param_count ))) ; for (i = 0; i < param_count; i++){ if(K == i){ tmp = ( ap  = (__gnuc_va_list) ((char *) ( ap ) + (((sizeof (   DT       ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ),	*((  DT       *) (void *) ((char *) ( ap ) - (((sizeof (   DT       ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ))) ; ((void)0) ; return tmp; }else{ ( ap  = (__gnuc_va_list) ((char *) ( ap ) + (((sizeof (   DT       ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ),	*((  DT       *) (void *) ((char *) ( ap ) - (((sizeof (   DT       ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ))) ; } } ((void)0) ; return tmp;}    static inline     DT     MUX__DT__UDINT__DT    (BOOL EN, BOOL *ENO ,  UDINT  K, UINT param_count, ...){ va_list ap; UINT i;     DT     tmp; if (!EN || (  K >= param_count )) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return (DT){0,0}      ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  tmp = (DT){0,0}     ; ( ap  = ((__gnuc_va_list) __builtin_next_arg (  param_count ))) ; for (i = 0; i < param_count; i++){ if(K == i){ tmp = ( ap  = (__gnuc_va_list) ((char *) ( ap ) + (((sizeof (   DT       ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ),	*((  DT       *) (void *) ((char *) ( ap ) - (((sizeof (   DT       ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ))) ; ((void)0) ; return tmp; }else{ ( ap  = (__gnuc_va_list) ((char *) ( ap ) + (((sizeof (   DT       ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ),	*((  DT       *) (void *) ((char *) ( ap ) - (((sizeof (   DT       ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ))) ; } } ((void)0) ; return tmp;}    static inline     DT     MUX__DT__ULINT__DT    (BOOL EN, BOOL *ENO ,  ULINT  K, UINT param_count, ...){ va_list ap; UINT i;     DT     tmp; if (!EN || (  K >= param_count )) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return (DT){0,0}      ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  tmp = (DT){0,0}     ; ( ap  = ((__gnuc_va_list) __builtin_next_arg (  param_count ))) ; for (i = 0; i < param_count; i++){ if(K == i){ tmp = ( ap  = (__gnuc_va_list) ((char *) ( ap ) + (((sizeof (   DT       ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ),	*((  DT       *) (void *) ((char *) ( ap ) - (((sizeof (   DT       ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ))) ; ((void)0) ; return tmp; }else{ ( ap  = (__gnuc_va_list) ((char *) ( ap ) + (((sizeof (   DT       ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ),	*((  DT       *) (void *) ((char *) ( ap ) - (((sizeof (   DT       ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ))) ; } } ((void)0) ; return tmp;}       



 
 
 
 


# 1618 "iec_std_lib.h"






     
     
     
 



 static inline BOOL   GT_BYTE   (BOOL EN, BOOL *ENO , UINT param_count,      BYTE    op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0  ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  ( ap  = ((__gnuc_va_list) __builtin_next_arg (  op1 ))) ; DBG("GT_BYTE" "BYTE" "\n")   for (i = 0; i < param_count - 1; i++){      BYTE    tmp = ( ap  = (__gnuc_va_list) ((char *) ( ap ) + (((sizeof (   DWORD      ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ),	*((  DWORD      *) (void *) ((char *) ( ap ) - (((sizeof (   DWORD      ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ))) ;   if(  op1   >   tmp  ){ op1 = tmp; }else{ ((void)0) ; return 0; } } ((void)0) ; return 1;}   static inline BOOL   GT__BOOL__BYTE   (BOOL EN, BOOL *ENO , UINT param_count,      BYTE    op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0  ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  ( ap  = ((__gnuc_va_list) __builtin_next_arg (  op1 ))) ; DBG("GT__BOOL__BYTE" "BYTE" "\n")   for (i = 0; i < param_count - 1; i++){      BYTE    tmp = ( ap  = (__gnuc_va_list) ((char *) ( ap ) + (((sizeof (   DWORD      ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ),	*((  DWORD      *) (void *) ((char *) ( ap ) - (((sizeof (   DWORD      ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ))) ;   if(  op1   >   tmp  ){ op1 = tmp; }else{ ((void)0) ; return 0; } } ((void)0) ; return 1;}     static inline BOOL   GT_WORD   (BOOL EN, BOOL *ENO , UINT param_count,      WORD    op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0  ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  ( ap  = ((__gnuc_va_list) __builtin_next_arg (  op1 ))) ; DBG("GT_WORD" "WORD" "\n")   for (i = 0; i < param_count - 1; i++){      WORD    tmp = ( ap  = (__gnuc_va_list) ((char *) ( ap ) + (((sizeof (   DWORD      ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ),	*((  DWORD      *) (void *) ((char *) ( ap ) - (((sizeof (   DWORD      ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ))) ;   if(  op1   >   tmp  ){ op1 = tmp; }else{ ((void)0) ; return 0; } } ((void)0) ; return 1;}   static inline BOOL   GT__BOOL__WORD   (BOOL EN, BOOL *ENO , UINT param_count,      WORD    op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0  ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  ( ap  = ((__gnuc_va_list) __builtin_next_arg (  op1 ))) ; DBG("GT__BOOL__WORD" "WORD" "\n")   for (i = 0; i < param_count - 1; i++){      WORD    tmp = ( ap  = (__gnuc_va_list) ((char *) ( ap ) + (((sizeof (   DWORD      ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ),	*((  DWORD      *) (void *) ((char *) ( ap ) - (((sizeof (   DWORD      ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ))) ;   if(  op1   >   tmp  ){ op1 = tmp; }else{ ((void)0) ; return 0; } } ((void)0) ; return 1;}     static inline BOOL   GT_DWORD   (BOOL EN, BOOL *ENO , UINT param_count,      DWORD    op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0  ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  ( ap  = ((__gnuc_va_list) __builtin_next_arg (  op1 ))) ; DBG("GT_DWORD" "DWORD" "\n")   for (i = 0; i < param_count - 1; i++){      DWORD    tmp = ( ap  = (__gnuc_va_list) ((char *) ( ap ) + (((sizeof (   DWORD      ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ),	*((  DWORD      *) (void *) ((char *) ( ap ) - (((sizeof (   DWORD      ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ))) ;   if(  op1   >   tmp  ){ op1 = tmp; }else{ ((void)0) ; return 0; } } ((void)0) ; return 1;}   static inline BOOL   GT__BOOL__DWORD   (BOOL EN, BOOL *ENO , UINT param_count,      DWORD    op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0  ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  ( ap  = ((__gnuc_va_list) __builtin_next_arg (  op1 ))) ; DBG("GT__BOOL__DWORD" "DWORD" "\n")   for (i = 0; i < param_count - 1; i++){      DWORD    tmp = ( ap  = (__gnuc_va_list) ((char *) ( ap ) + (((sizeof (   DWORD      ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ),	*((  DWORD      *) (void *) ((char *) ( ap ) - (((sizeof (   DWORD      ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ))) ;   if(  op1   >   tmp  ){ op1 = tmp; }else{ ((void)0) ; return 0; } } ((void)0) ; return 1;}     static inline BOOL   GT_LWORD   (BOOL EN, BOOL *ENO , UINT param_count,      LWORD    op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0  ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  ( ap  = ((__gnuc_va_list) __builtin_next_arg (  op1 ))) ; DBG("GT_LWORD" "LWORD" "\n")   for (i = 0; i < param_count - 1; i++){      LWORD    tmp = ( ap  = (__gnuc_va_list) ((char *) ( ap ) + (((sizeof (   LWORD      ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ),	*((  LWORD      *) (void *) ((char *) ( ap ) - (((sizeof (   LWORD      ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ))) ;   if(  op1   >   tmp  ){ op1 = tmp; }else{ ((void)0) ; return 0; } } ((void)0) ; return 1;}   static inline BOOL   GT__BOOL__LWORD   (BOOL EN, BOOL *ENO , UINT param_count,      LWORD    op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0  ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  ( ap  = ((__gnuc_va_list) __builtin_next_arg (  op1 ))) ; DBG("GT__BOOL__LWORD" "LWORD" "\n")   for (i = 0; i < param_count - 1; i++){      LWORD    tmp = ( ap  = (__gnuc_va_list) ((char *) ( ap ) + (((sizeof (   LWORD      ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ),	*((  LWORD      *) (void *) ((char *) ( ap ) - (((sizeof (   LWORD      ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ))) ;   if(  op1   >   tmp  ){ op1 = tmp; }else{ ((void)0) ; return 0; } } ((void)0) ; return 1;}    
  static inline BOOL   GT_REAL   (BOOL EN, BOOL *ENO , UINT param_count,      REAL    op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0  ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  ( ap  = ((__gnuc_va_list) __builtin_next_arg (  op1 ))) ; DBG("GT_REAL" "REAL" "\n")   for (i = 0; i < param_count - 1; i++){      REAL    tmp = ( ap  = (__gnuc_va_list) ((char *) ( ap ) + (((sizeof (   LREAL      ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ),	*((  LREAL      *) (void *) ((char *) ( ap ) - (((sizeof (   LREAL      ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ))) ;   if(  op1   >   tmp  ){ op1 = tmp; }else{ ((void)0) ; return 0; } } ((void)0) ; return 1;}   static inline BOOL   GT__BOOL__REAL   (BOOL EN, BOOL *ENO , UINT param_count,      REAL    op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0  ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  ( ap  = ((__gnuc_va_list) __builtin_next_arg (  op1 ))) ; DBG("GT__BOOL__REAL" "REAL" "\n")   for (i = 0; i < param_count - 1; i++){      REAL    tmp = ( ap  = (__gnuc_va_list) ((char *) ( ap ) + (((sizeof (   LREAL      ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ),	*((  LREAL      *) (void *) ((char *) ( ap ) - (((sizeof (   LREAL      ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ))) ;   if(  op1   >   tmp  ){ op1 = tmp; }else{ ((void)0) ; return 0; } } ((void)0) ; return 1;}      static inline BOOL   GT_LREAL   (BOOL EN, BOOL *ENO , UINT param_count,      LREAL    op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0  ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  ( ap  = ((__gnuc_va_list) __builtin_next_arg (  op1 ))) ; DBG("GT_LREAL" "LREAL" "\n")   for (i = 0; i < param_count - 1; i++){      LREAL    tmp = ( ap  = (__gnuc_va_list) ((char *) ( ap ) + (((sizeof (   LREAL      ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ),	*((  LREAL      *) (void *) ((char *) ( ap ) - (((sizeof (   LREAL      ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ))) ;   if(  op1   >   tmp  ){ op1 = tmp; }else{ ((void)0) ; return 0; } } ((void)0) ; return 1;}   static inline BOOL   GT__BOOL__LREAL   (BOOL EN, BOOL *ENO , UINT param_count,      LREAL    op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0  ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  ( ap  = ((__gnuc_va_list) __builtin_next_arg (  op1 ))) ; DBG("GT__BOOL__LREAL" "LREAL" "\n")   for (i = 0; i < param_count - 1; i++){      LREAL    tmp = ( ap  = (__gnuc_va_list) ((char *) ( ap ) + (((sizeof (   LREAL      ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ),	*((  LREAL      *) (void *) ((char *) ( ap ) - (((sizeof (   LREAL      ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ))) ;   if(  op1   >   tmp  ){ op1 = tmp; }else{ ((void)0) ; return 0; } } ((void)0) ; return 1;}        static inline BOOL   GT_SINT   (BOOL EN, BOOL *ENO , UINT param_count,      SINT    op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0  ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  ( ap  = ((__gnuc_va_list) __builtin_next_arg (  op1 ))) ; DBG("GT_SINT" "SINT" "\n")   for (i = 0; i < param_count - 1; i++){      SINT    tmp = ( ap  = (__gnuc_va_list) ((char *) ( ap ) + (((sizeof (   DINT      ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ),	*((  DINT      *) (void *) ((char *) ( ap ) - (((sizeof (   DINT      ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ))) ;   if(  op1   >   tmp  ){ op1 = tmp; }else{ ((void)0) ; return 0; } } ((void)0) ; return 1;}   static inline BOOL   GT__BOOL__SINT   (BOOL EN, BOOL *ENO , UINT param_count,      SINT    op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0  ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  ( ap  = ((__gnuc_va_list) __builtin_next_arg (  op1 ))) ; DBG("GT__BOOL__SINT" "SINT" "\n")   for (i = 0; i < param_count - 1; i++){      SINT    tmp = ( ap  = (__gnuc_va_list) ((char *) ( ap ) + (((sizeof (   DINT      ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ),	*((  DINT      *) (void *) ((char *) ( ap ) - (((sizeof (   DINT      ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ))) ;   if(  op1   >   tmp  ){ op1 = tmp; }else{ ((void)0) ; return 0; } } ((void)0) ; return 1;}       static inline BOOL   GT_INT   (BOOL EN, BOOL *ENO , UINT param_count,      INT    op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0  ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  ( ap  = ((__gnuc_va_list) __builtin_next_arg (  op1 ))) ; DBG("GT_INT" "INT" "\n")   for (i = 0; i < param_count - 1; i++){      INT    tmp = ( ap  = (__gnuc_va_list) ((char *) ( ap ) + (((sizeof (   DINT      ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ),	*((  DINT      *) (void *) ((char *) ( ap ) - (((sizeof (   DINT      ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ))) ;   if(  op1   >   tmp  ){ op1 = tmp; }else{ ((void)0) ; return 0; } } ((void)0) ; return 1;}   static inline BOOL   GT__BOOL__INT   (BOOL EN, BOOL *ENO , UINT param_count,      INT    op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0  ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  ( ap  = ((__gnuc_va_list) __builtin_next_arg (  op1 ))) ; DBG("GT__BOOL__INT" "INT" "\n")   for (i = 0; i < param_count - 1; i++){      INT    tmp = ( ap  = (__gnuc_va_list) ((char *) ( ap ) + (((sizeof (   DINT      ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ),	*((  DINT      *) (void *) ((char *) ( ap ) - (((sizeof (   DINT      ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ))) ;   if(  op1   >   tmp  ){ op1 = tmp; }else{ ((void)0) ; return 0; } } ((void)0) ; return 1;}       static inline BOOL   GT_DINT   (BOOL EN, BOOL *ENO , UINT param_count,      DINT    op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0  ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  ( ap  = ((__gnuc_va_list) __builtin_next_arg (  op1 ))) ; DBG("GT_DINT" "DINT" "\n")   for (i = 0; i < param_count - 1; i++){      DINT    tmp = ( ap  = (__gnuc_va_list) ((char *) ( ap ) + (((sizeof (   DINT      ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ),	*((  DINT      *) (void *) ((char *) ( ap ) - (((sizeof (   DINT      ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ))) ;   if(  op1   >   tmp  ){ op1 = tmp; }else{ ((void)0) ; return 0; } } ((void)0) ; return 1;}   static inline BOOL   GT__BOOL__DINT   (BOOL EN, BOOL *ENO , UINT param_count,      DINT    op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0  ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  ( ap  = ((__gnuc_va_list) __builtin_next_arg (  op1 ))) ; DBG("GT__BOOL__DINT" "DINT" "\n")   for (i = 0; i < param_count - 1; i++){      DINT    tmp = ( ap  = (__gnuc_va_list) ((char *) ( ap ) + (((sizeof (   DINT      ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ),	*((  DINT      *) (void *) ((char *) ( ap ) - (((sizeof (   DINT      ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ))) ;   if(  op1   >   tmp  ){ op1 = tmp; }else{ ((void)0) ; return 0; } } ((void)0) ; return 1;}       static inline BOOL   GT_LINT   (BOOL EN, BOOL *ENO , UINT param_count,      LINT    op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0  ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  ( ap  = ((__gnuc_va_list) __builtin_next_arg (  op1 ))) ; DBG("GT_LINT" "LINT" "\n")   for (i = 0; i < param_count - 1; i++){      LINT    tmp = ( ap  = (__gnuc_va_list) ((char *) ( ap ) + (((sizeof (   LINT      ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ),	*((  LINT      *) (void *) ((char *) ( ap ) - (((sizeof (   LINT      ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ))) ;   if(  op1   >   tmp  ){ op1 = tmp; }else{ ((void)0) ; return 0; } } ((void)0) ; return 1;}   static inline BOOL   GT__BOOL__LINT   (BOOL EN, BOOL *ENO , UINT param_count,      LINT    op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0  ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  ( ap  = ((__gnuc_va_list) __builtin_next_arg (  op1 ))) ; DBG("GT__BOOL__LINT" "LINT" "\n")   for (i = 0; i < param_count - 1; i++){      LINT    tmp = ( ap  = (__gnuc_va_list) ((char *) ( ap ) + (((sizeof (   LINT      ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ),	*((  LINT      *) (void *) ((char *) ( ap ) - (((sizeof (   LINT      ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ))) ;   if(  op1   >   tmp  ){ op1 = tmp; }else{ ((void)0) ; return 0; } } ((void)0) ; return 1;}        static inline BOOL   GT_USINT   (BOOL EN, BOOL *ENO , UINT param_count,      USINT    op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0  ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  ( ap  = ((__gnuc_va_list) __builtin_next_arg (  op1 ))) ; DBG("GT_USINT" "USINT" "\n")   for (i = 0; i < param_count - 1; i++){      USINT    tmp = ( ap  = (__gnuc_va_list) ((char *) ( ap ) + (((sizeof (   UDINT      ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ),	*((  UDINT      *) (void *) ((char *) ( ap ) - (((sizeof (   UDINT      ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ))) ;   if(  op1   >   tmp  ){ op1 = tmp; }else{ ((void)0) ; return 0; } } ((void)0) ; return 1;}   static inline BOOL   GT__BOOL__USINT   (BOOL EN, BOOL *ENO , UINT param_count,      USINT    op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0  ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  ( ap  = ((__gnuc_va_list) __builtin_next_arg (  op1 ))) ; DBG("GT__BOOL__USINT" "USINT" "\n")   for (i = 0; i < param_count - 1; i++){      USINT    tmp = ( ap  = (__gnuc_va_list) ((char *) ( ap ) + (((sizeof (   UDINT      ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ),	*((  UDINT      *) (void *) ((char *) ( ap ) - (((sizeof (   UDINT      ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ))) ;   if(  op1   >   tmp  ){ op1 = tmp; }else{ ((void)0) ; return 0; } } ((void)0) ; return 1;}       static inline BOOL   GT_UINT   (BOOL EN, BOOL *ENO , UINT param_count,      UINT    op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0  ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  ( ap  = ((__gnuc_va_list) __builtin_next_arg (  op1 ))) ; DBG("GT_UINT" "UINT" "\n")   for (i = 0; i < param_count - 1; i++){      UINT    tmp = ( ap  = (__gnuc_va_list) ((char *) ( ap ) + (((sizeof (   UDINT      ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ),	*((  UDINT      *) (void *) ((char *) ( ap ) - (((sizeof (   UDINT      ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ))) ;   if(  op1   >   tmp  ){ op1 = tmp; }else{ ((void)0) ; return 0; } } ((void)0) ; return 1;}   static inline BOOL   GT__BOOL__UINT   (BOOL EN, BOOL *ENO , UINT param_count,      UINT    op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0  ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  ( ap  = ((__gnuc_va_list) __builtin_next_arg (  op1 ))) ; DBG("GT__BOOL__UINT" "UINT" "\n")   for (i = 0; i < param_count - 1; i++){      UINT    tmp = ( ap  = (__gnuc_va_list) ((char *) ( ap ) + (((sizeof (   UDINT      ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ),	*((  UDINT      *) (void *) ((char *) ( ap ) - (((sizeof (   UDINT      ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ))) ;   if(  op1   >   tmp  ){ op1 = tmp; }else{ ((void)0) ; return 0; } } ((void)0) ; return 1;}       static inline BOOL   GT_UDINT   (BOOL EN, BOOL *ENO , UINT param_count,      UDINT    op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0  ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  ( ap  = ((__gnuc_va_list) __builtin_next_arg (  op1 ))) ; DBG("GT_UDINT" "UDINT" "\n")   for (i = 0; i < param_count - 1; i++){      UDINT    tmp = ( ap  = (__gnuc_va_list) ((char *) ( ap ) + (((sizeof (   UDINT      ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ),	*((  UDINT      *) (void *) ((char *) ( ap ) - (((sizeof (   UDINT      ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ))) ;   if(  op1   >   tmp  ){ op1 = tmp; }else{ ((void)0) ; return 0; } } ((void)0) ; return 1;}   static inline BOOL   GT__BOOL__UDINT   (BOOL EN, BOOL *ENO , UINT param_count,      UDINT    op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0  ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  ( ap  = ((__gnuc_va_list) __builtin_next_arg (  op1 ))) ; DBG("GT__BOOL__UDINT" "UDINT" "\n")   for (i = 0; i < param_count - 1; i++){      UDINT    tmp = ( ap  = (__gnuc_va_list) ((char *) ( ap ) + (((sizeof (   UDINT      ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ),	*((  UDINT      *) (void *) ((char *) ( ap ) - (((sizeof (   UDINT      ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ))) ;   if(  op1   >   tmp  ){ op1 = tmp; }else{ ((void)0) ; return 0; } } ((void)0) ; return 1;}       static inline BOOL   GT_ULINT   (BOOL EN, BOOL *ENO , UINT param_count,      ULINT    op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0  ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  ( ap  = ((__gnuc_va_list) __builtin_next_arg (  op1 ))) ; DBG("GT_ULINT" "ULINT" "\n")   for (i = 0; i < param_count - 1; i++){      ULINT    tmp = ( ap  = (__gnuc_va_list) ((char *) ( ap ) + (((sizeof (   ULINT      ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ),	*((  ULINT      *) (void *) ((char *) ( ap ) - (((sizeof (   ULINT      ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ))) ;   if(  op1   >   tmp  ){ op1 = tmp; }else{ ((void)0) ; return 0; } } ((void)0) ; return 1;}   static inline BOOL   GT__BOOL__ULINT   (BOOL EN, BOOL *ENO , UINT param_count,      ULINT    op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0  ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  ( ap  = ((__gnuc_va_list) __builtin_next_arg (  op1 ))) ; DBG("GT__BOOL__ULINT" "ULINT" "\n")   for (i = 0; i < param_count - 1; i++){      ULINT    tmp = ( ap  = (__gnuc_va_list) ((char *) ( ap ) + (((sizeof (   ULINT      ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ),	*((  ULINT      *) (void *) ((char *) ( ap ) - (((sizeof (   ULINT      ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ))) ;   if(  op1   >   tmp  ){ op1 = tmp; }else{ ((void)0) ; return 0; } } ((void)0) ; return 1;}      


 	



 static inline BOOL   GT_DATE   (BOOL EN, BOOL *ENO , UINT param_count,      DATE    op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0  ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  ( ap  = ((__gnuc_va_list) __builtin_next_arg (  op1 ))) ; DBG("GT_DATE" "DATE" "\n")   for (i = 0; i < param_count - 1; i++){      DATE    tmp = ( ap  = (__gnuc_va_list) ((char *) ( ap ) + (((sizeof (   DATE      ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ),	*((  DATE      *) (void *) ((char *) ( ap ) - (((sizeof (   DATE      ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ))) ;   if(  (  tmp .tv_sec ==  op1 .tv_sec ?  op1 .tv_nsec -   tmp .tv_nsec :  op1 .tv_sec -   tmp .tv_sec)    >   0 ){ op1 = tmp; }else{ ((void)0) ; return 0; } } ((void)0) ; return 1;}   static inline BOOL   GT__BOOL__DATE   (BOOL EN, BOOL *ENO , UINT param_count,      DATE    op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0  ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  ( ap  = ((__gnuc_va_list) __builtin_next_arg (  op1 ))) ; DBG("GT__BOOL__DATE" "DATE" "\n")   for (i = 0; i < param_count - 1; i++){      DATE    tmp = ( ap  = (__gnuc_va_list) ((char *) ( ap ) + (((sizeof (   DATE      ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ),	*((  DATE      *) (void *) ((char *) ( ap ) - (((sizeof (   DATE      ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ))) ;   if(  (  tmp .tv_sec ==  op1 .tv_sec ?  op1 .tv_nsec -   tmp .tv_nsec :  op1 .tv_sec -   tmp .tv_sec)    >   0 ){ op1 = tmp; }else{ ((void)0) ; return 0; } } ((void)0) ; return 1;}     static inline BOOL   GT_TOD   (BOOL EN, BOOL *ENO , UINT param_count,      TOD    op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0  ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  ( ap  = ((__gnuc_va_list) __builtin_next_arg (  op1 ))) ; DBG("GT_TOD" "TOD" "\n")   for (i = 0; i < param_count - 1; i++){      TOD    tmp = ( ap  = (__gnuc_va_list) ((char *) ( ap ) + (((sizeof (   TOD      ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ),	*((  TOD      *) (void *) ((char *) ( ap ) - (((sizeof (   TOD      ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ))) ;   if(  (  tmp .tv_sec ==  op1 .tv_sec ?  op1 .tv_nsec -   tmp .tv_nsec :  op1 .tv_sec -   tmp .tv_sec)    >   0 ){ op1 = tmp; }else{ ((void)0) ; return 0; } } ((void)0) ; return 1;}   static inline BOOL   GT__BOOL__TOD   (BOOL EN, BOOL *ENO , UINT param_count,      TOD    op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0  ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  ( ap  = ((__gnuc_va_list) __builtin_next_arg (  op1 ))) ; DBG("GT__BOOL__TOD" "TOD" "\n")   for (i = 0; i < param_count - 1; i++){      TOD    tmp = ( ap  = (__gnuc_va_list) ((char *) ( ap ) + (((sizeof (   TOD      ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ),	*((  TOD      *) (void *) ((char *) ( ap ) - (((sizeof (   TOD      ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ))) ;   if(  (  tmp .tv_sec ==  op1 .tv_sec ?  op1 .tv_nsec -   tmp .tv_nsec :  op1 .tv_sec -   tmp .tv_sec)    >   0 ){ op1 = tmp; }else{ ((void)0) ; return 0; } } ((void)0) ; return 1;}     static inline BOOL   GT_DT   (BOOL EN, BOOL *ENO , UINT param_count,      DT    op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0  ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  ( ap  = ((__gnuc_va_list) __builtin_next_arg (  op1 ))) ; DBG("GT_DT" "DT" "\n")   for (i = 0; i < param_count - 1; i++){      DT    tmp = ( ap  = (__gnuc_va_list) ((char *) ( ap ) + (((sizeof (   DT      ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ),	*((  DT      *) (void *) ((char *) ( ap ) - (((sizeof (   DT      ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ))) ;   if(  (  tmp .tv_sec ==  op1 .tv_sec ?  op1 .tv_nsec -   tmp .tv_nsec :  op1 .tv_sec -   tmp .tv_sec)    >   0 ){ op1 = tmp; }else{ ((void)0) ; return 0; } } ((void)0) ; return 1;}   static inline BOOL   GT__BOOL__DT   (BOOL EN, BOOL *ENO , UINT param_count,      DT    op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0  ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  ( ap  = ((__gnuc_va_list) __builtin_next_arg (  op1 ))) ; DBG("GT__BOOL__DT" "DT" "\n")   for (i = 0; i < param_count - 1; i++){      DT    tmp = ( ap  = (__gnuc_va_list) ((char *) ( ap ) + (((sizeof (   DT      ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ),	*((  DT      *) (void *) ((char *) ( ap ) - (((sizeof (   DT      ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ))) ;   if(  (  tmp .tv_sec ==  op1 .tv_sec ?  op1 .tv_nsec -   tmp .tv_nsec :  op1 .tv_sec -   tmp .tv_sec)    >   0 ){ op1 = tmp; }else{ ((void)0) ; return 0; } } ((void)0) ; return 1;}    
static inline BOOL   GT_TIME   (BOOL EN, BOOL *ENO , UINT param_count,      TIME    op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0  ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  ( ap  = ((__gnuc_va_list) __builtin_next_arg (  op1 ))) ; DBG("GT_TIME" "TIME" "\n")   for (i = 0; i < param_count - 1; i++){      TIME    tmp = ( ap  = (__gnuc_va_list) ((char *) ( ap ) + (((sizeof (   TIME      ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ),	*((  TIME      *) (void *) ((char *) ( ap ) - (((sizeof (   TIME      ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ))) ;   if(  (  tmp .tv_sec ==  op1 .tv_sec ?  op1 .tv_nsec -   tmp .tv_nsec :  op1 .tv_sec -   tmp .tv_sec)    >   0 ){ op1 = tmp; }else{ ((void)0) ; return 0; } } ((void)0) ; return 1;}   static inline BOOL   GT__BOOL__TIME   (BOOL EN, BOOL *ENO , UINT param_count,      TIME    op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0  ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  ( ap  = ((__gnuc_va_list) __builtin_next_arg (  op1 ))) ; DBG("GT__BOOL__TIME" "TIME" "\n")   for (i = 0; i < param_count - 1; i++){      TIME    tmp = ( ap  = (__gnuc_va_list) ((char *) ( ap ) + (((sizeof (   TIME      ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ),	*((  TIME      *) (void *) ((char *) ( ap ) - (((sizeof (   TIME      ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ))) ;   if(  (  tmp .tv_sec ==  op1 .tv_sec ?  op1 .tv_nsec -   tmp .tv_nsec :  op1 .tv_sec -   tmp .tv_sec)    >   0 ){ op1 = tmp; }else{ ((void)0) ; return 0; } } ((void)0) ; return 1;}   


 	
static inline BOOL   GT_STRING  (BOOL EN, BOOL *ENO , UINT param_count,   STRING  op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0  ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  ( ap  = ((__gnuc_va_list) __builtin_next_arg (  op1 ))) ; DBG("GT_STRING" "STRING" "\n")   for (i = 0; i < param_count - 1; i++){   STRING  tmp = ( ap  = (__gnuc_va_list) ((char *) ( ap ) + (((sizeof (   STRING    ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ),	*((  STRING    *) (void *) ((char *) ( ap ) - (((sizeof (   STRING    ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ))) ;   if(  memcmp((char*)& op1 .body,(char*)&  tmp .body,  op1 .len <   tmp .len ?  op1 .len :   tmp .len)    >   0  ){ op1 = tmp; }else{ ((void)0) ; return 0; } } ((void)0) ; return 1;}    
static inline BOOL   GT__BOOL__STRING  (BOOL EN, BOOL *ENO , UINT param_count,   STRING  op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0  ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  ( ap  = ((__gnuc_va_list) __builtin_next_arg (  op1 ))) ; DBG("GT__BOOL__STRING" "STRING" "\n")   for (i = 0; i < param_count - 1; i++){   STRING  tmp = ( ap  = (__gnuc_va_list) ((char *) ( ap ) + (((sizeof (   STRING    ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ),	*((  STRING    *) (void *) ((char *) ( ap ) - (((sizeof (   STRING    ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ))) ;   if(  memcmp((char*)& op1 .body,(char*)&  tmp .body,  op1 .len <   tmp .len ?  op1 .len :   tmp .len)    >   0  ){ op1 = tmp; }else{ ((void)0) ; return 0; } } ((void)0) ; return 1;}    

     
     
     
 



 static inline BOOL   GE_BYTE   (BOOL EN, BOOL *ENO , UINT param_count,      BYTE    op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0  ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  ( ap  = ((__gnuc_va_list) __builtin_next_arg (  op1 ))) ; DBG("GE_BYTE" "BYTE" "\n")   for (i = 0; i < param_count - 1; i++){      BYTE    tmp = ( ap  = (__gnuc_va_list) ((char *) ( ap ) + (((sizeof (   DWORD      ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ),	*((  DWORD      *) (void *) ((char *) ( ap ) - (((sizeof (   DWORD      ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ))) ;   if(  op1   >=   tmp  ){ op1 = tmp; }else{ ((void)0) ; return 0; } } ((void)0) ; return 1;}   static inline BOOL   GE__BOOL__BYTE   (BOOL EN, BOOL *ENO , UINT param_count,      BYTE    op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0  ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  ( ap  = ((__gnuc_va_list) __builtin_next_arg (  op1 ))) ; DBG("GE__BOOL__BYTE" "BYTE" "\n")   for (i = 0; i < param_count - 1; i++){      BYTE    tmp = ( ap  = (__gnuc_va_list) ((char *) ( ap ) + (((sizeof (   DWORD      ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ),	*((  DWORD      *) (void *) ((char *) ( ap ) - (((sizeof (   DWORD      ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ))) ;   if(  op1   >=   tmp  ){ op1 = tmp; }else{ ((void)0) ; return 0; } } ((void)0) ; return 1;}     static inline BOOL   GE_WORD   (BOOL EN, BOOL *ENO , UINT param_count,      WORD    op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0  ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  ( ap  = ((__gnuc_va_list) __builtin_next_arg (  op1 ))) ; DBG("GE_WORD" "WORD" "\n")   for (i = 0; i < param_count - 1; i++){      WORD    tmp = ( ap  = (__gnuc_va_list) ((char *) ( ap ) + (((sizeof (   DWORD      ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ),	*((  DWORD      *) (void *) ((char *) ( ap ) - (((sizeof (   DWORD      ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ))) ;   if(  op1   >=   tmp  ){ op1 = tmp; }else{ ((void)0) ; return 0; } } ((void)0) ; return 1;}   static inline BOOL   GE__BOOL__WORD   (BOOL EN, BOOL *ENO , UINT param_count,      WORD    op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0  ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  ( ap  = ((__gnuc_va_list) __builtin_next_arg (  op1 ))) ; DBG("GE__BOOL__WORD" "WORD" "\n")   for (i = 0; i < param_count - 1; i++){      WORD    tmp = ( ap  = (__gnuc_va_list) ((char *) ( ap ) + (((sizeof (   DWORD      ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ),	*((  DWORD      *) (void *) ((char *) ( ap ) - (((sizeof (   DWORD      ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ))) ;   if(  op1   >=   tmp  ){ op1 = tmp; }else{ ((void)0) ; return 0; } } ((void)0) ; return 1;}     static inline BOOL   GE_DWORD   (BOOL EN, BOOL *ENO , UINT param_count,      DWORD    op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0  ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  ( ap  = ((__gnuc_va_list) __builtin_next_arg (  op1 ))) ; DBG("GE_DWORD" "DWORD" "\n")   for (i = 0; i < param_count - 1; i++){      DWORD    tmp = ( ap  = (__gnuc_va_list) ((char *) ( ap ) + (((sizeof (   DWORD      ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ),	*((  DWORD      *) (void *) ((char *) ( ap ) - (((sizeof (   DWORD      ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ))) ;   if(  op1   >=   tmp  ){ op1 = tmp; }else{ ((void)0) ; return 0; } } ((void)0) ; return 1;}   static inline BOOL   GE__BOOL__DWORD   (BOOL EN, BOOL *ENO , UINT param_count,      DWORD    op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0  ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  ( ap  = ((__gnuc_va_list) __builtin_next_arg (  op1 ))) ; DBG("GE__BOOL__DWORD" "DWORD" "\n")   for (i = 0; i < param_count - 1; i++){      DWORD    tmp = ( ap  = (__gnuc_va_list) ((char *) ( ap ) + (((sizeof (   DWORD      ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ),	*((  DWORD      *) (void *) ((char *) ( ap ) - (((sizeof (   DWORD      ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ))) ;   if(  op1   >=   tmp  ){ op1 = tmp; }else{ ((void)0) ; return 0; } } ((void)0) ; return 1;}     static inline BOOL   GE_LWORD   (BOOL EN, BOOL *ENO , UINT param_count,      LWORD    op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0  ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  ( ap  = ((__gnuc_va_list) __builtin_next_arg (  op1 ))) ; DBG("GE_LWORD" "LWORD" "\n")   for (i = 0; i < param_count - 1; i++){      LWORD    tmp = ( ap  = (__gnuc_va_list) ((char *) ( ap ) + (((sizeof (   LWORD      ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ),	*((  LWORD      *) (void *) ((char *) ( ap ) - (((sizeof (   LWORD      ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ))) ;   if(  op1   >=   tmp  ){ op1 = tmp; }else{ ((void)0) ; return 0; } } ((void)0) ; return 1;}   static inline BOOL   GE__BOOL__LWORD   (BOOL EN, BOOL *ENO , UINT param_count,      LWORD    op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0  ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  ( ap  = ((__gnuc_va_list) __builtin_next_arg (  op1 ))) ; DBG("GE__BOOL__LWORD" "LWORD" "\n")   for (i = 0; i < param_count - 1; i++){      LWORD    tmp = ( ap  = (__gnuc_va_list) ((char *) ( ap ) + (((sizeof (   LWORD      ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ),	*((  LWORD      *) (void *) ((char *) ( ap ) - (((sizeof (   LWORD      ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ))) ;   if(  op1   >=   tmp  ){ op1 = tmp; }else{ ((void)0) ; return 0; } } ((void)0) ; return 1;}    
  static inline BOOL   GE_REAL   (BOOL EN, BOOL *ENO , UINT param_count,      REAL    op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0  ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  ( ap  = ((__gnuc_va_list) __builtin_next_arg (  op1 ))) ; DBG("GE_REAL" "REAL" "\n")   for (i = 0; i < param_count - 1; i++){      REAL    tmp = ( ap  = (__gnuc_va_list) ((char *) ( ap ) + (((sizeof (   LREAL      ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ),	*((  LREAL      *) (void *) ((char *) ( ap ) - (((sizeof (   LREAL      ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ))) ;   if(  op1   >=   tmp  ){ op1 = tmp; }else{ ((void)0) ; return 0; } } ((void)0) ; return 1;}   static inline BOOL   GE__BOOL__REAL   (BOOL EN, BOOL *ENO , UINT param_count,      REAL    op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0  ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  ( ap  = ((__gnuc_va_list) __builtin_next_arg (  op1 ))) ; DBG("GE__BOOL__REAL" "REAL" "\n")   for (i = 0; i < param_count - 1; i++){      REAL    tmp = ( ap  = (__gnuc_va_list) ((char *) ( ap ) + (((sizeof (   LREAL      ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ),	*((  LREAL      *) (void *) ((char *) ( ap ) - (((sizeof (   LREAL      ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ))) ;   if(  op1   >=   tmp  ){ op1 = tmp; }else{ ((void)0) ; return 0; } } ((void)0) ; return 1;}      static inline BOOL   GE_LREAL   (BOOL EN, BOOL *ENO , UINT param_count,      LREAL    op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0  ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  ( ap  = ((__gnuc_va_list) __builtin_next_arg (  op1 ))) ; DBG("GE_LREAL" "LREAL" "\n")   for (i = 0; i < param_count - 1; i++){      LREAL    tmp = ( ap  = (__gnuc_va_list) ((char *) ( ap ) + (((sizeof (   LREAL      ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ),	*((  LREAL      *) (void *) ((char *) ( ap ) - (((sizeof (   LREAL      ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ))) ;   if(  op1   >=   tmp  ){ op1 = tmp; }else{ ((void)0) ; return 0; } } ((void)0) ; return 1;}   static inline BOOL   GE__BOOL__LREAL   (BOOL EN, BOOL *ENO , UINT param_count,      LREAL    op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0  ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  ( ap  = ((__gnuc_va_list) __builtin_next_arg (  op1 ))) ; DBG("GE__BOOL__LREAL" "LREAL" "\n")   for (i = 0; i < param_count - 1; i++){      LREAL    tmp = ( ap  = (__gnuc_va_list) ((char *) ( ap ) + (((sizeof (   LREAL      ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ),	*((  LREAL      *) (void *) ((char *) ( ap ) - (((sizeof (   LREAL      ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ))) ;   if(  op1   >=   tmp  ){ op1 = tmp; }else{ ((void)0) ; return 0; } } ((void)0) ; return 1;}        static inline BOOL   GE_SINT   (BOOL EN, BOOL *ENO , UINT param_count,      SINT    op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0  ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  ( ap  = ((__gnuc_va_list) __builtin_next_arg (  op1 ))) ; DBG("GE_SINT" "SINT" "\n")   for (i = 0; i < param_count - 1; i++){      SINT    tmp = ( ap  = (__gnuc_va_list) ((char *) ( ap ) + (((sizeof (   DINT      ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ),	*((  DINT      *) (void *) ((char *) ( ap ) - (((sizeof (   DINT      ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ))) ;   if(  op1   >=   tmp  ){ op1 = tmp; }else{ ((void)0) ; return 0; } } ((void)0) ; return 1;}   static inline BOOL   GE__BOOL__SINT   (BOOL EN, BOOL *ENO , UINT param_count,      SINT    op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0  ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  ( ap  = ((__gnuc_va_list) __builtin_next_arg (  op1 ))) ; DBG("GE__BOOL__SINT" "SINT" "\n")   for (i = 0; i < param_count - 1; i++){      SINT    tmp = ( ap  = (__gnuc_va_list) ((char *) ( ap ) + (((sizeof (   DINT      ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ),	*((  DINT      *) (void *) ((char *) ( ap ) - (((sizeof (   DINT      ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ))) ;   if(  op1   >=   tmp  ){ op1 = tmp; }else{ ((void)0) ; return 0; } } ((void)0) ; return 1;}       static inline BOOL   GE_INT   (BOOL EN, BOOL *ENO , UINT param_count,      INT    op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0  ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  ( ap  = ((__gnuc_va_list) __builtin_next_arg (  op1 ))) ; DBG("GE_INT" "INT" "\n")   for (i = 0; i < param_count - 1; i++){      INT    tmp = ( ap  = (__gnuc_va_list) ((char *) ( ap ) + (((sizeof (   DINT      ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ),	*((  DINT      *) (void *) ((char *) ( ap ) - (((sizeof (   DINT      ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ))) ;   if(  op1   >=   tmp  ){ op1 = tmp; }else{ ((void)0) ; return 0; } } ((void)0) ; return 1;}   static inline BOOL   GE__BOOL__INT   (BOOL EN, BOOL *ENO , UINT param_count,      INT    op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0  ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  ( ap  = ((__gnuc_va_list) __builtin_next_arg (  op1 ))) ; DBG("GE__BOOL__INT" "INT" "\n")   for (i = 0; i < param_count - 1; i++){      INT    tmp = ( ap  = (__gnuc_va_list) ((char *) ( ap ) + (((sizeof (   DINT      ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ),	*((  DINT      *) (void *) ((char *) ( ap ) - (((sizeof (   DINT      ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ))) ;   if(  op1   >=   tmp  ){ op1 = tmp; }else{ ((void)0) ; return 0; } } ((void)0) ; return 1;}       static inline BOOL   GE_DINT   (BOOL EN, BOOL *ENO , UINT param_count,      DINT    op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0  ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  ( ap  = ((__gnuc_va_list) __builtin_next_arg (  op1 ))) ; DBG("GE_DINT" "DINT" "\n")   for (i = 0; i < param_count - 1; i++){      DINT    tmp = ( ap  = (__gnuc_va_list) ((char *) ( ap ) + (((sizeof (   DINT      ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ),	*((  DINT      *) (void *) ((char *) ( ap ) - (((sizeof (   DINT      ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ))) ;   if(  op1   >=   tmp  ){ op1 = tmp; }else{ ((void)0) ; return 0; } } ((void)0) ; return 1;}   static inline BOOL   GE__BOOL__DINT   (BOOL EN, BOOL *ENO , UINT param_count,      DINT    op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0  ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  ( ap  = ((__gnuc_va_list) __builtin_next_arg (  op1 ))) ; DBG("GE__BOOL__DINT" "DINT" "\n")   for (i = 0; i < param_count - 1; i++){      DINT    tmp = ( ap  = (__gnuc_va_list) ((char *) ( ap ) + (((sizeof (   DINT      ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ),	*((  DINT      *) (void *) ((char *) ( ap ) - (((sizeof (   DINT      ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ))) ;   if(  op1   >=   tmp  ){ op1 = tmp; }else{ ((void)0) ; return 0; } } ((void)0) ; return 1;}       static inline BOOL   GE_LINT   (BOOL EN, BOOL *ENO , UINT param_count,      LINT    op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0  ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  ( ap  = ((__gnuc_va_list) __builtin_next_arg (  op1 ))) ; DBG("GE_LINT" "LINT" "\n")   for (i = 0; i < param_count - 1; i++){      LINT    tmp = ( ap  = (__gnuc_va_list) ((char *) ( ap ) + (((sizeof (   LINT      ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ),	*((  LINT      *) (void *) ((char *) ( ap ) - (((sizeof (   LINT      ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ))) ;   if(  op1   >=   tmp  ){ op1 = tmp; }else{ ((void)0) ; return 0; } } ((void)0) ; return 1;}   static inline BOOL   GE__BOOL__LINT   (BOOL EN, BOOL *ENO , UINT param_count,      LINT    op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0  ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  ( ap  = ((__gnuc_va_list) __builtin_next_arg (  op1 ))) ; DBG("GE__BOOL__LINT" "LINT" "\n")   for (i = 0; i < param_count - 1; i++){      LINT    tmp = ( ap  = (__gnuc_va_list) ((char *) ( ap ) + (((sizeof (   LINT      ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ),	*((  LINT      *) (void *) ((char *) ( ap ) - (((sizeof (   LINT      ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ))) ;   if(  op1   >=   tmp  ){ op1 = tmp; }else{ ((void)0) ; return 0; } } ((void)0) ; return 1;}        static inline BOOL   GE_USINT   (BOOL EN, BOOL *ENO , UINT param_count,      USINT    op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0  ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  ( ap  = ((__gnuc_va_list) __builtin_next_arg (  op1 ))) ; DBG("GE_USINT" "USINT" "\n")   for (i = 0; i < param_count - 1; i++){      USINT    tmp = ( ap  = (__gnuc_va_list) ((char *) ( ap ) + (((sizeof (   UDINT      ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ),	*((  UDINT      *) (void *) ((char *) ( ap ) - (((sizeof (   UDINT      ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ))) ;   if(  op1   >=   tmp  ){ op1 = tmp; }else{ ((void)0) ; return 0; } } ((void)0) ; return 1;}   static inline BOOL   GE__BOOL__USINT   (BOOL EN, BOOL *ENO , UINT param_count,      USINT    op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0  ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  ( ap  = ((__gnuc_va_list) __builtin_next_arg (  op1 ))) ; DBG("GE__BOOL__USINT" "USINT" "\n")   for (i = 0; i < param_count - 1; i++){      USINT    tmp = ( ap  = (__gnuc_va_list) ((char *) ( ap ) + (((sizeof (   UDINT      ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ),	*((  UDINT      *) (void *) ((char *) ( ap ) - (((sizeof (   UDINT      ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ))) ;   if(  op1   >=   tmp  ){ op1 = tmp; }else{ ((void)0) ; return 0; } } ((void)0) ; return 1;}       static inline BOOL   GE_UINT   (BOOL EN, BOOL *ENO , UINT param_count,      UINT    op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0  ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  ( ap  = ((__gnuc_va_list) __builtin_next_arg (  op1 ))) ; DBG("GE_UINT" "UINT" "\n")   for (i = 0; i < param_count - 1; i++){      UINT    tmp = ( ap  = (__gnuc_va_list) ((char *) ( ap ) + (((sizeof (   UDINT      ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ),	*((  UDINT      *) (void *) ((char *) ( ap ) - (((sizeof (   UDINT      ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ))) ;   if(  op1   >=   tmp  ){ op1 = tmp; }else{ ((void)0) ; return 0; } } ((void)0) ; return 1;}   static inline BOOL   GE__BOOL__UINT   (BOOL EN, BOOL *ENO , UINT param_count,      UINT    op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0  ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  ( ap  = ((__gnuc_va_list) __builtin_next_arg (  op1 ))) ; DBG("GE__BOOL__UINT" "UINT" "\n")   for (i = 0; i < param_count - 1; i++){      UINT    tmp = ( ap  = (__gnuc_va_list) ((char *) ( ap ) + (((sizeof (   UDINT      ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ),	*((  UDINT      *) (void *) ((char *) ( ap ) - (((sizeof (   UDINT      ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ))) ;   if(  op1   >=   tmp  ){ op1 = tmp; }else{ ((void)0) ; return 0; } } ((void)0) ; return 1;}       static inline BOOL   GE_UDINT   (BOOL EN, BOOL *ENO , UINT param_count,      UDINT    op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0  ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  ( ap  = ((__gnuc_va_list) __builtin_next_arg (  op1 ))) ; DBG("GE_UDINT" "UDINT" "\n")   for (i = 0; i < param_count - 1; i++){      UDINT    tmp = ( ap  = (__gnuc_va_list) ((char *) ( ap ) + (((sizeof (   UDINT      ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ),	*((  UDINT      *) (void *) ((char *) ( ap ) - (((sizeof (   UDINT      ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ))) ;   if(  op1   >=   tmp  ){ op1 = tmp; }else{ ((void)0) ; return 0; } } ((void)0) ; return 1;}   static inline BOOL   GE__BOOL__UDINT   (BOOL EN, BOOL *ENO , UINT param_count,      UDINT    op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0  ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  ( ap  = ((__gnuc_va_list) __builtin_next_arg (  op1 ))) ; DBG("GE__BOOL__UDINT" "UDINT" "\n")   for (i = 0; i < param_count - 1; i++){      UDINT    tmp = ( ap  = (__gnuc_va_list) ((char *) ( ap ) + (((sizeof (   UDINT      ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ),	*((  UDINT      *) (void *) ((char *) ( ap ) - (((sizeof (   UDINT      ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ))) ;   if(  op1   >=   tmp  ){ op1 = tmp; }else{ ((void)0) ; return 0; } } ((void)0) ; return 1;}       static inline BOOL   GE_ULINT   (BOOL EN, BOOL *ENO , UINT param_count,      ULINT    op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0  ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  ( ap  = ((__gnuc_va_list) __builtin_next_arg (  op1 ))) ; DBG("GE_ULINT" "ULINT" "\n")   for (i = 0; i < param_count - 1; i++){      ULINT    tmp = ( ap  = (__gnuc_va_list) ((char *) ( ap ) + (((sizeof (   ULINT      ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ),	*((  ULINT      *) (void *) ((char *) ( ap ) - (((sizeof (   ULINT      ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ))) ;   if(  op1   >=   tmp  ){ op1 = tmp; }else{ ((void)0) ; return 0; } } ((void)0) ; return 1;}   static inline BOOL   GE__BOOL__ULINT   (BOOL EN, BOOL *ENO , UINT param_count,      ULINT    op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0  ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  ( ap  = ((__gnuc_va_list) __builtin_next_arg (  op1 ))) ; DBG("GE__BOOL__ULINT" "ULINT" "\n")   for (i = 0; i < param_count - 1; i++){      ULINT    tmp = ( ap  = (__gnuc_va_list) ((char *) ( ap ) + (((sizeof (   ULINT      ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ),	*((  ULINT      *) (void *) ((char *) ( ap ) - (((sizeof (   ULINT      ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ))) ;   if(  op1   >=   tmp  ){ op1 = tmp; }else{ ((void)0) ; return 0; } } ((void)0) ; return 1;}      


 	



 static inline BOOL   GE_DATE   (BOOL EN, BOOL *ENO , UINT param_count,      DATE    op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0  ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  ( ap  = ((__gnuc_va_list) __builtin_next_arg (  op1 ))) ; DBG("GE_DATE" "DATE" "\n")   for (i = 0; i < param_count - 1; i++){      DATE    tmp = ( ap  = (__gnuc_va_list) ((char *) ( ap ) + (((sizeof (   DATE      ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ),	*((  DATE      *) (void *) ((char *) ( ap ) - (((sizeof (   DATE      ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ))) ;   if(  (  tmp .tv_sec ==  op1 .tv_sec ?  op1 .tv_nsec -   tmp .tv_nsec :  op1 .tv_sec -   tmp .tv_sec)    >=   0 ){ op1 = tmp; }else{ ((void)0) ; return 0; } } ((void)0) ; return 1;}   static inline BOOL   GE__BOOL__DATE   (BOOL EN, BOOL *ENO , UINT param_count,      DATE    op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0  ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  ( ap  = ((__gnuc_va_list) __builtin_next_arg (  op1 ))) ; DBG("GE__BOOL__DATE" "DATE" "\n")   for (i = 0; i < param_count - 1; i++){      DATE    tmp = ( ap  = (__gnuc_va_list) ((char *) ( ap ) + (((sizeof (   DATE      ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ),	*((  DATE      *) (void *) ((char *) ( ap ) - (((sizeof (   DATE      ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ))) ;   if(  (  tmp .tv_sec ==  op1 .tv_sec ?  op1 .tv_nsec -   tmp .tv_nsec :  op1 .tv_sec -   tmp .tv_sec)    >=   0 ){ op1 = tmp; }else{ ((void)0) ; return 0; } } ((void)0) ; return 1;}     static inline BOOL   GE_TOD   (BOOL EN, BOOL *ENO , UINT param_count,      TOD    op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0  ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  ( ap  = ((__gnuc_va_list) __builtin_next_arg (  op1 ))) ; DBG("GE_TOD" "TOD" "\n")   for (i = 0; i < param_count - 1; i++){      TOD    tmp = ( ap  = (__gnuc_va_list) ((char *) ( ap ) + (((sizeof (   TOD      ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ),	*((  TOD      *) (void *) ((char *) ( ap ) - (((sizeof (   TOD      ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ))) ;   if(  (  tmp .tv_sec ==  op1 .tv_sec ?  op1 .tv_nsec -   tmp .tv_nsec :  op1 .tv_sec -   tmp .tv_sec)    >=   0 ){ op1 = tmp; }else{ ((void)0) ; return 0; } } ((void)0) ; return 1;}   static inline BOOL   GE__BOOL__TOD   (BOOL EN, BOOL *ENO , UINT param_count,      TOD    op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0  ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  ( ap  = ((__gnuc_va_list) __builtin_next_arg (  op1 ))) ; DBG("GE__BOOL__TOD" "TOD" "\n")   for (i = 0; i < param_count - 1; i++){      TOD    tmp = ( ap  = (__gnuc_va_list) ((char *) ( ap ) + (((sizeof (   TOD      ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ),	*((  TOD      *) (void *) ((char *) ( ap ) - (((sizeof (   TOD      ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ))) ;   if(  (  tmp .tv_sec ==  op1 .tv_sec ?  op1 .tv_nsec -   tmp .tv_nsec :  op1 .tv_sec -   tmp .tv_sec)    >=   0 ){ op1 = tmp; }else{ ((void)0) ; return 0; } } ((void)0) ; return 1;}     static inline BOOL   GE_DT   (BOOL EN, BOOL *ENO , UINT param_count,      DT    op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0  ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  ( ap  = ((__gnuc_va_list) __builtin_next_arg (  op1 ))) ; DBG("GE_DT" "DT" "\n")   for (i = 0; i < param_count - 1; i++){      DT    tmp = ( ap  = (__gnuc_va_list) ((char *) ( ap ) + (((sizeof (   DT      ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ),	*((  DT      *) (void *) ((char *) ( ap ) - (((sizeof (   DT      ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ))) ;   if(  (  tmp .tv_sec ==  op1 .tv_sec ?  op1 .tv_nsec -   tmp .tv_nsec :  op1 .tv_sec -   tmp .tv_sec)    >=   0 ){ op1 = tmp; }else{ ((void)0) ; return 0; } } ((void)0) ; return 1;}   static inline BOOL   GE__BOOL__DT   (BOOL EN, BOOL *ENO , UINT param_count,      DT    op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0  ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  ( ap  = ((__gnuc_va_list) __builtin_next_arg (  op1 ))) ; DBG("GE__BOOL__DT" "DT" "\n")   for (i = 0; i < param_count - 1; i++){      DT    tmp = ( ap  = (__gnuc_va_list) ((char *) ( ap ) + (((sizeof (   DT      ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ),	*((  DT      *) (void *) ((char *) ( ap ) - (((sizeof (   DT      ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ))) ;   if(  (  tmp .tv_sec ==  op1 .tv_sec ?  op1 .tv_nsec -   tmp .tv_nsec :  op1 .tv_sec -   tmp .tv_sec)    >=   0 ){ op1 = tmp; }else{ ((void)0) ; return 0; } } ((void)0) ; return 1;}    
static inline BOOL   GE_TIME   (BOOL EN, BOOL *ENO , UINT param_count,      TIME    op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0  ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  ( ap  = ((__gnuc_va_list) __builtin_next_arg (  op1 ))) ; DBG("GE_TIME" "TIME" "\n")   for (i = 0; i < param_count - 1; i++){      TIME    tmp = ( ap  = (__gnuc_va_list) ((char *) ( ap ) + (((sizeof (   TIME      ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ),	*((  TIME      *) (void *) ((char *) ( ap ) - (((sizeof (   TIME      ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ))) ;   if(  (  tmp .tv_sec ==  op1 .tv_sec ?  op1 .tv_nsec -   tmp .tv_nsec :  op1 .tv_sec -   tmp .tv_sec)    >=   0 ){ op1 = tmp; }else{ ((void)0) ; return 0; } } ((void)0) ; return 1;}   static inline BOOL   GE__BOOL__TIME   (BOOL EN, BOOL *ENO , UINT param_count,      TIME    op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0  ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  ( ap  = ((__gnuc_va_list) __builtin_next_arg (  op1 ))) ; DBG("GE__BOOL__TIME" "TIME" "\n")   for (i = 0; i < param_count - 1; i++){      TIME    tmp = ( ap  = (__gnuc_va_list) ((char *) ( ap ) + (((sizeof (   TIME      ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ),	*((  TIME      *) (void *) ((char *) ( ap ) - (((sizeof (   TIME      ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ))) ;   if(  (  tmp .tv_sec ==  op1 .tv_sec ?  op1 .tv_nsec -   tmp .tv_nsec :  op1 .tv_sec -   tmp .tv_sec)    >=   0 ){ op1 = tmp; }else{ ((void)0) ; return 0; } } ((void)0) ; return 1;}   


 	
static inline BOOL   GE_STRING  (BOOL EN, BOOL *ENO , UINT param_count,   STRING  op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0  ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  ( ap  = ((__gnuc_va_list) __builtin_next_arg (  op1 ))) ; DBG("GE_STRING" "STRING" "\n")   for (i = 0; i < param_count - 1; i++){   STRING  tmp = ( ap  = (__gnuc_va_list) ((char *) ( ap ) + (((sizeof (   STRING    ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ),	*((  STRING    *) (void *) ((char *) ( ap ) - (((sizeof (   STRING    ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ))) ;   if(  memcmp((char*)& op1 .body,(char*)&  tmp .body,  op1 .len <   tmp .len ?  op1 .len :   tmp .len)    >=   0  ){ op1 = tmp; }else{ ((void)0) ; return 0; } } ((void)0) ; return 1;}    
static inline BOOL   GE__BOOL__STRING  (BOOL EN, BOOL *ENO , UINT param_count,   STRING  op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0  ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  ( ap  = ((__gnuc_va_list) __builtin_next_arg (  op1 ))) ; DBG("GE__BOOL__STRING" "STRING" "\n")   for (i = 0; i < param_count - 1; i++){   STRING  tmp = ( ap  = (__gnuc_va_list) ((char *) ( ap ) + (((sizeof (   STRING    ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ),	*((  STRING    *) (void *) ((char *) ( ap ) - (((sizeof (   STRING    ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ))) ;   if(  memcmp((char*)& op1 .body,(char*)&  tmp .body,  op1 .len <   tmp .len ?  op1 .len :   tmp .len)    >=   0  ){ op1 = tmp; }else{ ((void)0) ; return 0; } } ((void)0) ; return 1;}    



     
     
     
 



 static inline BOOL   EQ_BYTE   (BOOL EN, BOOL *ENO , UINT param_count,      BYTE    op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0  ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  ( ap  = ((__gnuc_va_list) __builtin_next_arg (  op1 ))) ; DBG("EQ_BYTE" "BYTE" "\n")   for (i = 0; i < param_count - 1; i++){      BYTE    tmp = ( ap  = (__gnuc_va_list) ((char *) ( ap ) + (((sizeof (   DWORD      ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ),	*((  DWORD      *) (void *) ((char *) ( ap ) - (((sizeof (   DWORD      ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ))) ;   if(  op1   ==   tmp  ){ op1 = tmp; }else{ ((void)0) ; return 0; } } ((void)0) ; return 1;}   static inline BOOL   EQ__BOOL__BYTE   (BOOL EN, BOOL *ENO , UINT param_count,      BYTE    op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0  ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  ( ap  = ((__gnuc_va_list) __builtin_next_arg (  op1 ))) ; DBG("EQ__BOOL__BYTE" "BYTE" "\n")   for (i = 0; i < param_count - 1; i++){      BYTE    tmp = ( ap  = (__gnuc_va_list) ((char *) ( ap ) + (((sizeof (   DWORD      ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ),	*((  DWORD      *) (void *) ((char *) ( ap ) - (((sizeof (   DWORD      ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ))) ;   if(  op1   ==   tmp  ){ op1 = tmp; }else{ ((void)0) ; return 0; } } ((void)0) ; return 1;}     static inline BOOL   EQ_WORD   (BOOL EN, BOOL *ENO , UINT param_count,      WORD    op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0  ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  ( ap  = ((__gnuc_va_list) __builtin_next_arg (  op1 ))) ; DBG("EQ_WORD" "WORD" "\n")   for (i = 0; i < param_count - 1; i++){      WORD    tmp = ( ap  = (__gnuc_va_list) ((char *) ( ap ) + (((sizeof (   DWORD      ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ),	*((  DWORD      *) (void *) ((char *) ( ap ) - (((sizeof (   DWORD      ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ))) ;   if(  op1   ==   tmp  ){ op1 = tmp; }else{ ((void)0) ; return 0; } } ((void)0) ; return 1;}   static inline BOOL   EQ__BOOL__WORD   (BOOL EN, BOOL *ENO , UINT param_count,      WORD    op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0  ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  ( ap  = ((__gnuc_va_list) __builtin_next_arg (  op1 ))) ; DBG("EQ__BOOL__WORD" "WORD" "\n")   for (i = 0; i < param_count - 1; i++){      WORD    tmp = ( ap  = (__gnuc_va_list) ((char *) ( ap ) + (((sizeof (   DWORD      ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ),	*((  DWORD      *) (void *) ((char *) ( ap ) - (((sizeof (   DWORD      ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ))) ;   if(  op1   ==   tmp  ){ op1 = tmp; }else{ ((void)0) ; return 0; } } ((void)0) ; return 1;}     static inline BOOL   EQ_DWORD   (BOOL EN, BOOL *ENO , UINT param_count,      DWORD    op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0  ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  ( ap  = ((__gnuc_va_list) __builtin_next_arg (  op1 ))) ; DBG("EQ_DWORD" "DWORD" "\n")   for (i = 0; i < param_count - 1; i++){      DWORD    tmp = ( ap  = (__gnuc_va_list) ((char *) ( ap ) + (((sizeof (   DWORD      ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ),	*((  DWORD      *) (void *) ((char *) ( ap ) - (((sizeof (   DWORD      ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ))) ;   if(  op1   ==   tmp  ){ op1 = tmp; }else{ ((void)0) ; return 0; } } ((void)0) ; return 1;}   static inline BOOL   EQ__BOOL__DWORD   (BOOL EN, BOOL *ENO , UINT param_count,      DWORD    op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0  ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  ( ap  = ((__gnuc_va_list) __builtin_next_arg (  op1 ))) ; DBG("EQ__BOOL__DWORD" "DWORD" "\n")   for (i = 0; i < param_count - 1; i++){      DWORD    tmp = ( ap  = (__gnuc_va_list) ((char *) ( ap ) + (((sizeof (   DWORD      ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ),	*((  DWORD      *) (void *) ((char *) ( ap ) - (((sizeof (   DWORD      ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ))) ;   if(  op1   ==   tmp  ){ op1 = tmp; }else{ ((void)0) ; return 0; } } ((void)0) ; return 1;}     static inline BOOL   EQ_LWORD   (BOOL EN, BOOL *ENO , UINT param_count,      LWORD    op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0  ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  ( ap  = ((__gnuc_va_list) __builtin_next_arg (  op1 ))) ; DBG("EQ_LWORD" "LWORD" "\n")   for (i = 0; i < param_count - 1; i++){      LWORD    tmp = ( ap  = (__gnuc_va_list) ((char *) ( ap ) + (((sizeof (   LWORD      ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ),	*((  LWORD      *) (void *) ((char *) ( ap ) - (((sizeof (   LWORD      ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ))) ;   if(  op1   ==   tmp  ){ op1 = tmp; }else{ ((void)0) ; return 0; } } ((void)0) ; return 1;}   static inline BOOL   EQ__BOOL__LWORD   (BOOL EN, BOOL *ENO , UINT param_count,      LWORD    op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0  ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  ( ap  = ((__gnuc_va_list) __builtin_next_arg (  op1 ))) ; DBG("EQ__BOOL__LWORD" "LWORD" "\n")   for (i = 0; i < param_count - 1; i++){      LWORD    tmp = ( ap  = (__gnuc_va_list) ((char *) ( ap ) + (((sizeof (   LWORD      ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ),	*((  LWORD      *) (void *) ((char *) ( ap ) - (((sizeof (   LWORD      ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ))) ;   if(  op1   ==   tmp  ){ op1 = tmp; }else{ ((void)0) ; return 0; } } ((void)0) ; return 1;}    
  static inline BOOL   EQ_REAL   (BOOL EN, BOOL *ENO , UINT param_count,      REAL    op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0  ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  ( ap  = ((__gnuc_va_list) __builtin_next_arg (  op1 ))) ; DBG("EQ_REAL" "REAL" "\n")   for (i = 0; i < param_count - 1; i++){      REAL    tmp = ( ap  = (__gnuc_va_list) ((char *) ( ap ) + (((sizeof (   LREAL      ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ),	*((  LREAL      *) (void *) ((char *) ( ap ) - (((sizeof (   LREAL      ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ))) ;   if(  op1   ==   tmp  ){ op1 = tmp; }else{ ((void)0) ; return 0; } } ((void)0) ; return 1;}   static inline BOOL   EQ__BOOL__REAL   (BOOL EN, BOOL *ENO , UINT param_count,      REAL    op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0  ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  ( ap  = ((__gnuc_va_list) __builtin_next_arg (  op1 ))) ; DBG("EQ__BOOL__REAL" "REAL" "\n")   for (i = 0; i < param_count - 1; i++){      REAL    tmp = ( ap  = (__gnuc_va_list) ((char *) ( ap ) + (((sizeof (   LREAL      ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ),	*((  LREAL      *) (void *) ((char *) ( ap ) - (((sizeof (   LREAL      ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ))) ;   if(  op1   ==   tmp  ){ op1 = tmp; }else{ ((void)0) ; return 0; } } ((void)0) ; return 1;}      static inline BOOL   EQ_LREAL   (BOOL EN, BOOL *ENO , UINT param_count,      LREAL    op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0  ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  ( ap  = ((__gnuc_va_list) __builtin_next_arg (  op1 ))) ; DBG("EQ_LREAL" "LREAL" "\n")   for (i = 0; i < param_count - 1; i++){      LREAL    tmp = ( ap  = (__gnuc_va_list) ((char *) ( ap ) + (((sizeof (   LREAL      ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ),	*((  LREAL      *) (void *) ((char *) ( ap ) - (((sizeof (   LREAL      ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ))) ;   if(  op1   ==   tmp  ){ op1 = tmp; }else{ ((void)0) ; return 0; } } ((void)0) ; return 1;}   static inline BOOL   EQ__BOOL__LREAL   (BOOL EN, BOOL *ENO , UINT param_count,      LREAL    op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0  ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  ( ap  = ((__gnuc_va_list) __builtin_next_arg (  op1 ))) ; DBG("EQ__BOOL__LREAL" "LREAL" "\n")   for (i = 0; i < param_count - 1; i++){      LREAL    tmp = ( ap  = (__gnuc_va_list) ((char *) ( ap ) + (((sizeof (   LREAL      ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ),	*((  LREAL      *) (void *) ((char *) ( ap ) - (((sizeof (   LREAL      ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ))) ;   if(  op1   ==   tmp  ){ op1 = tmp; }else{ ((void)0) ; return 0; } } ((void)0) ; return 1;}        static inline BOOL   EQ_SINT   (BOOL EN, BOOL *ENO , UINT param_count,      SINT    op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0  ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  ( ap  = ((__gnuc_va_list) __builtin_next_arg (  op1 ))) ; DBG("EQ_SINT" "SINT" "\n")   for (i = 0; i < param_count - 1; i++){      SINT    tmp = ( ap  = (__gnuc_va_list) ((char *) ( ap ) + (((sizeof (   DINT      ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ),	*((  DINT      *) (void *) ((char *) ( ap ) - (((sizeof (   DINT      ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ))) ;   if(  op1   ==   tmp  ){ op1 = tmp; }else{ ((void)0) ; return 0; } } ((void)0) ; return 1;}   static inline BOOL   EQ__BOOL__SINT   (BOOL EN, BOOL *ENO , UINT param_count,      SINT    op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0  ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  ( ap  = ((__gnuc_va_list) __builtin_next_arg (  op1 ))) ; DBG("EQ__BOOL__SINT" "SINT" "\n")   for (i = 0; i < param_count - 1; i++){      SINT    tmp = ( ap  = (__gnuc_va_list) ((char *) ( ap ) + (((sizeof (   DINT      ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ),	*((  DINT      *) (void *) ((char *) ( ap ) - (((sizeof (   DINT      ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ))) ;   if(  op1   ==   tmp  ){ op1 = tmp; }else{ ((void)0) ; return 0; } } ((void)0) ; return 1;}       static inline BOOL   EQ_INT   (BOOL EN, BOOL *ENO , UINT param_count,      INT    op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0  ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  ( ap  = ((__gnuc_va_list) __builtin_next_arg (  op1 ))) ; DBG("EQ_INT" "INT" "\n")   for (i = 0; i < param_count - 1; i++){      INT    tmp = ( ap  = (__gnuc_va_list) ((char *) ( ap ) + (((sizeof (   DINT      ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ),	*((  DINT      *) (void *) ((char *) ( ap ) - (((sizeof (   DINT      ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ))) ;   if(  op1   ==   tmp  ){ op1 = tmp; }else{ ((void)0) ; return 0; } } ((void)0) ; return 1;}   static inline BOOL   EQ__BOOL__INT   (BOOL EN, BOOL *ENO , UINT param_count,      INT    op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0  ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  ( ap  = ((__gnuc_va_list) __builtin_next_arg (  op1 ))) ; DBG("EQ__BOOL__INT" "INT" "\n")   for (i = 0; i < param_count - 1; i++){      INT    tmp = ( ap  = (__gnuc_va_list) ((char *) ( ap ) + (((sizeof (   DINT      ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ),	*((  DINT      *) (void *) ((char *) ( ap ) - (((sizeof (   DINT      ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ))) ;   if(  op1   ==   tmp  ){ op1 = tmp; }else{ ((void)0) ; return 0; } } ((void)0) ; return 1;}       static inline BOOL   EQ_DINT   (BOOL EN, BOOL *ENO , UINT param_count,      DINT    op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0  ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  ( ap  = ((__gnuc_va_list) __builtin_next_arg (  op1 ))) ; DBG("EQ_DINT" "DINT" "\n")   for (i = 0; i < param_count - 1; i++){      DINT    tmp = ( ap  = (__gnuc_va_list) ((char *) ( ap ) + (((sizeof (   DINT      ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ),	*((  DINT      *) (void *) ((char *) ( ap ) - (((sizeof (   DINT      ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ))) ;   if(  op1   ==   tmp  ){ op1 = tmp; }else{ ((void)0) ; return 0; } } ((void)0) ; return 1;}   static inline BOOL   EQ__BOOL__DINT   (BOOL EN, BOOL *ENO , UINT param_count,      DINT    op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0  ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  ( ap  = ((__gnuc_va_list) __builtin_next_arg (  op1 ))) ; DBG("EQ__BOOL__DINT" "DINT" "\n")   for (i = 0; i < param_count - 1; i++){      DINT    tmp = ( ap  = (__gnuc_va_list) ((char *) ( ap ) + (((sizeof (   DINT      ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ),	*((  DINT      *) (void *) ((char *) ( ap ) - (((sizeof (   DINT      ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ))) ;   if(  op1   ==   tmp  ){ op1 = tmp; }else{ ((void)0) ; return 0; } } ((void)0) ; return 1;}       static inline BOOL   EQ_LINT   (BOOL EN, BOOL *ENO , UINT param_count,      LINT    op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0  ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  ( ap  = ((__gnuc_va_list) __builtin_next_arg (  op1 ))) ; DBG("EQ_LINT" "LINT" "\n")   for (i = 0; i < param_count - 1; i++){      LINT    tmp = ( ap  = (__gnuc_va_list) ((char *) ( ap ) + (((sizeof (   LINT      ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ),	*((  LINT      *) (void *) ((char *) ( ap ) - (((sizeof (   LINT      ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ))) ;   if(  op1   ==   tmp  ){ op1 = tmp; }else{ ((void)0) ; return 0; } } ((void)0) ; return 1;}   static inline BOOL   EQ__BOOL__LINT   (BOOL EN, BOOL *ENO , UINT param_count,      LINT    op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0  ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  ( ap  = ((__gnuc_va_list) __builtin_next_arg (  op1 ))) ; DBG("EQ__BOOL__LINT" "LINT" "\n")   for (i = 0; i < param_count - 1; i++){      LINT    tmp = ( ap  = (__gnuc_va_list) ((char *) ( ap ) + (((sizeof (   LINT      ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ),	*((  LINT      *) (void *) ((char *) ( ap ) - (((sizeof (   LINT      ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ))) ;   if(  op1   ==   tmp  ){ op1 = tmp; }else{ ((void)0) ; return 0; } } ((void)0) ; return 1;}        static inline BOOL   EQ_USINT   (BOOL EN, BOOL *ENO , UINT param_count,      USINT    op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0  ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  ( ap  = ((__gnuc_va_list) __builtin_next_arg (  op1 ))) ; DBG("EQ_USINT" "USINT" "\n")   for (i = 0; i < param_count - 1; i++){      USINT    tmp = ( ap  = (__gnuc_va_list) ((char *) ( ap ) + (((sizeof (   UDINT      ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ),	*((  UDINT      *) (void *) ((char *) ( ap ) - (((sizeof (   UDINT      ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ))) ;   if(  op1   ==   tmp  ){ op1 = tmp; }else{ ((void)0) ; return 0; } } ((void)0) ; return 1;}   static inline BOOL   EQ__BOOL__USINT   (BOOL EN, BOOL *ENO , UINT param_count,      USINT    op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0  ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  ( ap  = ((__gnuc_va_list) __builtin_next_arg (  op1 ))) ; DBG("EQ__BOOL__USINT" "USINT" "\n")   for (i = 0; i < param_count - 1; i++){      USINT    tmp = ( ap  = (__gnuc_va_list) ((char *) ( ap ) + (((sizeof (   UDINT      ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ),	*((  UDINT      *) (void *) ((char *) ( ap ) - (((sizeof (   UDINT      ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ))) ;   if(  op1   ==   tmp  ){ op1 = tmp; }else{ ((void)0) ; return 0; } } ((void)0) ; return 1;}       static inline BOOL   EQ_UINT   (BOOL EN, BOOL *ENO , UINT param_count,      UINT    op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0  ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  ( ap  = ((__gnuc_va_list) __builtin_next_arg (  op1 ))) ; DBG("EQ_UINT" "UINT" "\n")   for (i = 0; i < param_count - 1; i++){      UINT    tmp = ( ap  = (__gnuc_va_list) ((char *) ( ap ) + (((sizeof (   UDINT      ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ),	*((  UDINT      *) (void *) ((char *) ( ap ) - (((sizeof (   UDINT      ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ))) ;   if(  op1   ==   tmp  ){ op1 = tmp; }else{ ((void)0) ; return 0; } } ((void)0) ; return 1;}   static inline BOOL   EQ__BOOL__UINT   (BOOL EN, BOOL *ENO , UINT param_count,      UINT    op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0  ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  ( ap  = ((__gnuc_va_list) __builtin_next_arg (  op1 ))) ; DBG("EQ__BOOL__UINT" "UINT" "\n")   for (i = 0; i < param_count - 1; i++){      UINT    tmp = ( ap  = (__gnuc_va_list) ((char *) ( ap ) + (((sizeof (   UDINT      ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ),	*((  UDINT      *) (void *) ((char *) ( ap ) - (((sizeof (   UDINT      ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ))) ;   if(  op1   ==   tmp  ){ op1 = tmp; }else{ ((void)0) ; return 0; } } ((void)0) ; return 1;}       static inline BOOL   EQ_UDINT   (BOOL EN, BOOL *ENO , UINT param_count,      UDINT    op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0  ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  ( ap  = ((__gnuc_va_list) __builtin_next_arg (  op1 ))) ; DBG("EQ_UDINT" "UDINT" "\n")   for (i = 0; i < param_count - 1; i++){      UDINT    tmp = ( ap  = (__gnuc_va_list) ((char *) ( ap ) + (((sizeof (   UDINT      ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ),	*((  UDINT      *) (void *) ((char *) ( ap ) - (((sizeof (   UDINT      ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ))) ;   if(  op1   ==   tmp  ){ op1 = tmp; }else{ ((void)0) ; return 0; } } ((void)0) ; return 1;}   static inline BOOL   EQ__BOOL__UDINT   (BOOL EN, BOOL *ENO , UINT param_count,      UDINT    op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0  ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  ( ap  = ((__gnuc_va_list) __builtin_next_arg (  op1 ))) ; DBG("EQ__BOOL__UDINT" "UDINT" "\n")   for (i = 0; i < param_count - 1; i++){      UDINT    tmp = ( ap  = (__gnuc_va_list) ((char *) ( ap ) + (((sizeof (   UDINT      ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ),	*((  UDINT      *) (void *) ((char *) ( ap ) - (((sizeof (   UDINT      ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ))) ;   if(  op1   ==   tmp  ){ op1 = tmp; }else{ ((void)0) ; return 0; } } ((void)0) ; return 1;}       static inline BOOL   EQ_ULINT   (BOOL EN, BOOL *ENO , UINT param_count,      ULINT    op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0  ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  ( ap  = ((__gnuc_va_list) __builtin_next_arg (  op1 ))) ; DBG("EQ_ULINT" "ULINT" "\n")   for (i = 0; i < param_count - 1; i++){      ULINT    tmp = ( ap  = (__gnuc_va_list) ((char *) ( ap ) + (((sizeof (   ULINT      ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ),	*((  ULINT      *) (void *) ((char *) ( ap ) - (((sizeof (   ULINT      ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ))) ;   if(  op1   ==   tmp  ){ op1 = tmp; }else{ ((void)0) ; return 0; } } ((void)0) ; return 1;}   static inline BOOL   EQ__BOOL__ULINT   (BOOL EN, BOOL *ENO , UINT param_count,      ULINT    op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0  ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  ( ap  = ((__gnuc_va_list) __builtin_next_arg (  op1 ))) ; DBG("EQ__BOOL__ULINT" "ULINT" "\n")   for (i = 0; i < param_count - 1; i++){      ULINT    tmp = ( ap  = (__gnuc_va_list) ((char *) ( ap ) + (((sizeof (   ULINT      ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ),	*((  ULINT      *) (void *) ((char *) ( ap ) - (((sizeof (   ULINT      ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ))) ;   if(  op1   ==   tmp  ){ op1 = tmp; }else{ ((void)0) ; return 0; } } ((void)0) ; return 1;}      


 	



 static inline BOOL   EQ_DATE   (BOOL EN, BOOL *ENO , UINT param_count,      DATE    op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0  ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  ( ap  = ((__gnuc_va_list) __builtin_next_arg (  op1 ))) ; DBG("EQ_DATE" "DATE" "\n")   for (i = 0; i < param_count - 1; i++){      DATE    tmp = ( ap  = (__gnuc_va_list) ((char *) ( ap ) + (((sizeof (   DATE      ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ),	*((  DATE      *) (void *) ((char *) ( ap ) - (((sizeof (   DATE      ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ))) ;   if(  (  tmp .tv_sec ==  op1 .tv_sec ?  op1 .tv_nsec -   tmp .tv_nsec :  op1 .tv_sec -   tmp .tv_sec)    ==   0 ){ op1 = tmp; }else{ ((void)0) ; return 0; } } ((void)0) ; return 1;}   static inline BOOL   EQ__BOOL__DATE   (BOOL EN, BOOL *ENO , UINT param_count,      DATE    op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0  ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  ( ap  = ((__gnuc_va_list) __builtin_next_arg (  op1 ))) ; DBG("EQ__BOOL__DATE" "DATE" "\n")   for (i = 0; i < param_count - 1; i++){      DATE    tmp = ( ap  = (__gnuc_va_list) ((char *) ( ap ) + (((sizeof (   DATE      ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ),	*((  DATE      *) (void *) ((char *) ( ap ) - (((sizeof (   DATE      ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ))) ;   if(  (  tmp .tv_sec ==  op1 .tv_sec ?  op1 .tv_nsec -   tmp .tv_nsec :  op1 .tv_sec -   tmp .tv_sec)    ==   0 ){ op1 = tmp; }else{ ((void)0) ; return 0; } } ((void)0) ; return 1;}     static inline BOOL   EQ_TOD   (BOOL EN, BOOL *ENO , UINT param_count,      TOD    op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0  ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  ( ap  = ((__gnuc_va_list) __builtin_next_arg (  op1 ))) ; DBG("EQ_TOD" "TOD" "\n")   for (i = 0; i < param_count - 1; i++){      TOD    tmp = ( ap  = (__gnuc_va_list) ((char *) ( ap ) + (((sizeof (   TOD      ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ),	*((  TOD      *) (void *) ((char *) ( ap ) - (((sizeof (   TOD      ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ))) ;   if(  (  tmp .tv_sec ==  op1 .tv_sec ?  op1 .tv_nsec -   tmp .tv_nsec :  op1 .tv_sec -   tmp .tv_sec)    ==   0 ){ op1 = tmp; }else{ ((void)0) ; return 0; } } ((void)0) ; return 1;}   static inline BOOL   EQ__BOOL__TOD   (BOOL EN, BOOL *ENO , UINT param_count,      TOD    op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0  ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  ( ap  = ((__gnuc_va_list) __builtin_next_arg (  op1 ))) ; DBG("EQ__BOOL__TOD" "TOD" "\n")   for (i = 0; i < param_count - 1; i++){      TOD    tmp = ( ap  = (__gnuc_va_list) ((char *) ( ap ) + (((sizeof (   TOD      ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ),	*((  TOD      *) (void *) ((char *) ( ap ) - (((sizeof (   TOD      ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ))) ;   if(  (  tmp .tv_sec ==  op1 .tv_sec ?  op1 .tv_nsec -   tmp .tv_nsec :  op1 .tv_sec -   tmp .tv_sec)    ==   0 ){ op1 = tmp; }else{ ((void)0) ; return 0; } } ((void)0) ; return 1;}     static inline BOOL   EQ_DT   (BOOL EN, BOOL *ENO , UINT param_count,      DT    op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0  ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  ( ap  = ((__gnuc_va_list) __builtin_next_arg (  op1 ))) ; DBG("EQ_DT" "DT" "\n")   for (i = 0; i < param_count - 1; i++){      DT    tmp = ( ap  = (__gnuc_va_list) ((char *) ( ap ) + (((sizeof (   DT      ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ),	*((  DT      *) (void *) ((char *) ( ap ) - (((sizeof (   DT      ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ))) ;   if(  (  tmp .tv_sec ==  op1 .tv_sec ?  op1 .tv_nsec -   tmp .tv_nsec :  op1 .tv_sec -   tmp .tv_sec)    ==   0 ){ op1 = tmp; }else{ ((void)0) ; return 0; } } ((void)0) ; return 1;}   static inline BOOL   EQ__BOOL__DT   (BOOL EN, BOOL *ENO , UINT param_count,      DT    op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0  ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  ( ap  = ((__gnuc_va_list) __builtin_next_arg (  op1 ))) ; DBG("EQ__BOOL__DT" "DT" "\n")   for (i = 0; i < param_count - 1; i++){      DT    tmp = ( ap  = (__gnuc_va_list) ((char *) ( ap ) + (((sizeof (   DT      ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ),	*((  DT      *) (void *) ((char *) ( ap ) - (((sizeof (   DT      ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ))) ;   if(  (  tmp .tv_sec ==  op1 .tv_sec ?  op1 .tv_nsec -   tmp .tv_nsec :  op1 .tv_sec -   tmp .tv_sec)    ==   0 ){ op1 = tmp; }else{ ((void)0) ; return 0; } } ((void)0) ; return 1;}    
static inline BOOL   EQ_TIME   (BOOL EN, BOOL *ENO , UINT param_count,      TIME    op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0  ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  ( ap  = ((__gnuc_va_list) __builtin_next_arg (  op1 ))) ; DBG("EQ_TIME" "TIME" "\n")   for (i = 0; i < param_count - 1; i++){      TIME    tmp = ( ap  = (__gnuc_va_list) ((char *) ( ap ) + (((sizeof (   TIME      ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ),	*((  TIME      *) (void *) ((char *) ( ap ) - (((sizeof (   TIME      ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ))) ;   if(  (  tmp .tv_sec ==  op1 .tv_sec ?  op1 .tv_nsec -   tmp .tv_nsec :  op1 .tv_sec -   tmp .tv_sec)    ==   0 ){ op1 = tmp; }else{ ((void)0) ; return 0; } } ((void)0) ; return 1;}   static inline BOOL   EQ__BOOL__TIME   (BOOL EN, BOOL *ENO , UINT param_count,      TIME    op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0  ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  ( ap  = ((__gnuc_va_list) __builtin_next_arg (  op1 ))) ; DBG("EQ__BOOL__TIME" "TIME" "\n")   for (i = 0; i < param_count - 1; i++){      TIME    tmp = ( ap  = (__gnuc_va_list) ((char *) ( ap ) + (((sizeof (   TIME      ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ),	*((  TIME      *) (void *) ((char *) ( ap ) - (((sizeof (   TIME      ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ))) ;   if(  (  tmp .tv_sec ==  op1 .tv_sec ?  op1 .tv_nsec -   tmp .tv_nsec :  op1 .tv_sec -   tmp .tv_sec)    ==   0 ){ op1 = tmp; }else{ ((void)0) ; return 0; } } ((void)0) ; return 1;}   


 	
static inline BOOL   EQ_STRING  (BOOL EN, BOOL *ENO , UINT param_count,   STRING  op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0  ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  ( ap  = ((__gnuc_va_list) __builtin_next_arg (  op1 ))) ; DBG("EQ_STRING" "STRING" "\n")   for (i = 0; i < param_count - 1; i++){   STRING  tmp = ( ap  = (__gnuc_va_list) ((char *) ( ap ) + (((sizeof (   STRING    ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ),	*((  STRING    *) (void *) ((char *) ( ap ) - (((sizeof (   STRING    ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ))) ;   if(  memcmp((char*)& op1 .body,(char*)&  tmp .body,  op1 .len <   tmp .len ?  op1 .len :   tmp .len)    ==   0  ){ op1 = tmp; }else{ ((void)0) ; return 0; } } ((void)0) ; return 1;}    
static inline BOOL   EQ__BOOL__STRING  (BOOL EN, BOOL *ENO , UINT param_count,   STRING  op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0  ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  ( ap  = ((__gnuc_va_list) __builtin_next_arg (  op1 ))) ; DBG("EQ__BOOL__STRING" "STRING" "\n")   for (i = 0; i < param_count - 1; i++){   STRING  tmp = ( ap  = (__gnuc_va_list) ((char *) ( ap ) + (((sizeof (   STRING    ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ),	*((  STRING    *) (void *) ((char *) ( ap ) - (((sizeof (   STRING    ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ))) ;   if(  memcmp((char*)& op1 .body,(char*)&  tmp .body,  op1 .len <   tmp .len ?  op1 .len :   tmp .len)    ==   0  ){ op1 = tmp; }else{ ((void)0) ; return 0; } } ((void)0) ; return 1;}    


     
     
     
 



 static inline BOOL   LT_BYTE   (BOOL EN, BOOL *ENO , UINT param_count,      BYTE    op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0  ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  ( ap  = ((__gnuc_va_list) __builtin_next_arg (  op1 ))) ; DBG("LT_BYTE" "BYTE" "\n")   for (i = 0; i < param_count - 1; i++){      BYTE    tmp = ( ap  = (__gnuc_va_list) ((char *) ( ap ) + (((sizeof (   DWORD      ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ),	*((  DWORD      *) (void *) ((char *) ( ap ) - (((sizeof (   DWORD      ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ))) ;   if(  op1   <   tmp  ){ op1 = tmp; }else{ ((void)0) ; return 0; } } ((void)0) ; return 1;}   static inline BOOL   LT__BOOL__BYTE   (BOOL EN, BOOL *ENO , UINT param_count,      BYTE    op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0  ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  ( ap  = ((__gnuc_va_list) __builtin_next_arg (  op1 ))) ; DBG("LT__BOOL__BYTE" "BYTE" "\n")   for (i = 0; i < param_count - 1; i++){      BYTE    tmp = ( ap  = (__gnuc_va_list) ((char *) ( ap ) + (((sizeof (   DWORD      ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ),	*((  DWORD      *) (void *) ((char *) ( ap ) - (((sizeof (   DWORD      ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ))) ;   if(  op1   <   tmp  ){ op1 = tmp; }else{ ((void)0) ; return 0; } } ((void)0) ; return 1;}     static inline BOOL   LT_WORD   (BOOL EN, BOOL *ENO , UINT param_count,      WORD    op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0  ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  ( ap  = ((__gnuc_va_list) __builtin_next_arg (  op1 ))) ; DBG("LT_WORD" "WORD" "\n")   for (i = 0; i < param_count - 1; i++){      WORD    tmp = ( ap  = (__gnuc_va_list) ((char *) ( ap ) + (((sizeof (   DWORD      ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ),	*((  DWORD      *) (void *) ((char *) ( ap ) - (((sizeof (   DWORD      ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ))) ;   if(  op1   <   tmp  ){ op1 = tmp; }else{ ((void)0) ; return 0; } } ((void)0) ; return 1;}   static inline BOOL   LT__BOOL__WORD   (BOOL EN, BOOL *ENO , UINT param_count,      WORD    op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0  ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  ( ap  = ((__gnuc_va_list) __builtin_next_arg (  op1 ))) ; DBG("LT__BOOL__WORD" "WORD" "\n")   for (i = 0; i < param_count - 1; i++){      WORD    tmp = ( ap  = (__gnuc_va_list) ((char *) ( ap ) + (((sizeof (   DWORD      ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ),	*((  DWORD      *) (void *) ((char *) ( ap ) - (((sizeof (   DWORD      ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ))) ;   if(  op1   <   tmp  ){ op1 = tmp; }else{ ((void)0) ; return 0; } } ((void)0) ; return 1;}     static inline BOOL   LT_DWORD   (BOOL EN, BOOL *ENO , UINT param_count,      DWORD    op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0  ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  ( ap  = ((__gnuc_va_list) __builtin_next_arg (  op1 ))) ; DBG("LT_DWORD" "DWORD" "\n")   for (i = 0; i < param_count - 1; i++){      DWORD    tmp = ( ap  = (__gnuc_va_list) ((char *) ( ap ) + (((sizeof (   DWORD      ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ),	*((  DWORD      *) (void *) ((char *) ( ap ) - (((sizeof (   DWORD      ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ))) ;   if(  op1   <   tmp  ){ op1 = tmp; }else{ ((void)0) ; return 0; } } ((void)0) ; return 1;}   static inline BOOL   LT__BOOL__DWORD   (BOOL EN, BOOL *ENO , UINT param_count,      DWORD    op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0  ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  ( ap  = ((__gnuc_va_list) __builtin_next_arg (  op1 ))) ; DBG("LT__BOOL__DWORD" "DWORD" "\n")   for (i = 0; i < param_count - 1; i++){      DWORD    tmp = ( ap  = (__gnuc_va_list) ((char *) ( ap ) + (((sizeof (   DWORD      ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ),	*((  DWORD      *) (void *) ((char *) ( ap ) - (((sizeof (   DWORD      ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ))) ;   if(  op1   <   tmp  ){ op1 = tmp; }else{ ((void)0) ; return 0; } } ((void)0) ; return 1;}     static inline BOOL   LT_LWORD   (BOOL EN, BOOL *ENO , UINT param_count,      LWORD    op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0  ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  ( ap  = ((__gnuc_va_list) __builtin_next_arg (  op1 ))) ; DBG("LT_LWORD" "LWORD" "\n")   for (i = 0; i < param_count - 1; i++){      LWORD    tmp = ( ap  = (__gnuc_va_list) ((char *) ( ap ) + (((sizeof (   LWORD      ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ),	*((  LWORD      *) (void *) ((char *) ( ap ) - (((sizeof (   LWORD      ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ))) ;   if(  op1   <   tmp  ){ op1 = tmp; }else{ ((void)0) ; return 0; } } ((void)0) ; return 1;}   static inline BOOL   LT__BOOL__LWORD   (BOOL EN, BOOL *ENO , UINT param_count,      LWORD    op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0  ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  ( ap  = ((__gnuc_va_list) __builtin_next_arg (  op1 ))) ; DBG("LT__BOOL__LWORD" "LWORD" "\n")   for (i = 0; i < param_count - 1; i++){      LWORD    tmp = ( ap  = (__gnuc_va_list) ((char *) ( ap ) + (((sizeof (   LWORD      ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ),	*((  LWORD      *) (void *) ((char *) ( ap ) - (((sizeof (   LWORD      ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ))) ;   if(  op1   <   tmp  ){ op1 = tmp; }else{ ((void)0) ; return 0; } } ((void)0) ; return 1;}    
  static inline BOOL   LT_REAL   (BOOL EN, BOOL *ENO , UINT param_count,      REAL    op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0  ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  ( ap  = ((__gnuc_va_list) __builtin_next_arg (  op1 ))) ; DBG("LT_REAL" "REAL" "\n")   for (i = 0; i < param_count - 1; i++){      REAL    tmp = ( ap  = (__gnuc_va_list) ((char *) ( ap ) + (((sizeof (   LREAL      ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ),	*((  LREAL      *) (void *) ((char *) ( ap ) - (((sizeof (   LREAL      ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ))) ;   if(  op1   <   tmp  ){ op1 = tmp; }else{ ((void)0) ; return 0; } } ((void)0) ; return 1;}   static inline BOOL   LT__BOOL__REAL   (BOOL EN, BOOL *ENO , UINT param_count,      REAL    op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0  ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  ( ap  = ((__gnuc_va_list) __builtin_next_arg (  op1 ))) ; DBG("LT__BOOL__REAL" "REAL" "\n")   for (i = 0; i < param_count - 1; i++){      REAL    tmp = ( ap  = (__gnuc_va_list) ((char *) ( ap ) + (((sizeof (   LREAL      ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ),	*((  LREAL      *) (void *) ((char *) ( ap ) - (((sizeof (   LREAL      ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ))) ;   if(  op1   <   tmp  ){ op1 = tmp; }else{ ((void)0) ; return 0; } } ((void)0) ; return 1;}      static inline BOOL   LT_LREAL   (BOOL EN, BOOL *ENO , UINT param_count,      LREAL    op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0  ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  ( ap  = ((__gnuc_va_list) __builtin_next_arg (  op1 ))) ; DBG("LT_LREAL" "LREAL" "\n")   for (i = 0; i < param_count - 1; i++){      LREAL    tmp = ( ap  = (__gnuc_va_list) ((char *) ( ap ) + (((sizeof (   LREAL      ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ),	*((  LREAL      *) (void *) ((char *) ( ap ) - (((sizeof (   LREAL      ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ))) ;   if(  op1   <   tmp  ){ op1 = tmp; }else{ ((void)0) ; return 0; } } ((void)0) ; return 1;}   static inline BOOL   LT__BOOL__LREAL   (BOOL EN, BOOL *ENO , UINT param_count,      LREAL    op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0  ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  ( ap  = ((__gnuc_va_list) __builtin_next_arg (  op1 ))) ; DBG("LT__BOOL__LREAL" "LREAL" "\n")   for (i = 0; i < param_count - 1; i++){      LREAL    tmp = ( ap  = (__gnuc_va_list) ((char *) ( ap ) + (((sizeof (   LREAL      ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ),	*((  LREAL      *) (void *) ((char *) ( ap ) - (((sizeof (   LREAL      ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ))) ;   if(  op1   <   tmp  ){ op1 = tmp; }else{ ((void)0) ; return 0; } } ((void)0) ; return 1;}        static inline BOOL   LT_SINT   (BOOL EN, BOOL *ENO , UINT param_count,      SINT    op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0  ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  ( ap  = ((__gnuc_va_list) __builtin_next_arg (  op1 ))) ; DBG("LT_SINT" "SINT" "\n")   for (i = 0; i < param_count - 1; i++){      SINT    tmp = ( ap  = (__gnuc_va_list) ((char *) ( ap ) + (((sizeof (   DINT      ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ),	*((  DINT      *) (void *) ((char *) ( ap ) - (((sizeof (   DINT      ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ))) ;   if(  op1   <   tmp  ){ op1 = tmp; }else{ ((void)0) ; return 0; } } ((void)0) ; return 1;}   static inline BOOL   LT__BOOL__SINT   (BOOL EN, BOOL *ENO , UINT param_count,      SINT    op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0  ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  ( ap  = ((__gnuc_va_list) __builtin_next_arg (  op1 ))) ; DBG("LT__BOOL__SINT" "SINT" "\n")   for (i = 0; i < param_count - 1; i++){      SINT    tmp = ( ap  = (__gnuc_va_list) ((char *) ( ap ) + (((sizeof (   DINT      ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ),	*((  DINT      *) (void *) ((char *) ( ap ) - (((sizeof (   DINT      ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ))) ;   if(  op1   <   tmp  ){ op1 = tmp; }else{ ((void)0) ; return 0; } } ((void)0) ; return 1;}       static inline BOOL   LT_INT   (BOOL EN, BOOL *ENO , UINT param_count,      INT    op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0  ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  ( ap  = ((__gnuc_va_list) __builtin_next_arg (  op1 ))) ; DBG("LT_INT" "INT" "\n")   for (i = 0; i < param_count - 1; i++){      INT    tmp = ( ap  = (__gnuc_va_list) ((char *) ( ap ) + (((sizeof (   DINT      ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ),	*((  DINT      *) (void *) ((char *) ( ap ) - (((sizeof (   DINT      ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ))) ;   if(  op1   <   tmp  ){ op1 = tmp; }else{ ((void)0) ; return 0; } } ((void)0) ; return 1;}   static inline BOOL   LT__BOOL__INT   (BOOL EN, BOOL *ENO , UINT param_count,      INT    op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0  ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  ( ap  = ((__gnuc_va_list) __builtin_next_arg (  op1 ))) ; DBG("LT__BOOL__INT" "INT" "\n")   for (i = 0; i < param_count - 1; i++){      INT    tmp = ( ap  = (__gnuc_va_list) ((char *) ( ap ) + (((sizeof (   DINT      ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ),	*((  DINT      *) (void *) ((char *) ( ap ) - (((sizeof (   DINT      ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ))) ;   if(  op1   <   tmp  ){ op1 = tmp; }else{ ((void)0) ; return 0; } } ((void)0) ; return 1;}       static inline BOOL   LT_DINT   (BOOL EN, BOOL *ENO , UINT param_count,      DINT    op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0  ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  ( ap  = ((__gnuc_va_list) __builtin_next_arg (  op1 ))) ; DBG("LT_DINT" "DINT" "\n")   for (i = 0; i < param_count - 1; i++){      DINT    tmp = ( ap  = (__gnuc_va_list) ((char *) ( ap ) + (((sizeof (   DINT      ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ),	*((  DINT      *) (void *) ((char *) ( ap ) - (((sizeof (   DINT      ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ))) ;   if(  op1   <   tmp  ){ op1 = tmp; }else{ ((void)0) ; return 0; } } ((void)0) ; return 1;}   static inline BOOL   LT__BOOL__DINT   (BOOL EN, BOOL *ENO , UINT param_count,      DINT    op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0  ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  ( ap  = ((__gnuc_va_list) __builtin_next_arg (  op1 ))) ; DBG("LT__BOOL__DINT" "DINT" "\n")   for (i = 0; i < param_count - 1; i++){      DINT    tmp = ( ap  = (__gnuc_va_list) ((char *) ( ap ) + (((sizeof (   DINT      ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ),	*((  DINT      *) (void *) ((char *) ( ap ) - (((sizeof (   DINT      ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ))) ;   if(  op1   <   tmp  ){ op1 = tmp; }else{ ((void)0) ; return 0; } } ((void)0) ; return 1;}       static inline BOOL   LT_LINT   (BOOL EN, BOOL *ENO , UINT param_count,      LINT    op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0  ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  ( ap  = ((__gnuc_va_list) __builtin_next_arg (  op1 ))) ; DBG("LT_LINT" "LINT" "\n")   for (i = 0; i < param_count - 1; i++){      LINT    tmp = ( ap  = (__gnuc_va_list) ((char *) ( ap ) + (((sizeof (   LINT      ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ),	*((  LINT      *) (void *) ((char *) ( ap ) - (((sizeof (   LINT      ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ))) ;   if(  op1   <   tmp  ){ op1 = tmp; }else{ ((void)0) ; return 0; } } ((void)0) ; return 1;}   static inline BOOL   LT__BOOL__LINT   (BOOL EN, BOOL *ENO , UINT param_count,      LINT    op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0  ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  ( ap  = ((__gnuc_va_list) __builtin_next_arg (  op1 ))) ; DBG("LT__BOOL__LINT" "LINT" "\n")   for (i = 0; i < param_count - 1; i++){      LINT    tmp = ( ap  = (__gnuc_va_list) ((char *) ( ap ) + (((sizeof (   LINT      ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ),	*((  LINT      *) (void *) ((char *) ( ap ) - (((sizeof (   LINT      ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ))) ;   if(  op1   <   tmp  ){ op1 = tmp; }else{ ((void)0) ; return 0; } } ((void)0) ; return 1;}        static inline BOOL   LT_USINT   (BOOL EN, BOOL *ENO , UINT param_count,      USINT    op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0  ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  ( ap  = ((__gnuc_va_list) __builtin_next_arg (  op1 ))) ; DBG("LT_USINT" "USINT" "\n")   for (i = 0; i < param_count - 1; i++){      USINT    tmp = ( ap  = (__gnuc_va_list) ((char *) ( ap ) + (((sizeof (   UDINT      ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ),	*((  UDINT      *) (void *) ((char *) ( ap ) - (((sizeof (   UDINT      ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ))) ;   if(  op1   <   tmp  ){ op1 = tmp; }else{ ((void)0) ; return 0; } } ((void)0) ; return 1;}   static inline BOOL   LT__BOOL__USINT   (BOOL EN, BOOL *ENO , UINT param_count,      USINT    op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0  ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  ( ap  = ((__gnuc_va_list) __builtin_next_arg (  op1 ))) ; DBG("LT__BOOL__USINT" "USINT" "\n")   for (i = 0; i < param_count - 1; i++){      USINT    tmp = ( ap  = (__gnuc_va_list) ((char *) ( ap ) + (((sizeof (   UDINT      ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ),	*((  UDINT      *) (void *) ((char *) ( ap ) - (((sizeof (   UDINT      ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ))) ;   if(  op1   <   tmp  ){ op1 = tmp; }else{ ((void)0) ; return 0; } } ((void)0) ; return 1;}       static inline BOOL   LT_UINT   (BOOL EN, BOOL *ENO , UINT param_count,      UINT    op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0  ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  ( ap  = ((__gnuc_va_list) __builtin_next_arg (  op1 ))) ; DBG("LT_UINT" "UINT" "\n")   for (i = 0; i < param_count - 1; i++){      UINT    tmp = ( ap  = (__gnuc_va_list) ((char *) ( ap ) + (((sizeof (   UDINT      ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ),	*((  UDINT      *) (void *) ((char *) ( ap ) - (((sizeof (   UDINT      ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ))) ;   if(  op1   <   tmp  ){ op1 = tmp; }else{ ((void)0) ; return 0; } } ((void)0) ; return 1;}   static inline BOOL   LT__BOOL__UINT   (BOOL EN, BOOL *ENO , UINT param_count,      UINT    op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0  ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  ( ap  = ((__gnuc_va_list) __builtin_next_arg (  op1 ))) ; DBG("LT__BOOL__UINT" "UINT" "\n")   for (i = 0; i < param_count - 1; i++){      UINT    tmp = ( ap  = (__gnuc_va_list) ((char *) ( ap ) + (((sizeof (   UDINT      ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ),	*((  UDINT      *) (void *) ((char *) ( ap ) - (((sizeof (   UDINT      ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ))) ;   if(  op1   <   tmp  ){ op1 = tmp; }else{ ((void)0) ; return 0; } } ((void)0) ; return 1;}       static inline BOOL   LT_UDINT   (BOOL EN, BOOL *ENO , UINT param_count,      UDINT    op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0  ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  ( ap  = ((__gnuc_va_list) __builtin_next_arg (  op1 ))) ; DBG("LT_UDINT" "UDINT" "\n")   for (i = 0; i < param_count - 1; i++){      UDINT    tmp = ( ap  = (__gnuc_va_list) ((char *) ( ap ) + (((sizeof (   UDINT      ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ),	*((  UDINT      *) (void *) ((char *) ( ap ) - (((sizeof (   UDINT      ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ))) ;   if(  op1   <   tmp  ){ op1 = tmp; }else{ ((void)0) ; return 0; } } ((void)0) ; return 1;}   static inline BOOL   LT__BOOL__UDINT   (BOOL EN, BOOL *ENO , UINT param_count,      UDINT    op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0  ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  ( ap  = ((__gnuc_va_list) __builtin_next_arg (  op1 ))) ; DBG("LT__BOOL__UDINT" "UDINT" "\n")   for (i = 0; i < param_count - 1; i++){      UDINT    tmp = ( ap  = (__gnuc_va_list) ((char *) ( ap ) + (((sizeof (   UDINT      ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ),	*((  UDINT      *) (void *) ((char *) ( ap ) - (((sizeof (   UDINT      ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ))) ;   if(  op1   <   tmp  ){ op1 = tmp; }else{ ((void)0) ; return 0; } } ((void)0) ; return 1;}       static inline BOOL   LT_ULINT   (BOOL EN, BOOL *ENO , UINT param_count,      ULINT    op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0  ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  ( ap  = ((__gnuc_va_list) __builtin_next_arg (  op1 ))) ; DBG("LT_ULINT" "ULINT" "\n")   for (i = 0; i < param_count - 1; i++){      ULINT    tmp = ( ap  = (__gnuc_va_list) ((char *) ( ap ) + (((sizeof (   ULINT      ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ),	*((  ULINT      *) (void *) ((char *) ( ap ) - (((sizeof (   ULINT      ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ))) ;   if(  op1   <   tmp  ){ op1 = tmp; }else{ ((void)0) ; return 0; } } ((void)0) ; return 1;}   static inline BOOL   LT__BOOL__ULINT   (BOOL EN, BOOL *ENO , UINT param_count,      ULINT    op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0  ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  ( ap  = ((__gnuc_va_list) __builtin_next_arg (  op1 ))) ; DBG("LT__BOOL__ULINT" "ULINT" "\n")   for (i = 0; i < param_count - 1; i++){      ULINT    tmp = ( ap  = (__gnuc_va_list) ((char *) ( ap ) + (((sizeof (   ULINT      ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ),	*((  ULINT      *) (void *) ((char *) ( ap ) - (((sizeof (   ULINT      ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ))) ;   if(  op1   <   tmp  ){ op1 = tmp; }else{ ((void)0) ; return 0; } } ((void)0) ; return 1;}      


 	



 static inline BOOL   LT_DATE   (BOOL EN, BOOL *ENO , UINT param_count,      DATE    op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0  ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  ( ap  = ((__gnuc_va_list) __builtin_next_arg (  op1 ))) ; DBG("LT_DATE" "DATE" "\n")   for (i = 0; i < param_count - 1; i++){      DATE    tmp = ( ap  = (__gnuc_va_list) ((char *) ( ap ) + (((sizeof (   DATE      ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ),	*((  DATE      *) (void *) ((char *) ( ap ) - (((sizeof (   DATE      ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ))) ;   if(  (  tmp .tv_sec ==  op1 .tv_sec ?  op1 .tv_nsec -   tmp .tv_nsec :  op1 .tv_sec -   tmp .tv_sec)    <   0 ){ op1 = tmp; }else{ ((void)0) ; return 0; } } ((void)0) ; return 1;}   static inline BOOL   LT__BOOL__DATE   (BOOL EN, BOOL *ENO , UINT param_count,      DATE    op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0  ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  ( ap  = ((__gnuc_va_list) __builtin_next_arg (  op1 ))) ; DBG("LT__BOOL__DATE" "DATE" "\n")   for (i = 0; i < param_count - 1; i++){      DATE    tmp = ( ap  = (__gnuc_va_list) ((char *) ( ap ) + (((sizeof (   DATE      ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ),	*((  DATE      *) (void *) ((char *) ( ap ) - (((sizeof (   DATE      ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ))) ;   if(  (  tmp .tv_sec ==  op1 .tv_sec ?  op1 .tv_nsec -   tmp .tv_nsec :  op1 .tv_sec -   tmp .tv_sec)    <   0 ){ op1 = tmp; }else{ ((void)0) ; return 0; } } ((void)0) ; return 1;}     static inline BOOL   LT_TOD   (BOOL EN, BOOL *ENO , UINT param_count,      TOD    op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0  ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  ( ap  = ((__gnuc_va_list) __builtin_next_arg (  op1 ))) ; DBG("LT_TOD" "TOD" "\n")   for (i = 0; i < param_count - 1; i++){      TOD    tmp = ( ap  = (__gnuc_va_list) ((char *) ( ap ) + (((sizeof (   TOD      ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ),	*((  TOD      *) (void *) ((char *) ( ap ) - (((sizeof (   TOD      ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ))) ;   if(  (  tmp .tv_sec ==  op1 .tv_sec ?  op1 .tv_nsec -   tmp .tv_nsec :  op1 .tv_sec -   tmp .tv_sec)    <   0 ){ op1 = tmp; }else{ ((void)0) ; return 0; } } ((void)0) ; return 1;}   static inline BOOL   LT__BOOL__TOD   (BOOL EN, BOOL *ENO , UINT param_count,      TOD    op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0  ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  ( ap  = ((__gnuc_va_list) __builtin_next_arg (  op1 ))) ; DBG("LT__BOOL__TOD" "TOD" "\n")   for (i = 0; i < param_count - 1; i++){      TOD    tmp = ( ap  = (__gnuc_va_list) ((char *) ( ap ) + (((sizeof (   TOD      ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ),	*((  TOD      *) (void *) ((char *) ( ap ) - (((sizeof (   TOD      ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ))) ;   if(  (  tmp .tv_sec ==  op1 .tv_sec ?  op1 .tv_nsec -   tmp .tv_nsec :  op1 .tv_sec -   tmp .tv_sec)    <   0 ){ op1 = tmp; }else{ ((void)0) ; return 0; } } ((void)0) ; return 1;}     static inline BOOL   LT_DT   (BOOL EN, BOOL *ENO , UINT param_count,      DT    op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0  ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  ( ap  = ((__gnuc_va_list) __builtin_next_arg (  op1 ))) ; DBG("LT_DT" "DT" "\n")   for (i = 0; i < param_count - 1; i++){      DT    tmp = ( ap  = (__gnuc_va_list) ((char *) ( ap ) + (((sizeof (   DT      ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ),	*((  DT      *) (void *) ((char *) ( ap ) - (((sizeof (   DT      ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ))) ;   if(  (  tmp .tv_sec ==  op1 .tv_sec ?  op1 .tv_nsec -   tmp .tv_nsec :  op1 .tv_sec -   tmp .tv_sec)    <   0 ){ op1 = tmp; }else{ ((void)0) ; return 0; } } ((void)0) ; return 1;}   static inline BOOL   LT__BOOL__DT   (BOOL EN, BOOL *ENO , UINT param_count,      DT    op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0  ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  ( ap  = ((__gnuc_va_list) __builtin_next_arg (  op1 ))) ; DBG("LT__BOOL__DT" "DT" "\n")   for (i = 0; i < param_count - 1; i++){      DT    tmp = ( ap  = (__gnuc_va_list) ((char *) ( ap ) + (((sizeof (   DT      ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ),	*((  DT      *) (void *) ((char *) ( ap ) - (((sizeof (   DT      ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ))) ;   if(  (  tmp .tv_sec ==  op1 .tv_sec ?  op1 .tv_nsec -   tmp .tv_nsec :  op1 .tv_sec -   tmp .tv_sec)    <   0 ){ op1 = tmp; }else{ ((void)0) ; return 0; } } ((void)0) ; return 1;}    
static inline BOOL   LT_TIME   (BOOL EN, BOOL *ENO , UINT param_count,      TIME    op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0  ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  ( ap  = ((__gnuc_va_list) __builtin_next_arg (  op1 ))) ; DBG("LT_TIME" "TIME" "\n")   for (i = 0; i < param_count - 1; i++){      TIME    tmp = ( ap  = (__gnuc_va_list) ((char *) ( ap ) + (((sizeof (   TIME      ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ),	*((  TIME      *) (void *) ((char *) ( ap ) - (((sizeof (   TIME      ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ))) ;   if(  (  tmp .tv_sec ==  op1 .tv_sec ?  op1 .tv_nsec -   tmp .tv_nsec :  op1 .tv_sec -   tmp .tv_sec)    <   0 ){ op1 = tmp; }else{ ((void)0) ; return 0; } } ((void)0) ; return 1;}   static inline BOOL   LT__BOOL__TIME   (BOOL EN, BOOL *ENO , UINT param_count,      TIME    op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0  ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  ( ap  = ((__gnuc_va_list) __builtin_next_arg (  op1 ))) ; DBG("LT__BOOL__TIME" "TIME" "\n")   for (i = 0; i < param_count - 1; i++){      TIME    tmp = ( ap  = (__gnuc_va_list) ((char *) ( ap ) + (((sizeof (   TIME      ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ),	*((  TIME      *) (void *) ((char *) ( ap ) - (((sizeof (   TIME      ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ))) ;   if(  (  tmp .tv_sec ==  op1 .tv_sec ?  op1 .tv_nsec -   tmp .tv_nsec :  op1 .tv_sec -   tmp .tv_sec)    <   0 ){ op1 = tmp; }else{ ((void)0) ; return 0; } } ((void)0) ; return 1;}   


 	
static inline BOOL   LT_STRING  (BOOL EN, BOOL *ENO , UINT param_count,   STRING  op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0  ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  ( ap  = ((__gnuc_va_list) __builtin_next_arg (  op1 ))) ; DBG("LT_STRING" "STRING" "\n")   for (i = 0; i < param_count - 1; i++){   STRING  tmp = ( ap  = (__gnuc_va_list) ((char *) ( ap ) + (((sizeof (   STRING    ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ),	*((  STRING    *) (void *) ((char *) ( ap ) - (((sizeof (   STRING    ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ))) ;   if(  memcmp((char*)& op1 .body,(char*)&  tmp .body,  op1 .len <   tmp .len ?  op1 .len :   tmp .len)    <   0  ){ op1 = tmp; }else{ ((void)0) ; return 0; } } ((void)0) ; return 1;}    
static inline BOOL   LT__BOOL__STRING  (BOOL EN, BOOL *ENO , UINT param_count,   STRING  op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0  ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  ( ap  = ((__gnuc_va_list) __builtin_next_arg (  op1 ))) ; DBG("LT__BOOL__STRING" "STRING" "\n")   for (i = 0; i < param_count - 1; i++){   STRING  tmp = ( ap  = (__gnuc_va_list) ((char *) ( ap ) + (((sizeof (   STRING    ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ),	*((  STRING    *) (void *) ((char *) ( ap ) - (((sizeof (   STRING    ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ))) ;   if(  memcmp((char*)& op1 .body,(char*)&  tmp .body,  op1 .len <   tmp .len ?  op1 .len :   tmp .len)    <   0  ){ op1 = tmp; }else{ ((void)0) ; return 0; } } ((void)0) ; return 1;}    


     
     
     
 



 static inline BOOL   LE_BYTE   (BOOL EN, BOOL *ENO , UINT param_count,      BYTE    op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0  ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  ( ap  = ((__gnuc_va_list) __builtin_next_arg (  op1 ))) ; DBG("LE_BYTE" "BYTE" "\n")   for (i = 0; i < param_count - 1; i++){      BYTE    tmp = ( ap  = (__gnuc_va_list) ((char *) ( ap ) + (((sizeof (   DWORD      ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ),	*((  DWORD      *) (void *) ((char *) ( ap ) - (((sizeof (   DWORD      ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ))) ;   if(  op1   <=   tmp  ){ op1 = tmp; }else{ ((void)0) ; return 0; } } ((void)0) ; return 1;}   static inline BOOL   LE__BOOL__BYTE   (BOOL EN, BOOL *ENO , UINT param_count,      BYTE    op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0  ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  ( ap  = ((__gnuc_va_list) __builtin_next_arg (  op1 ))) ; DBG("LE__BOOL__BYTE" "BYTE" "\n")   for (i = 0; i < param_count - 1; i++){      BYTE    tmp = ( ap  = (__gnuc_va_list) ((char *) ( ap ) + (((sizeof (   DWORD      ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ),	*((  DWORD      *) (void *) ((char *) ( ap ) - (((sizeof (   DWORD      ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ))) ;   if(  op1   <=   tmp  ){ op1 = tmp; }else{ ((void)0) ; return 0; } } ((void)0) ; return 1;}     static inline BOOL   LE_WORD   (BOOL EN, BOOL *ENO , UINT param_count,      WORD    op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0  ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  ( ap  = ((__gnuc_va_list) __builtin_next_arg (  op1 ))) ; DBG("LE_WORD" "WORD" "\n")   for (i = 0; i < param_count - 1; i++){      WORD    tmp = ( ap  = (__gnuc_va_list) ((char *) ( ap ) + (((sizeof (   DWORD      ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ),	*((  DWORD      *) (void *) ((char *) ( ap ) - (((sizeof (   DWORD      ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ))) ;   if(  op1   <=   tmp  ){ op1 = tmp; }else{ ((void)0) ; return 0; } } ((void)0) ; return 1;}   static inline BOOL   LE__BOOL__WORD   (BOOL EN, BOOL *ENO , UINT param_count,      WORD    op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0  ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  ( ap  = ((__gnuc_va_list) __builtin_next_arg (  op1 ))) ; DBG("LE__BOOL__WORD" "WORD" "\n")   for (i = 0; i < param_count - 1; i++){      WORD    tmp = ( ap  = (__gnuc_va_list) ((char *) ( ap ) + (((sizeof (   DWORD      ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ),	*((  DWORD      *) (void *) ((char *) ( ap ) - (((sizeof (   DWORD      ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ))) ;   if(  op1   <=   tmp  ){ op1 = tmp; }else{ ((void)0) ; return 0; } } ((void)0) ; return 1;}     static inline BOOL   LE_DWORD   (BOOL EN, BOOL *ENO , UINT param_count,      DWORD    op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0  ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  ( ap  = ((__gnuc_va_list) __builtin_next_arg (  op1 ))) ; DBG("LE_DWORD" "DWORD" "\n")   for (i = 0; i < param_count - 1; i++){      DWORD    tmp = ( ap  = (__gnuc_va_list) ((char *) ( ap ) + (((sizeof (   DWORD      ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ),	*((  DWORD      *) (void *) ((char *) ( ap ) - (((sizeof (   DWORD      ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ))) ;   if(  op1   <=   tmp  ){ op1 = tmp; }else{ ((void)0) ; return 0; } } ((void)0) ; return 1;}   static inline BOOL   LE__BOOL__DWORD   (BOOL EN, BOOL *ENO , UINT param_count,      DWORD    op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0  ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  ( ap  = ((__gnuc_va_list) __builtin_next_arg (  op1 ))) ; DBG("LE__BOOL__DWORD" "DWORD" "\n")   for (i = 0; i < param_count - 1; i++){      DWORD    tmp = ( ap  = (__gnuc_va_list) ((char *) ( ap ) + (((sizeof (   DWORD      ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ),	*((  DWORD      *) (void *) ((char *) ( ap ) - (((sizeof (   DWORD      ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ))) ;   if(  op1   <=   tmp  ){ op1 = tmp; }else{ ((void)0) ; return 0; } } ((void)0) ; return 1;}     static inline BOOL   LE_LWORD   (BOOL EN, BOOL *ENO , UINT param_count,      LWORD    op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0  ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  ( ap  = ((__gnuc_va_list) __builtin_next_arg (  op1 ))) ; DBG("LE_LWORD" "LWORD" "\n")   for (i = 0; i < param_count - 1; i++){      LWORD    tmp = ( ap  = (__gnuc_va_list) ((char *) ( ap ) + (((sizeof (   LWORD      ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ),	*((  LWORD      *) (void *) ((char *) ( ap ) - (((sizeof (   LWORD      ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ))) ;   if(  op1   <=   tmp  ){ op1 = tmp; }else{ ((void)0) ; return 0; } } ((void)0) ; return 1;}   static inline BOOL   LE__BOOL__LWORD   (BOOL EN, BOOL *ENO , UINT param_count,      LWORD    op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0  ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  ( ap  = ((__gnuc_va_list) __builtin_next_arg (  op1 ))) ; DBG("LE__BOOL__LWORD" "LWORD" "\n")   for (i = 0; i < param_count - 1; i++){      LWORD    tmp = ( ap  = (__gnuc_va_list) ((char *) ( ap ) + (((sizeof (   LWORD      ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ),	*((  LWORD      *) (void *) ((char *) ( ap ) - (((sizeof (   LWORD      ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ))) ;   if(  op1   <=   tmp  ){ op1 = tmp; }else{ ((void)0) ; return 0; } } ((void)0) ; return 1;}    
  static inline BOOL   LE_REAL   (BOOL EN, BOOL *ENO , UINT param_count,      REAL    op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0  ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  ( ap  = ((__gnuc_va_list) __builtin_next_arg (  op1 ))) ; DBG("LE_REAL" "REAL" "\n")   for (i = 0; i < param_count - 1; i++){      REAL    tmp = ( ap  = (__gnuc_va_list) ((char *) ( ap ) + (((sizeof (   LREAL      ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ),	*((  LREAL      *) (void *) ((char *) ( ap ) - (((sizeof (   LREAL      ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ))) ;   if(  op1   <=   tmp  ){ op1 = tmp; }else{ ((void)0) ; return 0; } } ((void)0) ; return 1;}   static inline BOOL   LE__BOOL__REAL   (BOOL EN, BOOL *ENO , UINT param_count,      REAL    op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0  ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  ( ap  = ((__gnuc_va_list) __builtin_next_arg (  op1 ))) ; DBG("LE__BOOL__REAL" "REAL" "\n")   for (i = 0; i < param_count - 1; i++){      REAL    tmp = ( ap  = (__gnuc_va_list) ((char *) ( ap ) + (((sizeof (   LREAL      ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ),	*((  LREAL      *) (void *) ((char *) ( ap ) - (((sizeof (   LREAL      ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ))) ;   if(  op1   <=   tmp  ){ op1 = tmp; }else{ ((void)0) ; return 0; } } ((void)0) ; return 1;}      static inline BOOL   LE_LREAL   (BOOL EN, BOOL *ENO , UINT param_count,      LREAL    op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0  ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  ( ap  = ((__gnuc_va_list) __builtin_next_arg (  op1 ))) ; DBG("LE_LREAL" "LREAL" "\n")   for (i = 0; i < param_count - 1; i++){      LREAL    tmp = ( ap  = (__gnuc_va_list) ((char *) ( ap ) + (((sizeof (   LREAL      ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ),	*((  LREAL      *) (void *) ((char *) ( ap ) - (((sizeof (   LREAL      ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ))) ;   if(  op1   <=   tmp  ){ op1 = tmp; }else{ ((void)0) ; return 0; } } ((void)0) ; return 1;}   static inline BOOL   LE__BOOL__LREAL   (BOOL EN, BOOL *ENO , UINT param_count,      LREAL    op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0  ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  ( ap  = ((__gnuc_va_list) __builtin_next_arg (  op1 ))) ; DBG("LE__BOOL__LREAL" "LREAL" "\n")   for (i = 0; i < param_count - 1; i++){      LREAL    tmp = ( ap  = (__gnuc_va_list) ((char *) ( ap ) + (((sizeof (   LREAL      ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ),	*((  LREAL      *) (void *) ((char *) ( ap ) - (((sizeof (   LREAL      ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ))) ;   if(  op1   <=   tmp  ){ op1 = tmp; }else{ ((void)0) ; return 0; } } ((void)0) ; return 1;}        static inline BOOL   LE_SINT   (BOOL EN, BOOL *ENO , UINT param_count,      SINT    op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0  ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  ( ap  = ((__gnuc_va_list) __builtin_next_arg (  op1 ))) ; DBG("LE_SINT" "SINT" "\n")   for (i = 0; i < param_count - 1; i++){      SINT    tmp = ( ap  = (__gnuc_va_list) ((char *) ( ap ) + (((sizeof (   DINT      ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ),	*((  DINT      *) (void *) ((char *) ( ap ) - (((sizeof (   DINT      ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ))) ;   if(  op1   <=   tmp  ){ op1 = tmp; }else{ ((void)0) ; return 0; } } ((void)0) ; return 1;}   static inline BOOL   LE__BOOL__SINT   (BOOL EN, BOOL *ENO , UINT param_count,      SINT    op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0  ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  ( ap  = ((__gnuc_va_list) __builtin_next_arg (  op1 ))) ; DBG("LE__BOOL__SINT" "SINT" "\n")   for (i = 0; i < param_count - 1; i++){      SINT    tmp = ( ap  = (__gnuc_va_list) ((char *) ( ap ) + (((sizeof (   DINT      ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ),	*((  DINT      *) (void *) ((char *) ( ap ) - (((sizeof (   DINT      ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ))) ;   if(  op1   <=   tmp  ){ op1 = tmp; }else{ ((void)0) ; return 0; } } ((void)0) ; return 1;}       static inline BOOL   LE_INT   (BOOL EN, BOOL *ENO , UINT param_count,      INT    op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0  ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  ( ap  = ((__gnuc_va_list) __builtin_next_arg (  op1 ))) ; DBG("LE_INT" "INT" "\n")   for (i = 0; i < param_count - 1; i++){      INT    tmp = ( ap  = (__gnuc_va_list) ((char *) ( ap ) + (((sizeof (   DINT      ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ),	*((  DINT      *) (void *) ((char *) ( ap ) - (((sizeof (   DINT      ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ))) ;   if(  op1   <=   tmp  ){ op1 = tmp; }else{ ((void)0) ; return 0; } } ((void)0) ; return 1;}   static inline BOOL   LE__BOOL__INT   (BOOL EN, BOOL *ENO , UINT param_count,      INT    op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0  ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  ( ap  = ((__gnuc_va_list) __builtin_next_arg (  op1 ))) ; DBG("LE__BOOL__INT" "INT" "\n")   for (i = 0; i < param_count - 1; i++){      INT    tmp = ( ap  = (__gnuc_va_list) ((char *) ( ap ) + (((sizeof (   DINT      ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ),	*((  DINT      *) (void *) ((char *) ( ap ) - (((sizeof (   DINT      ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ))) ;   if(  op1   <=   tmp  ){ op1 = tmp; }else{ ((void)0) ; return 0; } } ((void)0) ; return 1;}       static inline BOOL   LE_DINT   (BOOL EN, BOOL *ENO , UINT param_count,      DINT    op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0  ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  ( ap  = ((__gnuc_va_list) __builtin_next_arg (  op1 ))) ; DBG("LE_DINT" "DINT" "\n")   for (i = 0; i < param_count - 1; i++){      DINT    tmp = ( ap  = (__gnuc_va_list) ((char *) ( ap ) + (((sizeof (   DINT      ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ),	*((  DINT      *) (void *) ((char *) ( ap ) - (((sizeof (   DINT      ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ))) ;   if(  op1   <=   tmp  ){ op1 = tmp; }else{ ((void)0) ; return 0; } } ((void)0) ; return 1;}   static inline BOOL   LE__BOOL__DINT   (BOOL EN, BOOL *ENO , UINT param_count,      DINT    op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0  ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  ( ap  = ((__gnuc_va_list) __builtin_next_arg (  op1 ))) ; DBG("LE__BOOL__DINT" "DINT" "\n")   for (i = 0; i < param_count - 1; i++){      DINT    tmp = ( ap  = (__gnuc_va_list) ((char *) ( ap ) + (((sizeof (   DINT      ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ),	*((  DINT      *) (void *) ((char *) ( ap ) - (((sizeof (   DINT      ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ))) ;   if(  op1   <=   tmp  ){ op1 = tmp; }else{ ((void)0) ; return 0; } } ((void)0) ; return 1;}       static inline BOOL   LE_LINT   (BOOL EN, BOOL *ENO , UINT param_count,      LINT    op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0  ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  ( ap  = ((__gnuc_va_list) __builtin_next_arg (  op1 ))) ; DBG("LE_LINT" "LINT" "\n")   for (i = 0; i < param_count - 1; i++){      LINT    tmp = ( ap  = (__gnuc_va_list) ((char *) ( ap ) + (((sizeof (   LINT      ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ),	*((  LINT      *) (void *) ((char *) ( ap ) - (((sizeof (   LINT      ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ))) ;   if(  op1   <=   tmp  ){ op1 = tmp; }else{ ((void)0) ; return 0; } } ((void)0) ; return 1;}   static inline BOOL   LE__BOOL__LINT   (BOOL EN, BOOL *ENO , UINT param_count,      LINT    op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0  ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  ( ap  = ((__gnuc_va_list) __builtin_next_arg (  op1 ))) ; DBG("LE__BOOL__LINT" "LINT" "\n")   for (i = 0; i < param_count - 1; i++){      LINT    tmp = ( ap  = (__gnuc_va_list) ((char *) ( ap ) + (((sizeof (   LINT      ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ),	*((  LINT      *) (void *) ((char *) ( ap ) - (((sizeof (   LINT      ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ))) ;   if(  op1   <=   tmp  ){ op1 = tmp; }else{ ((void)0) ; return 0; } } ((void)0) ; return 1;}        static inline BOOL   LE_USINT   (BOOL EN, BOOL *ENO , UINT param_count,      USINT    op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0  ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  ( ap  = ((__gnuc_va_list) __builtin_next_arg (  op1 ))) ; DBG("LE_USINT" "USINT" "\n")   for (i = 0; i < param_count - 1; i++){      USINT    tmp = ( ap  = (__gnuc_va_list) ((char *) ( ap ) + (((sizeof (   UDINT      ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ),	*((  UDINT      *) (void *) ((char *) ( ap ) - (((sizeof (   UDINT      ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ))) ;   if(  op1   <=   tmp  ){ op1 = tmp; }else{ ((void)0) ; return 0; } } ((void)0) ; return 1;}   static inline BOOL   LE__BOOL__USINT   (BOOL EN, BOOL *ENO , UINT param_count,      USINT    op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0  ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  ( ap  = ((__gnuc_va_list) __builtin_next_arg (  op1 ))) ; DBG("LE__BOOL__USINT" "USINT" "\n")   for (i = 0; i < param_count - 1; i++){      USINT    tmp = ( ap  = (__gnuc_va_list) ((char *) ( ap ) + (((sizeof (   UDINT      ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ),	*((  UDINT      *) (void *) ((char *) ( ap ) - (((sizeof (   UDINT      ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ))) ;   if(  op1   <=   tmp  ){ op1 = tmp; }else{ ((void)0) ; return 0; } } ((void)0) ; return 1;}       static inline BOOL   LE_UINT   (BOOL EN, BOOL *ENO , UINT param_count,      UINT    op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0  ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  ( ap  = ((__gnuc_va_list) __builtin_next_arg (  op1 ))) ; DBG("LE_UINT" "UINT" "\n")   for (i = 0; i < param_count - 1; i++){      UINT    tmp = ( ap  = (__gnuc_va_list) ((char *) ( ap ) + (((sizeof (   UDINT      ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ),	*((  UDINT      *) (void *) ((char *) ( ap ) - (((sizeof (   UDINT      ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ))) ;   if(  op1   <=   tmp  ){ op1 = tmp; }else{ ((void)0) ; return 0; } } ((void)0) ; return 1;}   static inline BOOL   LE__BOOL__UINT   (BOOL EN, BOOL *ENO , UINT param_count,      UINT    op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0  ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  ( ap  = ((__gnuc_va_list) __builtin_next_arg (  op1 ))) ; DBG("LE__BOOL__UINT" "UINT" "\n")   for (i = 0; i < param_count - 1; i++){      UINT    tmp = ( ap  = (__gnuc_va_list) ((char *) ( ap ) + (((sizeof (   UDINT      ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ),	*((  UDINT      *) (void *) ((char *) ( ap ) - (((sizeof (   UDINT      ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ))) ;   if(  op1   <=   tmp  ){ op1 = tmp; }else{ ((void)0) ; return 0; } } ((void)0) ; return 1;}       static inline BOOL   LE_UDINT   (BOOL EN, BOOL *ENO , UINT param_count,      UDINT    op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0  ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  ( ap  = ((__gnuc_va_list) __builtin_next_arg (  op1 ))) ; DBG("LE_UDINT" "UDINT" "\n")   for (i = 0; i < param_count - 1; i++){      UDINT    tmp = ( ap  = (__gnuc_va_list) ((char *) ( ap ) + (((sizeof (   UDINT      ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ),	*((  UDINT      *) (void *) ((char *) ( ap ) - (((sizeof (   UDINT      ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ))) ;   if(  op1   <=   tmp  ){ op1 = tmp; }else{ ((void)0) ; return 0; } } ((void)0) ; return 1;}   static inline BOOL   LE__BOOL__UDINT   (BOOL EN, BOOL *ENO , UINT param_count,      UDINT    op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0  ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  ( ap  = ((__gnuc_va_list) __builtin_next_arg (  op1 ))) ; DBG("LE__BOOL__UDINT" "UDINT" "\n")   for (i = 0; i < param_count - 1; i++){      UDINT    tmp = ( ap  = (__gnuc_va_list) ((char *) ( ap ) + (((sizeof (   UDINT      ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ),	*((  UDINT      *) (void *) ((char *) ( ap ) - (((sizeof (   UDINT      ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ))) ;   if(  op1   <=   tmp  ){ op1 = tmp; }else{ ((void)0) ; return 0; } } ((void)0) ; return 1;}       static inline BOOL   LE_ULINT   (BOOL EN, BOOL *ENO , UINT param_count,      ULINT    op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0  ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  ( ap  = ((__gnuc_va_list) __builtin_next_arg (  op1 ))) ; DBG("LE_ULINT" "ULINT" "\n")   for (i = 0; i < param_count - 1; i++){      ULINT    tmp = ( ap  = (__gnuc_va_list) ((char *) ( ap ) + (((sizeof (   ULINT      ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ),	*((  ULINT      *) (void *) ((char *) ( ap ) - (((sizeof (   ULINT      ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ))) ;   if(  op1   <=   tmp  ){ op1 = tmp; }else{ ((void)0) ; return 0; } } ((void)0) ; return 1;}   static inline BOOL   LE__BOOL__ULINT   (BOOL EN, BOOL *ENO , UINT param_count,      ULINT    op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0  ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  ( ap  = ((__gnuc_va_list) __builtin_next_arg (  op1 ))) ; DBG("LE__BOOL__ULINT" "ULINT" "\n")   for (i = 0; i < param_count - 1; i++){      ULINT    tmp = ( ap  = (__gnuc_va_list) ((char *) ( ap ) + (((sizeof (   ULINT      ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ),	*((  ULINT      *) (void *) ((char *) ( ap ) - (((sizeof (   ULINT      ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ))) ;   if(  op1   <=   tmp  ){ op1 = tmp; }else{ ((void)0) ; return 0; } } ((void)0) ; return 1;}      


 	



 static inline BOOL   LE_DATE   (BOOL EN, BOOL *ENO , UINT param_count,      DATE    op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0  ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  ( ap  = ((__gnuc_va_list) __builtin_next_arg (  op1 ))) ; DBG("LE_DATE" "DATE" "\n")   for (i = 0; i < param_count - 1; i++){      DATE    tmp = ( ap  = (__gnuc_va_list) ((char *) ( ap ) + (((sizeof (   DATE      ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ),	*((  DATE      *) (void *) ((char *) ( ap ) - (((sizeof (   DATE      ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ))) ;   if(  (  tmp .tv_sec ==  op1 .tv_sec ?  op1 .tv_nsec -   tmp .tv_nsec :  op1 .tv_sec -   tmp .tv_sec)    <=   0 ){ op1 = tmp; }else{ ((void)0) ; return 0; } } ((void)0) ; return 1;}   static inline BOOL   LE__BOOL__DATE   (BOOL EN, BOOL *ENO , UINT param_count,      DATE    op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0  ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  ( ap  = ((__gnuc_va_list) __builtin_next_arg (  op1 ))) ; DBG("LE__BOOL__DATE" "DATE" "\n")   for (i = 0; i < param_count - 1; i++){      DATE    tmp = ( ap  = (__gnuc_va_list) ((char *) ( ap ) + (((sizeof (   DATE      ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ),	*((  DATE      *) (void *) ((char *) ( ap ) - (((sizeof (   DATE      ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ))) ;   if(  (  tmp .tv_sec ==  op1 .tv_sec ?  op1 .tv_nsec -   tmp .tv_nsec :  op1 .tv_sec -   tmp .tv_sec)    <=   0 ){ op1 = tmp; }else{ ((void)0) ; return 0; } } ((void)0) ; return 1;}     static inline BOOL   LE_TOD   (BOOL EN, BOOL *ENO , UINT param_count,      TOD    op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0  ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  ( ap  = ((__gnuc_va_list) __builtin_next_arg (  op1 ))) ; DBG("LE_TOD" "TOD" "\n")   for (i = 0; i < param_count - 1; i++){      TOD    tmp = ( ap  = (__gnuc_va_list) ((char *) ( ap ) + (((sizeof (   TOD      ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ),	*((  TOD      *) (void *) ((char *) ( ap ) - (((sizeof (   TOD      ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ))) ;   if(  (  tmp .tv_sec ==  op1 .tv_sec ?  op1 .tv_nsec -   tmp .tv_nsec :  op1 .tv_sec -   tmp .tv_sec)    <=   0 ){ op1 = tmp; }else{ ((void)0) ; return 0; } } ((void)0) ; return 1;}   static inline BOOL   LE__BOOL__TOD   (BOOL EN, BOOL *ENO , UINT param_count,      TOD    op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0  ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  ( ap  = ((__gnuc_va_list) __builtin_next_arg (  op1 ))) ; DBG("LE__BOOL__TOD" "TOD" "\n")   for (i = 0; i < param_count - 1; i++){      TOD    tmp = ( ap  = (__gnuc_va_list) ((char *) ( ap ) + (((sizeof (   TOD      ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ),	*((  TOD      *) (void *) ((char *) ( ap ) - (((sizeof (   TOD      ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ))) ;   if(  (  tmp .tv_sec ==  op1 .tv_sec ?  op1 .tv_nsec -   tmp .tv_nsec :  op1 .tv_sec -   tmp .tv_sec)    <=   0 ){ op1 = tmp; }else{ ((void)0) ; return 0; } } ((void)0) ; return 1;}     static inline BOOL   LE_DT   (BOOL EN, BOOL *ENO , UINT param_count,      DT    op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0  ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  ( ap  = ((__gnuc_va_list) __builtin_next_arg (  op1 ))) ; DBG("LE_DT" "DT" "\n")   for (i = 0; i < param_count - 1; i++){      DT    tmp = ( ap  = (__gnuc_va_list) ((char *) ( ap ) + (((sizeof (   DT      ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ),	*((  DT      *) (void *) ((char *) ( ap ) - (((sizeof (   DT      ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ))) ;   if(  (  tmp .tv_sec ==  op1 .tv_sec ?  op1 .tv_nsec -   tmp .tv_nsec :  op1 .tv_sec -   tmp .tv_sec)    <=   0 ){ op1 = tmp; }else{ ((void)0) ; return 0; } } ((void)0) ; return 1;}   static inline BOOL   LE__BOOL__DT   (BOOL EN, BOOL *ENO , UINT param_count,      DT    op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0  ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  ( ap  = ((__gnuc_va_list) __builtin_next_arg (  op1 ))) ; DBG("LE__BOOL__DT" "DT" "\n")   for (i = 0; i < param_count - 1; i++){      DT    tmp = ( ap  = (__gnuc_va_list) ((char *) ( ap ) + (((sizeof (   DT      ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ),	*((  DT      *) (void *) ((char *) ( ap ) - (((sizeof (   DT      ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ))) ;   if(  (  tmp .tv_sec ==  op1 .tv_sec ?  op1 .tv_nsec -   tmp .tv_nsec :  op1 .tv_sec -   tmp .tv_sec)    <=   0 ){ op1 = tmp; }else{ ((void)0) ; return 0; } } ((void)0) ; return 1;}    
static inline BOOL   LE_TIME   (BOOL EN, BOOL *ENO , UINT param_count,      TIME    op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0  ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  ( ap  = ((__gnuc_va_list) __builtin_next_arg (  op1 ))) ; DBG("LE_TIME" "TIME" "\n")   for (i = 0; i < param_count - 1; i++){      TIME    tmp = ( ap  = (__gnuc_va_list) ((char *) ( ap ) + (((sizeof (   TIME      ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ),	*((  TIME      *) (void *) ((char *) ( ap ) - (((sizeof (   TIME      ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ))) ;   if(  (  tmp .tv_sec ==  op1 .tv_sec ?  op1 .tv_nsec -   tmp .tv_nsec :  op1 .tv_sec -   tmp .tv_sec)    <=   0 ){ op1 = tmp; }else{ ((void)0) ; return 0; } } ((void)0) ; return 1;}   static inline BOOL   LE__BOOL__TIME   (BOOL EN, BOOL *ENO , UINT param_count,      TIME    op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0  ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  ( ap  = ((__gnuc_va_list) __builtin_next_arg (  op1 ))) ; DBG("LE__BOOL__TIME" "TIME" "\n")   for (i = 0; i < param_count - 1; i++){      TIME    tmp = ( ap  = (__gnuc_va_list) ((char *) ( ap ) + (((sizeof (   TIME      ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ),	*((  TIME      *) (void *) ((char *) ( ap ) - (((sizeof (   TIME      ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ))) ;   if(  (  tmp .tv_sec ==  op1 .tv_sec ?  op1 .tv_nsec -   tmp .tv_nsec :  op1 .tv_sec -   tmp .tv_sec)    <=   0 ){ op1 = tmp; }else{ ((void)0) ; return 0; } } ((void)0) ; return 1;}   


 	
static inline BOOL   LE_STRING  (BOOL EN, BOOL *ENO , UINT param_count,   STRING  op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0  ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  ( ap  = ((__gnuc_va_list) __builtin_next_arg (  op1 ))) ; DBG("LE_STRING" "STRING" "\n")   for (i = 0; i < param_count - 1; i++){   STRING  tmp = ( ap  = (__gnuc_va_list) ((char *) ( ap ) + (((sizeof (   STRING    ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ),	*((  STRING    *) (void *) ((char *) ( ap ) - (((sizeof (   STRING    ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ))) ;   if(  memcmp((char*)& op1 .body,(char*)&  tmp .body,  op1 .len <   tmp .len ?  op1 .len :   tmp .len)    <=   0  ){ op1 = tmp; }else{ ((void)0) ; return 0; } } ((void)0) ; return 1;}    
static inline BOOL   LE__BOOL__STRING  (BOOL EN, BOOL *ENO , UINT param_count,   STRING  op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0  ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  ( ap  = ((__gnuc_va_list) __builtin_next_arg (  op1 ))) ; DBG("LE__BOOL__STRING" "STRING" "\n")   for (i = 0; i < param_count - 1; i++){   STRING  tmp = ( ap  = (__gnuc_va_list) ((char *) ( ap ) + (((sizeof (   STRING    ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ),	*((  STRING    *) (void *) ((char *) ( ap ) - (((sizeof (   STRING    ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ))) ;   if(  memcmp((char*)& op1 .body,(char*)&  tmp .body,  op1 .len <   tmp .len ?  op1 .len :   tmp .len)    <=   0  ){ op1 = tmp; }else{ ((void)0) ; return 0; } } ((void)0) ; return 1;}    


     
     
     
 



 static inline BOOL   NE_BYTE   (BOOL EN, BOOL *ENO , UINT param_count,      BYTE    op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0  ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  ( ap  = ((__gnuc_va_list) __builtin_next_arg (  op1 ))) ; DBG("NE_BYTE" "BYTE" "\n")   for (i = 0; i < param_count - 1; i++){      BYTE    tmp = ( ap  = (__gnuc_va_list) ((char *) ( ap ) + (((sizeof (   DWORD      ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ),	*((  DWORD      *) (void *) ((char *) ( ap ) - (((sizeof (   DWORD      ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ))) ;   if(  op1   !=   tmp  ){ op1 = tmp; }else{ ((void)0) ; return 0; } } ((void)0) ; return 1;}   static inline BOOL   NE__BOOL__BYTE__BYTE   (BOOL EN, BOOL *ENO , UINT param_count,      BYTE    op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0  ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  ( ap  = ((__gnuc_va_list) __builtin_next_arg (  op1 ))) ; DBG("NE__BOOL__BYTE__BYTE" "BYTE" "\n")   for (i = 0; i < param_count - 1; i++){      BYTE    tmp = ( ap  = (__gnuc_va_list) ((char *) ( ap ) + (((sizeof (   DWORD      ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ),	*((  DWORD      *) (void *) ((char *) ( ap ) - (((sizeof (   DWORD      ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ))) ;   if(  op1   !=   tmp  ){ op1 = tmp; }else{ ((void)0) ; return 0; } } ((void)0) ; return 1;}     static inline BOOL   NE_WORD   (BOOL EN, BOOL *ENO , UINT param_count,      WORD    op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0  ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  ( ap  = ((__gnuc_va_list) __builtin_next_arg (  op1 ))) ; DBG("NE_WORD" "WORD" "\n")   for (i = 0; i < param_count - 1; i++){      WORD    tmp = ( ap  = (__gnuc_va_list) ((char *) ( ap ) + (((sizeof (   DWORD      ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ),	*((  DWORD      *) (void *) ((char *) ( ap ) - (((sizeof (   DWORD      ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ))) ;   if(  op1   !=   tmp  ){ op1 = tmp; }else{ ((void)0) ; return 0; } } ((void)0) ; return 1;}   static inline BOOL   NE__BOOL__WORD__WORD   (BOOL EN, BOOL *ENO , UINT param_count,      WORD    op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0  ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  ( ap  = ((__gnuc_va_list) __builtin_next_arg (  op1 ))) ; DBG("NE__BOOL__WORD__WORD" "WORD" "\n")   for (i = 0; i < param_count - 1; i++){      WORD    tmp = ( ap  = (__gnuc_va_list) ((char *) ( ap ) + (((sizeof (   DWORD      ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ),	*((  DWORD      *) (void *) ((char *) ( ap ) - (((sizeof (   DWORD      ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ))) ;   if(  op1   !=   tmp  ){ op1 = tmp; }else{ ((void)0) ; return 0; } } ((void)0) ; return 1;}     static inline BOOL   NE_DWORD   (BOOL EN, BOOL *ENO , UINT param_count,      DWORD    op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0  ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  ( ap  = ((__gnuc_va_list) __builtin_next_arg (  op1 ))) ; DBG("NE_DWORD" "DWORD" "\n")   for (i = 0; i < param_count - 1; i++){      DWORD    tmp = ( ap  = (__gnuc_va_list) ((char *) ( ap ) + (((sizeof (   DWORD      ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ),	*((  DWORD      *) (void *) ((char *) ( ap ) - (((sizeof (   DWORD      ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ))) ;   if(  op1   !=   tmp  ){ op1 = tmp; }else{ ((void)0) ; return 0; } } ((void)0) ; return 1;}   static inline BOOL   NE__BOOL__DWORD__DWORD   (BOOL EN, BOOL *ENO , UINT param_count,      DWORD    op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0  ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  ( ap  = ((__gnuc_va_list) __builtin_next_arg (  op1 ))) ; DBG("NE__BOOL__DWORD__DWORD" "DWORD" "\n")   for (i = 0; i < param_count - 1; i++){      DWORD    tmp = ( ap  = (__gnuc_va_list) ((char *) ( ap ) + (((sizeof (   DWORD      ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ),	*((  DWORD      *) (void *) ((char *) ( ap ) - (((sizeof (   DWORD      ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ))) ;   if(  op1   !=   tmp  ){ op1 = tmp; }else{ ((void)0) ; return 0; } } ((void)0) ; return 1;}     static inline BOOL   NE_LWORD   (BOOL EN, BOOL *ENO , UINT param_count,      LWORD    op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0  ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  ( ap  = ((__gnuc_va_list) __builtin_next_arg (  op1 ))) ; DBG("NE_LWORD" "LWORD" "\n")   for (i = 0; i < param_count - 1; i++){      LWORD    tmp = ( ap  = (__gnuc_va_list) ((char *) ( ap ) + (((sizeof (   LWORD      ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ),	*((  LWORD      *) (void *) ((char *) ( ap ) - (((sizeof (   LWORD      ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ))) ;   if(  op1   !=   tmp  ){ op1 = tmp; }else{ ((void)0) ; return 0; } } ((void)0) ; return 1;}   static inline BOOL   NE__BOOL__LWORD__LWORD   (BOOL EN, BOOL *ENO , UINT param_count,      LWORD    op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0  ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  ( ap  = ((__gnuc_va_list) __builtin_next_arg (  op1 ))) ; DBG("NE__BOOL__LWORD__LWORD" "LWORD" "\n")   for (i = 0; i < param_count - 1; i++){      LWORD    tmp = ( ap  = (__gnuc_va_list) ((char *) ( ap ) + (((sizeof (   LWORD      ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ),	*((  LWORD      *) (void *) ((char *) ( ap ) - (((sizeof (   LWORD      ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ))) ;   if(  op1   !=   tmp  ){ op1 = tmp; }else{ ((void)0) ; return 0; } } ((void)0) ; return 1;}    
  static inline BOOL   NE_REAL   (BOOL EN, BOOL *ENO , UINT param_count,      REAL    op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0  ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  ( ap  = ((__gnuc_va_list) __builtin_next_arg (  op1 ))) ; DBG("NE_REAL" "REAL" "\n")   for (i = 0; i < param_count - 1; i++){      REAL    tmp = ( ap  = (__gnuc_va_list) ((char *) ( ap ) + (((sizeof (   LREAL      ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ),	*((  LREAL      *) (void *) ((char *) ( ap ) - (((sizeof (   LREAL      ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ))) ;   if(  op1   !=   tmp  ){ op1 = tmp; }else{ ((void)0) ; return 0; } } ((void)0) ; return 1;}   static inline BOOL   NE__BOOL__REAL__REAL   (BOOL EN, BOOL *ENO , UINT param_count,      REAL    op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0  ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  ( ap  = ((__gnuc_va_list) __builtin_next_arg (  op1 ))) ; DBG("NE__BOOL__REAL__REAL" "REAL" "\n")   for (i = 0; i < param_count - 1; i++){      REAL    tmp = ( ap  = (__gnuc_va_list) ((char *) ( ap ) + (((sizeof (   LREAL      ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ),	*((  LREAL      *) (void *) ((char *) ( ap ) - (((sizeof (   LREAL      ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ))) ;   if(  op1   !=   tmp  ){ op1 = tmp; }else{ ((void)0) ; return 0; } } ((void)0) ; return 1;}      static inline BOOL   NE_LREAL   (BOOL EN, BOOL *ENO , UINT param_count,      LREAL    op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0  ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  ( ap  = ((__gnuc_va_list) __builtin_next_arg (  op1 ))) ; DBG("NE_LREAL" "LREAL" "\n")   for (i = 0; i < param_count - 1; i++){      LREAL    tmp = ( ap  = (__gnuc_va_list) ((char *) ( ap ) + (((sizeof (   LREAL      ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ),	*((  LREAL      *) (void *) ((char *) ( ap ) - (((sizeof (   LREAL      ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ))) ;   if(  op1   !=   tmp  ){ op1 = tmp; }else{ ((void)0) ; return 0; } } ((void)0) ; return 1;}   static inline BOOL   NE__BOOL__LREAL__LREAL   (BOOL EN, BOOL *ENO , UINT param_count,      LREAL    op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0  ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  ( ap  = ((__gnuc_va_list) __builtin_next_arg (  op1 ))) ; DBG("NE__BOOL__LREAL__LREAL" "LREAL" "\n")   for (i = 0; i < param_count - 1; i++){      LREAL    tmp = ( ap  = (__gnuc_va_list) ((char *) ( ap ) + (((sizeof (   LREAL      ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ),	*((  LREAL      *) (void *) ((char *) ( ap ) - (((sizeof (   LREAL      ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ))) ;   if(  op1   !=   tmp  ){ op1 = tmp; }else{ ((void)0) ; return 0; } } ((void)0) ; return 1;}        static inline BOOL   NE_SINT   (BOOL EN, BOOL *ENO , UINT param_count,      SINT    op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0  ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  ( ap  = ((__gnuc_va_list) __builtin_next_arg (  op1 ))) ; DBG("NE_SINT" "SINT" "\n")   for (i = 0; i < param_count - 1; i++){      SINT    tmp = ( ap  = (__gnuc_va_list) ((char *) ( ap ) + (((sizeof (   DINT      ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ),	*((  DINT      *) (void *) ((char *) ( ap ) - (((sizeof (   DINT      ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ))) ;   if(  op1   !=   tmp  ){ op1 = tmp; }else{ ((void)0) ; return 0; } } ((void)0) ; return 1;}   static inline BOOL   NE__BOOL__SINT__SINT   (BOOL EN, BOOL *ENO , UINT param_count,      SINT    op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0  ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  ( ap  = ((__gnuc_va_list) __builtin_next_arg (  op1 ))) ; DBG("NE__BOOL__SINT__SINT" "SINT" "\n")   for (i = 0; i < param_count - 1; i++){      SINT    tmp = ( ap  = (__gnuc_va_list) ((char *) ( ap ) + (((sizeof (   DINT      ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ),	*((  DINT      *) (void *) ((char *) ( ap ) - (((sizeof (   DINT      ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ))) ;   if(  op1   !=   tmp  ){ op1 = tmp; }else{ ((void)0) ; return 0; } } ((void)0) ; return 1;}       static inline BOOL   NE_INT   (BOOL EN, BOOL *ENO , UINT param_count,      INT    op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0  ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  ( ap  = ((__gnuc_va_list) __builtin_next_arg (  op1 ))) ; DBG("NE_INT" "INT" "\n")   for (i = 0; i < param_count - 1; i++){      INT    tmp = ( ap  = (__gnuc_va_list) ((char *) ( ap ) + (((sizeof (   DINT      ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ),	*((  DINT      *) (void *) ((char *) ( ap ) - (((sizeof (   DINT      ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ))) ;   if(  op1   !=   tmp  ){ op1 = tmp; }else{ ((void)0) ; return 0; } } ((void)0) ; return 1;}   static inline BOOL   NE__BOOL__INT__INT   (BOOL EN, BOOL *ENO , UINT param_count,      INT    op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0  ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  ( ap  = ((__gnuc_va_list) __builtin_next_arg (  op1 ))) ; DBG("NE__BOOL__INT__INT" "INT" "\n")   for (i = 0; i < param_count - 1; i++){      INT    tmp = ( ap  = (__gnuc_va_list) ((char *) ( ap ) + (((sizeof (   DINT      ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ),	*((  DINT      *) (void *) ((char *) ( ap ) - (((sizeof (   DINT      ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ))) ;   if(  op1   !=   tmp  ){ op1 = tmp; }else{ ((void)0) ; return 0; } } ((void)0) ; return 1;}       static inline BOOL   NE_DINT   (BOOL EN, BOOL *ENO , UINT param_count,      DINT    op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0  ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  ( ap  = ((__gnuc_va_list) __builtin_next_arg (  op1 ))) ; DBG("NE_DINT" "DINT" "\n")   for (i = 0; i < param_count - 1; i++){      DINT    tmp = ( ap  = (__gnuc_va_list) ((char *) ( ap ) + (((sizeof (   DINT      ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ),	*((  DINT      *) (void *) ((char *) ( ap ) - (((sizeof (   DINT      ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ))) ;   if(  op1   !=   tmp  ){ op1 = tmp; }else{ ((void)0) ; return 0; } } ((void)0) ; return 1;}   static inline BOOL   NE__BOOL__DINT__DINT   (BOOL EN, BOOL *ENO , UINT param_count,      DINT    op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0  ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  ( ap  = ((__gnuc_va_list) __builtin_next_arg (  op1 ))) ; DBG("NE__BOOL__DINT__DINT" "DINT" "\n")   for (i = 0; i < param_count - 1; i++){      DINT    tmp = ( ap  = (__gnuc_va_list) ((char *) ( ap ) + (((sizeof (   DINT      ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ),	*((  DINT      *) (void *) ((char *) ( ap ) - (((sizeof (   DINT      ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ))) ;   if(  op1   !=   tmp  ){ op1 = tmp; }else{ ((void)0) ; return 0; } } ((void)0) ; return 1;}       static inline BOOL   NE_LINT   (BOOL EN, BOOL *ENO , UINT param_count,      LINT    op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0  ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  ( ap  = ((__gnuc_va_list) __builtin_next_arg (  op1 ))) ; DBG("NE_LINT" "LINT" "\n")   for (i = 0; i < param_count - 1; i++){      LINT    tmp = ( ap  = (__gnuc_va_list) ((char *) ( ap ) + (((sizeof (   LINT      ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ),	*((  LINT      *) (void *) ((char *) ( ap ) - (((sizeof (   LINT      ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ))) ;   if(  op1   !=   tmp  ){ op1 = tmp; }else{ ((void)0) ; return 0; } } ((void)0) ; return 1;}   static inline BOOL   NE__BOOL__LINT__LINT   (BOOL EN, BOOL *ENO , UINT param_count,      LINT    op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0  ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  ( ap  = ((__gnuc_va_list) __builtin_next_arg (  op1 ))) ; DBG("NE__BOOL__LINT__LINT" "LINT" "\n")   for (i = 0; i < param_count - 1; i++){      LINT    tmp = ( ap  = (__gnuc_va_list) ((char *) ( ap ) + (((sizeof (   LINT      ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ),	*((  LINT      *) (void *) ((char *) ( ap ) - (((sizeof (   LINT      ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ))) ;   if(  op1   !=   tmp  ){ op1 = tmp; }else{ ((void)0) ; return 0; } } ((void)0) ; return 1;}        static inline BOOL   NE_USINT   (BOOL EN, BOOL *ENO , UINT param_count,      USINT    op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0  ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  ( ap  = ((__gnuc_va_list) __builtin_next_arg (  op1 ))) ; DBG("NE_USINT" "USINT" "\n")   for (i = 0; i < param_count - 1; i++){      USINT    tmp = ( ap  = (__gnuc_va_list) ((char *) ( ap ) + (((sizeof (   UDINT      ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ),	*((  UDINT      *) (void *) ((char *) ( ap ) - (((sizeof (   UDINT      ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ))) ;   if(  op1   !=   tmp  ){ op1 = tmp; }else{ ((void)0) ; return 0; } } ((void)0) ; return 1;}   static inline BOOL   NE__BOOL__USINT__USINT   (BOOL EN, BOOL *ENO , UINT param_count,      USINT    op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0  ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  ( ap  = ((__gnuc_va_list) __builtin_next_arg (  op1 ))) ; DBG("NE__BOOL__USINT__USINT" "USINT" "\n")   for (i = 0; i < param_count - 1; i++){      USINT    tmp = ( ap  = (__gnuc_va_list) ((char *) ( ap ) + (((sizeof (   UDINT      ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ),	*((  UDINT      *) (void *) ((char *) ( ap ) - (((sizeof (   UDINT      ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ))) ;   if(  op1   !=   tmp  ){ op1 = tmp; }else{ ((void)0) ; return 0; } } ((void)0) ; return 1;}       static inline BOOL   NE_UINT   (BOOL EN, BOOL *ENO , UINT param_count,      UINT    op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0  ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  ( ap  = ((__gnuc_va_list) __builtin_next_arg (  op1 ))) ; DBG("NE_UINT" "UINT" "\n")   for (i = 0; i < param_count - 1; i++){      UINT    tmp = ( ap  = (__gnuc_va_list) ((char *) ( ap ) + (((sizeof (   UDINT      ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ),	*((  UDINT      *) (void *) ((char *) ( ap ) - (((sizeof (   UDINT      ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ))) ;   if(  op1   !=   tmp  ){ op1 = tmp; }else{ ((void)0) ; return 0; } } ((void)0) ; return 1;}   static inline BOOL   NE__BOOL__UINT__UINT   (BOOL EN, BOOL *ENO , UINT param_count,      UINT    op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0  ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  ( ap  = ((__gnuc_va_list) __builtin_next_arg (  op1 ))) ; DBG("NE__BOOL__UINT__UINT" "UINT" "\n")   for (i = 0; i < param_count - 1; i++){      UINT    tmp = ( ap  = (__gnuc_va_list) ((char *) ( ap ) + (((sizeof (   UDINT      ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ),	*((  UDINT      *) (void *) ((char *) ( ap ) - (((sizeof (   UDINT      ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ))) ;   if(  op1   !=   tmp  ){ op1 = tmp; }else{ ((void)0) ; return 0; } } ((void)0) ; return 1;}       static inline BOOL   NE_UDINT   (BOOL EN, BOOL *ENO , UINT param_count,      UDINT    op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0  ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  ( ap  = ((__gnuc_va_list) __builtin_next_arg (  op1 ))) ; DBG("NE_UDINT" "UDINT" "\n")   for (i = 0; i < param_count - 1; i++){      UDINT    tmp = ( ap  = (__gnuc_va_list) ((char *) ( ap ) + (((sizeof (   UDINT      ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ),	*((  UDINT      *) (void *) ((char *) ( ap ) - (((sizeof (   UDINT      ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ))) ;   if(  op1   !=   tmp  ){ op1 = tmp; }else{ ((void)0) ; return 0; } } ((void)0) ; return 1;}   static inline BOOL   NE__BOOL__UDINT__UDINT   (BOOL EN, BOOL *ENO , UINT param_count,      UDINT    op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0  ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  ( ap  = ((__gnuc_va_list) __builtin_next_arg (  op1 ))) ; DBG("NE__BOOL__UDINT__UDINT" "UDINT" "\n")   for (i = 0; i < param_count - 1; i++){      UDINT    tmp = ( ap  = (__gnuc_va_list) ((char *) ( ap ) + (((sizeof (   UDINT      ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ),	*((  UDINT      *) (void *) ((char *) ( ap ) - (((sizeof (   UDINT      ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ))) ;   if(  op1   !=   tmp  ){ op1 = tmp; }else{ ((void)0) ; return 0; } } ((void)0) ; return 1;}       static inline BOOL   NE_ULINT   (BOOL EN, BOOL *ENO , UINT param_count,      ULINT    op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0  ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  ( ap  = ((__gnuc_va_list) __builtin_next_arg (  op1 ))) ; DBG("NE_ULINT" "ULINT" "\n")   for (i = 0; i < param_count - 1; i++){      ULINT    tmp = ( ap  = (__gnuc_va_list) ((char *) ( ap ) + (((sizeof (   ULINT      ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ),	*((  ULINT      *) (void *) ((char *) ( ap ) - (((sizeof (   ULINT      ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ))) ;   if(  op1   !=   tmp  ){ op1 = tmp; }else{ ((void)0) ; return 0; } } ((void)0) ; return 1;}   static inline BOOL   NE__BOOL__ULINT__ULINT   (BOOL EN, BOOL *ENO , UINT param_count,      ULINT    op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0  ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  ( ap  = ((__gnuc_va_list) __builtin_next_arg (  op1 ))) ; DBG("NE__BOOL__ULINT__ULINT" "ULINT" "\n")   for (i = 0; i < param_count - 1; i++){      ULINT    tmp = ( ap  = (__gnuc_va_list) ((char *) ( ap ) + (((sizeof (   ULINT      ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ),	*((  ULINT      *) (void *) ((char *) ( ap ) - (((sizeof (   ULINT      ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ))) ;   if(  op1   !=   tmp  ){ op1 = tmp; }else{ ((void)0) ; return 0; } } ((void)0) ; return 1;}      


 	



 static inline BOOL   NE_DATE   (BOOL EN, BOOL *ENO , UINT param_count,      DATE    op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0  ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  ( ap  = ((__gnuc_va_list) __builtin_next_arg (  op1 ))) ; DBG("NE_DATE" "DATE" "\n")   for (i = 0; i < param_count - 1; i++){      DATE    tmp = ( ap  = (__gnuc_va_list) ((char *) ( ap ) + (((sizeof (   DATE      ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ),	*((  DATE      *) (void *) ((char *) ( ap ) - (((sizeof (   DATE      ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ))) ;   if(  (  tmp .tv_sec ==  op1 .tv_sec ?  op1 .tv_nsec -   tmp .tv_nsec :  op1 .tv_sec -   tmp .tv_sec)    !=   0 ){ op1 = tmp; }else{ ((void)0) ; return 0; } } ((void)0) ; return 1;}   static inline BOOL   NE__BOOL__DATE__DATE   (BOOL EN, BOOL *ENO , UINT param_count,      DATE    op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0  ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  ( ap  = ((__gnuc_va_list) __builtin_next_arg (  op1 ))) ; DBG("NE__BOOL__DATE__DATE" "DATE" "\n")   for (i = 0; i < param_count - 1; i++){      DATE    tmp = ( ap  = (__gnuc_va_list) ((char *) ( ap ) + (((sizeof (   DATE      ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ),	*((  DATE      *) (void *) ((char *) ( ap ) - (((sizeof (   DATE      ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ))) ;   if(  (  tmp .tv_sec ==  op1 .tv_sec ?  op1 .tv_nsec -   tmp .tv_nsec :  op1 .tv_sec -   tmp .tv_sec)    !=   0 ){ op1 = tmp; }else{ ((void)0) ; return 0; } } ((void)0) ; return 1;}     static inline BOOL   NE_TOD   (BOOL EN, BOOL *ENO , UINT param_count,      TOD    op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0  ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  ( ap  = ((__gnuc_va_list) __builtin_next_arg (  op1 ))) ; DBG("NE_TOD" "TOD" "\n")   for (i = 0; i < param_count - 1; i++){      TOD    tmp = ( ap  = (__gnuc_va_list) ((char *) ( ap ) + (((sizeof (   TOD      ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ),	*((  TOD      *) (void *) ((char *) ( ap ) - (((sizeof (   TOD      ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ))) ;   if(  (  tmp .tv_sec ==  op1 .tv_sec ?  op1 .tv_nsec -   tmp .tv_nsec :  op1 .tv_sec -   tmp .tv_sec)    !=   0 ){ op1 = tmp; }else{ ((void)0) ; return 0; } } ((void)0) ; return 1;}   static inline BOOL   NE__BOOL__TOD__TOD   (BOOL EN, BOOL *ENO , UINT param_count,      TOD    op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0  ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  ( ap  = ((__gnuc_va_list) __builtin_next_arg (  op1 ))) ; DBG("NE__BOOL__TOD__TOD" "TOD" "\n")   for (i = 0; i < param_count - 1; i++){      TOD    tmp = ( ap  = (__gnuc_va_list) ((char *) ( ap ) + (((sizeof (   TOD      ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ),	*((  TOD      *) (void *) ((char *) ( ap ) - (((sizeof (   TOD      ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ))) ;   if(  (  tmp .tv_sec ==  op1 .tv_sec ?  op1 .tv_nsec -   tmp .tv_nsec :  op1 .tv_sec -   tmp .tv_sec)    !=   0 ){ op1 = tmp; }else{ ((void)0) ; return 0; } } ((void)0) ; return 1;}     static inline BOOL   NE_DT   (BOOL EN, BOOL *ENO , UINT param_count,      DT    op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0  ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  ( ap  = ((__gnuc_va_list) __builtin_next_arg (  op1 ))) ; DBG("NE_DT" "DT" "\n")   for (i = 0; i < param_count - 1; i++){      DT    tmp = ( ap  = (__gnuc_va_list) ((char *) ( ap ) + (((sizeof (   DT      ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ),	*((  DT      *) (void *) ((char *) ( ap ) - (((sizeof (   DT      ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ))) ;   if(  (  tmp .tv_sec ==  op1 .tv_sec ?  op1 .tv_nsec -   tmp .tv_nsec :  op1 .tv_sec -   tmp .tv_sec)    !=   0 ){ op1 = tmp; }else{ ((void)0) ; return 0; } } ((void)0) ; return 1;}   static inline BOOL   NE__BOOL__DT__DT   (BOOL EN, BOOL *ENO , UINT param_count,      DT    op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0  ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  ( ap  = ((__gnuc_va_list) __builtin_next_arg (  op1 ))) ; DBG("NE__BOOL__DT__DT" "DT" "\n")   for (i = 0; i < param_count - 1; i++){      DT    tmp = ( ap  = (__gnuc_va_list) ((char *) ( ap ) + (((sizeof (   DT      ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ),	*((  DT      *) (void *) ((char *) ( ap ) - (((sizeof (   DT      ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ))) ;   if(  (  tmp .tv_sec ==  op1 .tv_sec ?  op1 .tv_nsec -   tmp .tv_nsec :  op1 .tv_sec -   tmp .tv_sec)    !=   0 ){ op1 = tmp; }else{ ((void)0) ; return 0; } } ((void)0) ; return 1;}    
static inline BOOL   NE_TIME   (BOOL EN, BOOL *ENO , UINT param_count,      TIME    op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0  ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  ( ap  = ((__gnuc_va_list) __builtin_next_arg (  op1 ))) ; DBG("NE_TIME" "TIME" "\n")   for (i = 0; i < param_count - 1; i++){      TIME    tmp = ( ap  = (__gnuc_va_list) ((char *) ( ap ) + (((sizeof (   TIME      ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ),	*((  TIME      *) (void *) ((char *) ( ap ) - (((sizeof (   TIME      ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ))) ;   if(  (  tmp .tv_sec ==  op1 .tv_sec ?  op1 .tv_nsec -   tmp .tv_nsec :  op1 .tv_sec -   tmp .tv_sec)    !=   0 ){ op1 = tmp; }else{ ((void)0) ; return 0; } } ((void)0) ; return 1;}   static inline BOOL   NE__BOOL__TIME__TIME   (BOOL EN, BOOL *ENO , UINT param_count,      TIME    op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0  ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  ( ap  = ((__gnuc_va_list) __builtin_next_arg (  op1 ))) ; DBG("NE__BOOL__TIME__TIME" "TIME" "\n")   for (i = 0; i < param_count - 1; i++){      TIME    tmp = ( ap  = (__gnuc_va_list) ((char *) ( ap ) + (((sizeof (   TIME      ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ),	*((  TIME      *) (void *) ((char *) ( ap ) - (((sizeof (   TIME      ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ))) ;   if(  (  tmp .tv_sec ==  op1 .tv_sec ?  op1 .tv_nsec -   tmp .tv_nsec :  op1 .tv_sec -   tmp .tv_sec)    !=   0 ){ op1 = tmp; }else{ ((void)0) ; return 0; } } ((void)0) ; return 1;}   


 	
static inline BOOL   NE_STRING  (BOOL EN, BOOL *ENO , UINT param_count,   STRING  op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0  ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  ( ap  = ((__gnuc_va_list) __builtin_next_arg (  op1 ))) ; DBG("NE_STRING" "STRING" "\n")   for (i = 0; i < param_count - 1; i++){   STRING  tmp = ( ap  = (__gnuc_va_list) ((char *) ( ap ) + (((sizeof (   STRING    ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ),	*((  STRING    *) (void *) ((char *) ( ap ) - (((sizeof (   STRING    ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ))) ;   if(  memcmp((char*)& op1 .body,(char*)&  tmp .body,  op1 .len <   tmp .len ?  op1 .len :   tmp .len)    !=   0  ){ op1 = tmp; }else{ ((void)0) ; return 0; } } ((void)0) ; return 1;}    
static inline BOOL   NE__BOOL__STRING__STRING  (BOOL EN, BOOL *ENO , UINT param_count,   STRING  op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0  ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  ( ap  = ((__gnuc_va_list) __builtin_next_arg (  op1 ))) ; DBG("NE__BOOL__STRING__STRING" "STRING" "\n")   for (i = 0; i < param_count - 1; i++){   STRING  tmp = ( ap  = (__gnuc_va_list) ((char *) ( ap ) + (((sizeof (   STRING    ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ),	*((  STRING    *) (void *) ((char *) ( ap ) - (((sizeof (   STRING    ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ))) ;   if(  memcmp((char*)& op1 .body,(char*)&  tmp .body,  op1 .len <   tmp .len ?  op1 .len :   tmp .len)    !=   0  ){ op1 = tmp; }else{ ((void)0) ; return 0; } } ((void)0) ; return 1;}    






   
   
 
   
   

 
 
 
 

 


 



     
     
     
static inline __strlen_t __len(STRING IN) {return IN.len;}

 







  static inline    SINT    LEN__SINT__STRING (BOOL EN, BOOL *ENO ,   STRING  par1){ if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0    ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  return (   SINT  )  __len (par1);}     static inline    INT    LEN__INT__STRING (BOOL EN, BOOL *ENO ,   STRING  par1){ if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0    ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  return (   INT  )  __len (par1);}     static inline    DINT    LEN__DINT__STRING (BOOL EN, BOOL *ENO ,   STRING  par1){ if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0    ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  return (   DINT  )  __len (par1);}     static inline    LINT    LEN__LINT__STRING (BOOL EN, BOOL *ENO ,   STRING  par1){ if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0    ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  return (   LINT  )  __len (par1);}      static inline    USINT    LEN__USINT__STRING (BOOL EN, BOOL *ENO ,   STRING  par1){ if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0    ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  return (   USINT  )  __len (par1);}     static inline    UINT    LEN__UINT__STRING (BOOL EN, BOOL *ENO ,   STRING  par1){ if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0    ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  return (   UINT  )  __len (par1);}     static inline    UDINT    LEN__UDINT__STRING (BOOL EN, BOOL *ENO ,   STRING  par1){ if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0    ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  return (   UDINT  )  __len (par1);}     static inline    ULINT    LEN__ULINT__STRING (BOOL EN, BOOL *ENO ,   STRING  par1){ if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0    ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  return (   ULINT  )  __len (par1);}    



     
     
     


# 1821 "iec_std_lib.h"
  static inline STRING LEFT__STRING__STRING__SINT (BOOL EN, BOOL *ENO , STRING IN,  SINT  L){ STRING res; if (!EN || (  L < 0 )) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return (STRING){0,""}  ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  res = (STRING){0,""} ; L = L < ( SINT )IN.len ? L : ( SINT )IN.len; memcpy(&res.body, &IN.body, L); res.len = L; return res;}    static inline STRING LEFT__STRING__STRING__INT (BOOL EN, BOOL *ENO , STRING IN,  INT  L){ STRING res; if (!EN || (  L < 0 )) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return (STRING){0,""}  ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  res = (STRING){0,""} ; L = L < ( INT )IN.len ? L : ( INT )IN.len; memcpy(&res.body, &IN.body, L); res.len = L; return res;}    static inline STRING LEFT__STRING__STRING__DINT (BOOL EN, BOOL *ENO , STRING IN,  DINT  L){ STRING res; if (!EN || (  L < 0 )) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return (STRING){0,""}  ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  res = (STRING){0,""} ; L = L < ( DINT )IN.len ? L : ( DINT )IN.len; memcpy(&res.body, &IN.body, L); res.len = L; return res;}    static inline STRING LEFT__STRING__STRING__LINT (BOOL EN, BOOL *ENO , STRING IN,  LINT  L){ STRING res; if (!EN || (  L < 0 )) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return (STRING){0,""}  ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  res = (STRING){0,""} ; L = L < ( LINT )IN.len ? L : ( LINT )IN.len; memcpy(&res.body, &IN.body, L); res.len = L; return res;}     static inline STRING LEFT__STRING__STRING__USINT (BOOL EN, BOOL *ENO , STRING IN,  USINT  L){ STRING res; if (!EN || (  L < 0 )) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return (STRING){0,""}  ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  res = (STRING){0,""} ; L = L < ( USINT )IN.len ? L : ( USINT )IN.len; memcpy(&res.body, &IN.body, L); res.len = L; return res;}    static inline STRING LEFT__STRING__STRING__UINT (BOOL EN, BOOL *ENO , STRING IN,  UINT  L){ STRING res; if (!EN || (  L < 0 )) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return (STRING){0,""}  ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  res = (STRING){0,""} ; L = L < ( UINT )IN.len ? L : ( UINT )IN.len; memcpy(&res.body, &IN.body, L); res.len = L; return res;}    static inline STRING LEFT__STRING__STRING__UDINT (BOOL EN, BOOL *ENO , STRING IN,  UDINT  L){ STRING res; if (!EN || (  L < 0 )) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return (STRING){0,""}  ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  res = (STRING){0,""} ; L = L < ( UDINT )IN.len ? L : ( UDINT )IN.len; memcpy(&res.body, &IN.body, L); res.len = L; return res;}    static inline STRING LEFT__STRING__STRING__ULINT (BOOL EN, BOOL *ENO , STRING IN,  ULINT  L){ STRING res; if (!EN || (  L < 0 )) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return (STRING){0,""}  ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  res = (STRING){0,""} ; L = L < ( ULINT )IN.len ? L : ( ULINT )IN.len; memcpy(&res.body, &IN.body, L); res.len = L; return res;}   


     
     
     


# 1838 "iec_std_lib.h"
  static inline STRING RIGHT__STRING__STRING__SINT (BOOL EN, BOOL *ENO , STRING IN,  SINT  L){ STRING res; if (!EN || (  L < 0 )) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return (STRING){0,""}  ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  res = (STRING){0,""} ; L = L < ( SINT )IN.len ? L : ( SINT )IN.len; memcpy(&res.body, &IN.body[( SINT )IN.len - L], L); res.len = L; return res;}    static inline STRING RIGHT__STRING__STRING__INT (BOOL EN, BOOL *ENO , STRING IN,  INT  L){ STRING res; if (!EN || (  L < 0 )) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return (STRING){0,""}  ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  res = (STRING){0,""} ; L = L < ( INT )IN.len ? L : ( INT )IN.len; memcpy(&res.body, &IN.body[( INT )IN.len - L], L); res.len = L; return res;}    static inline STRING RIGHT__STRING__STRING__DINT (BOOL EN, BOOL *ENO , STRING IN,  DINT  L){ STRING res; if (!EN || (  L < 0 )) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return (STRING){0,""}  ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  res = (STRING){0,""} ; L = L < ( DINT )IN.len ? L : ( DINT )IN.len; memcpy(&res.body, &IN.body[( DINT )IN.len - L], L); res.len = L; return res;}    static inline STRING RIGHT__STRING__STRING__LINT (BOOL EN, BOOL *ENO , STRING IN,  LINT  L){ STRING res; if (!EN || (  L < 0 )) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return (STRING){0,""}  ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  res = (STRING){0,""} ; L = L < ( LINT )IN.len ? L : ( LINT )IN.len; memcpy(&res.body, &IN.body[( LINT )IN.len - L], L); res.len = L; return res;}     static inline STRING RIGHT__STRING__STRING__USINT (BOOL EN, BOOL *ENO , STRING IN,  USINT  L){ STRING res; if (!EN || (  L < 0 )) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return (STRING){0,""}  ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  res = (STRING){0,""} ; L = L < ( USINT )IN.len ? L : ( USINT )IN.len; memcpy(&res.body, &IN.body[( USINT )IN.len - L], L); res.len = L; return res;}    static inline STRING RIGHT__STRING__STRING__UINT (BOOL EN, BOOL *ENO , STRING IN,  UINT  L){ STRING res; if (!EN || (  L < 0 )) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return (STRING){0,""}  ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  res = (STRING){0,""} ; L = L < ( UINT )IN.len ? L : ( UINT )IN.len; memcpy(&res.body, &IN.body[( UINT )IN.len - L], L); res.len = L; return res;}    static inline STRING RIGHT__STRING__STRING__UDINT (BOOL EN, BOOL *ENO , STRING IN,  UDINT  L){ STRING res; if (!EN || (  L < 0 )) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return (STRING){0,""}  ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  res = (STRING){0,""} ; L = L < ( UDINT )IN.len ? L : ( UDINT )IN.len; memcpy(&res.body, &IN.body[( UDINT )IN.len - L], L); res.len = L; return res;}    static inline STRING RIGHT__STRING__STRING__ULINT (BOOL EN, BOOL *ENO , STRING IN,  ULINT  L){ STRING res; if (!EN || (  L < 0 )) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return (STRING){0,""}  ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  res = (STRING){0,""} ; L = L < ( ULINT )IN.len ? L : ( ULINT )IN.len; memcpy(&res.body, &IN.body[( ULINT )IN.len - L], L); res.len = L; return res;}   


     
     
     


# 1858 "iec_std_lib.h"
  static inline STRING MID__STRING__STRING__SINT__SINT (BOOL EN, BOOL *ENO , STRING IN,  SINT  L,  SINT  P){ STRING res; if (!EN || (  L < 0 || P < 0 )) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return (STRING){0,""}  ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  res = (STRING){0,""} ; if(P <= ( SINT )IN.len){	P -= 1; L = L + P <= ( SINT )IN.len ? L : ( SINT )IN.len - P;	memcpy(&res.body, &IN.body[P] , L);	res.len = L; } return res;}    static inline STRING MID__STRING__STRING__INT__INT (BOOL EN, BOOL *ENO , STRING IN,  INT  L,  INT  P){ STRING res; if (!EN || (  L < 0 || P < 0 )) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return (STRING){0,""}  ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  res = (STRING){0,""} ; if(P <= ( INT )IN.len){	P -= 1; L = L + P <= ( INT )IN.len ? L : ( INT )IN.len - P;	memcpy(&res.body, &IN.body[P] , L);	res.len = L; } return res;}    static inline STRING MID__STRING__STRING__DINT__DINT (BOOL EN, BOOL *ENO , STRING IN,  DINT  L,  DINT  P){ STRING res; if (!EN || (  L < 0 || P < 0 )) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return (STRING){0,""}  ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  res = (STRING){0,""} ; if(P <= ( DINT )IN.len){	P -= 1; L = L + P <= ( DINT )IN.len ? L : ( DINT )IN.len - P;	memcpy(&res.body, &IN.body[P] , L);	res.len = L; } return res;}    static inline STRING MID__STRING__STRING__LINT__LINT (BOOL EN, BOOL *ENO , STRING IN,  LINT  L,  LINT  P){ STRING res; if (!EN || (  L < 0 || P < 0 )) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return (STRING){0,""}  ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  res = (STRING){0,""} ; if(P <= ( LINT )IN.len){	P -= 1; L = L + P <= ( LINT )IN.len ? L : ( LINT )IN.len - P;	memcpy(&res.body, &IN.body[P] , L);	res.len = L; } return res;}     static inline STRING MID__STRING__STRING__USINT__USINT (BOOL EN, BOOL *ENO , STRING IN,  USINT  L,  USINT  P){ STRING res; if (!EN || (  L < 0 || P < 0 )) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return (STRING){0,""}  ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  res = (STRING){0,""} ; if(P <= ( USINT )IN.len){	P -= 1; L = L + P <= ( USINT )IN.len ? L : ( USINT )IN.len - P;	memcpy(&res.body, &IN.body[P] , L);	res.len = L; } return res;}    static inline STRING MID__STRING__STRING__UINT__UINT (BOOL EN, BOOL *ENO , STRING IN,  UINT  L,  UINT  P){ STRING res; if (!EN || (  L < 0 || P < 0 )) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return (STRING){0,""}  ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  res = (STRING){0,""} ; if(P <= ( UINT )IN.len){	P -= 1; L = L + P <= ( UINT )IN.len ? L : ( UINT )IN.len - P;	memcpy(&res.body, &IN.body[P] , L);	res.len = L; } return res;}    static inline STRING MID__STRING__STRING__UDINT__UDINT (BOOL EN, BOOL *ENO , STRING IN,  UDINT  L,  UDINT  P){ STRING res; if (!EN || (  L < 0 || P < 0 )) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return (STRING){0,""}  ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  res = (STRING){0,""} ; if(P <= ( UDINT )IN.len){	P -= 1; L = L + P <= ( UDINT )IN.len ? L : ( UDINT )IN.len - P;	memcpy(&res.body, &IN.body[P] , L);	res.len = L; } return res;}    static inline STRING MID__STRING__STRING__ULINT__ULINT (BOOL EN, BOOL *ENO , STRING IN,  ULINT  L,  ULINT  P){ STRING res; if (!EN || (  L < 0 || P < 0 )) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return (STRING){0,""}  ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  res = (STRING){0,""} ; if(P <= ( ULINT )IN.len){	P -= 1; L = L + P <= ( ULINT )IN.len ? L : ( ULINT )IN.len - P;	memcpy(&res.body, &IN.body[P] , L);	res.len = L; } return res;}   


     
     
     

static inline STRING CONCAT(BOOL EN, BOOL *ENO , UINT param_count, ...){
  UINT i;
  STRING res;
  va_list ap;
  __strlen_t charcount;
  if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return (STRING){0,""}  ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ; 
  charcount = 0;
  res = (STRING){0,""} ;

  ( ap  = ((__gnuc_va_list) __builtin_next_arg (  param_count ))) ;          

  for (i = 0; i < param_count && charcount < 126 ; i++)
  {
    STRING tmp = ( ap  = (__gnuc_va_list) ((char *) ( ap ) + (((sizeof (   STRING  ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ),	*((  STRING  *) (void *) ((char *) ( ap ) - (((sizeof (   STRING  ) + sizeof (int) - 1) / sizeof (int)) * sizeof (int)) ))) ;
    __strlen_t charrem = 126  - charcount;
    __strlen_t to_write = tmp.len > charrem ? charrem : tmp.len;
    memcpy(&res.body[charcount], &tmp.body , to_write);
    charcount += to_write;
  }

  res.len = charcount;

  ((void)0) ;                   
  return res;
}

     
     
     

static inline STRING __insert(STRING IN1, STRING IN2, __strlen_t P){
    STRING res;
    __strlen_t to_copy;
    res = (STRING){0,""} ;

    to_copy = P > IN1.len ? IN1.len : P;
    memcpy(&res.body, &IN1.body , to_copy);
    P = res.len = to_copy;

    to_copy = IN2.len + res.len > 126  ? 126  - res.len : IN2.len;
    memcpy(&res.body[res.len], &IN2.body , to_copy);
    res.len += to_copy;

    to_copy = IN1.len - P < 126  - res.len ? IN1.len - P : 126  - res.len ;
    memcpy(&res.body[res.len], &IN1.body[P] , to_copy);
    res.len += to_copy;

    return res;
}






  static inline STRING INSERT__STRING__STRING__STRING__SINT (BOOL EN, BOOL *ENO , STRING str1, STRING str2,  SINT  P){ if (!EN || (  P < 0 )) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return (STRING){0,""}  ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  return (STRING)__insert(str1,str2,P);}    static inline STRING INSERT__STRING__STRING__STRING__INT (BOOL EN, BOOL *ENO , STRING str1, STRING str2,  INT  P){ if (!EN || (  P < 0 )) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return (STRING){0,""}  ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  return (STRING)__insert(str1,str2,P);}    static inline STRING INSERT__STRING__STRING__STRING__DINT (BOOL EN, BOOL *ENO , STRING str1, STRING str2,  DINT  P){ if (!EN || (  P < 0 )) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return (STRING){0,""}  ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  return (STRING)__insert(str1,str2,P);}    static inline STRING INSERT__STRING__STRING__STRING__LINT (BOOL EN, BOOL *ENO , STRING str1, STRING str2,  LINT  P){ if (!EN || (  P < 0 )) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return (STRING){0,""}  ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  return (STRING)__insert(str1,str2,P);}     static inline STRING INSERT__STRING__STRING__STRING__USINT (BOOL EN, BOOL *ENO , STRING str1, STRING str2,  USINT  P){ if (!EN || (  P < 0 )) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return (STRING){0,""}  ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  return (STRING)__insert(str1,str2,P);}    static inline STRING INSERT__STRING__STRING__STRING__UINT (BOOL EN, BOOL *ENO , STRING str1, STRING str2,  UINT  P){ if (!EN || (  P < 0 )) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return (STRING){0,""}  ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  return (STRING)__insert(str1,str2,P);}    static inline STRING INSERT__STRING__STRING__STRING__UDINT (BOOL EN, BOOL *ENO , STRING str1, STRING str2,  UDINT  P){ if (!EN || (  P < 0 )) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return (STRING){0,""}  ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  return (STRING)__insert(str1,str2,P);}    static inline STRING INSERT__STRING__STRING__STRING__ULINT (BOOL EN, BOOL *ENO , STRING str1, STRING str2,  ULINT  P){ if (!EN || (  P < 0 )) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return (STRING){0,""}  ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  return (STRING)__insert(str1,str2,P);}   



     
     
     

static inline STRING __delete(STRING IN, __strlen_t L, __strlen_t P){
    STRING res;
    __strlen_t to_copy;
    res = (STRING){0,""} ;

    to_copy = P > IN.len ? IN.len : P-1;
    memcpy(&res.body, &IN.body , to_copy);
    P = res.len = to_copy;

    if( IN.len > P + L ){
        to_copy = IN.len - P - L;
        memcpy(&res.body[res.len], &IN.body[P + L], to_copy);
        res.len += to_copy;
    }

    return res;
}






  static inline STRING DELETE__STRING__STRING__SINT__SINT (BOOL EN, BOOL *ENO , STRING str,  SINT  L,  SINT  P){ if (!EN || (  L < 0 || P < 0 )) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return (STRING){0,""}  ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  return (STRING)__delete(str,L,P);}    static inline STRING DELETE__STRING__STRING__INT__INT (BOOL EN, BOOL *ENO , STRING str,  INT  L,  INT  P){ if (!EN || (  L < 0 || P < 0 )) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return (STRING){0,""}  ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  return (STRING)__delete(str,L,P);}    static inline STRING DELETE__STRING__STRING__DINT__DINT (BOOL EN, BOOL *ENO , STRING str,  DINT  L,  DINT  P){ if (!EN || (  L < 0 || P < 0 )) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return (STRING){0,""}  ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  return (STRING)__delete(str,L,P);}    static inline STRING DELETE__STRING__STRING__LINT__LINT (BOOL EN, BOOL *ENO , STRING str,  LINT  L,  LINT  P){ if (!EN || (  L < 0 || P < 0 )) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return (STRING){0,""}  ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  return (STRING)__delete(str,L,P);}     static inline STRING DELETE__STRING__STRING__USINT__USINT (BOOL EN, BOOL *ENO , STRING str,  USINT  L,  USINT  P){ if (!EN || (  L < 0 || P < 0 )) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return (STRING){0,""}  ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  return (STRING)__delete(str,L,P);}    static inline STRING DELETE__STRING__STRING__UINT__UINT (BOOL EN, BOOL *ENO , STRING str,  UINT  L,  UINT  P){ if (!EN || (  L < 0 || P < 0 )) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return (STRING){0,""}  ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  return (STRING)__delete(str,L,P);}    static inline STRING DELETE__STRING__STRING__UDINT__UDINT (BOOL EN, BOOL *ENO , STRING str,  UDINT  L,  UDINT  P){ if (!EN || (  L < 0 || P < 0 )) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return (STRING){0,""}  ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  return (STRING)__delete(str,L,P);}    static inline STRING DELETE__STRING__STRING__ULINT__ULINT (BOOL EN, BOOL *ENO , STRING str,  ULINT  L,  ULINT  P){ if (!EN || (  L < 0 || P < 0 )) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return (STRING){0,""}  ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  return (STRING)__delete(str,L,P);}   



     
     
     

static inline STRING __replace(STRING IN1, STRING IN2, __strlen_t L, __strlen_t P){
    STRING res;
    __strlen_t to_copy;
    res = (STRING){0,""} ;

    to_copy = P > IN1.len ? IN1.len : P-1;
    memcpy(&res.body, &IN1.body , to_copy);
    P = res.len = to_copy;

    to_copy = IN2.len < L ? IN2.len : L;

    if( to_copy + res.len > 126  )
       to_copy = 126  - res.len;

    memcpy(&res.body[res.len], &IN2.body , to_copy);
    res.len += to_copy;

    P += L;
    if( res.len <  126  && P < IN1.len)
    {
        to_copy = IN1.len - P;
        memcpy(&res.body[res.len], &IN1.body[P] , to_copy);
        res.len += to_copy;
    }

    return res;
}






  static inline STRING REPLACE__STRING__STRING__STRING__SINT__SINT (BOOL EN, BOOL *ENO , STRING str1, STRING str2,  SINT  L,  SINT  P){ if (!EN || (  L < 0 || P < 0 )) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return (STRING){0,""}  ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  return (STRING)__replace(str1,str2,L,P);}    static inline STRING REPLACE__STRING__STRING__STRING__INT__INT (BOOL EN, BOOL *ENO , STRING str1, STRING str2,  INT  L,  INT  P){ if (!EN || (  L < 0 || P < 0 )) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return (STRING){0,""}  ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  return (STRING)__replace(str1,str2,L,P);}    static inline STRING REPLACE__STRING__STRING__STRING__DINT__DINT (BOOL EN, BOOL *ENO , STRING str1, STRING str2,  DINT  L,  DINT  P){ if (!EN || (  L < 0 || P < 0 )) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return (STRING){0,""}  ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  return (STRING)__replace(str1,str2,L,P);}    static inline STRING REPLACE__STRING__STRING__STRING__LINT__LINT (BOOL EN, BOOL *ENO , STRING str1, STRING str2,  LINT  L,  LINT  P){ if (!EN || (  L < 0 || P < 0 )) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return (STRING){0,""}  ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  return (STRING)__replace(str1,str2,L,P);}     static inline STRING REPLACE__STRING__STRING__STRING__USINT__USINT (BOOL EN, BOOL *ENO , STRING str1, STRING str2,  USINT  L,  USINT  P){ if (!EN || (  L < 0 || P < 0 )) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return (STRING){0,""}  ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  return (STRING)__replace(str1,str2,L,P);}    static inline STRING REPLACE__STRING__STRING__STRING__UINT__UINT (BOOL EN, BOOL *ENO , STRING str1, STRING str2,  UINT  L,  UINT  P){ if (!EN || (  L < 0 || P < 0 )) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return (STRING){0,""}  ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  return (STRING)__replace(str1,str2,L,P);}    static inline STRING REPLACE__STRING__STRING__STRING__UDINT__UDINT (BOOL EN, BOOL *ENO , STRING str1, STRING str2,  UDINT  L,  UDINT  P){ if (!EN || (  L < 0 || P < 0 )) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return (STRING){0,""}  ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  return (STRING)__replace(str1,str2,L,P);}    static inline STRING REPLACE__STRING__STRING__STRING__ULINT__ULINT (BOOL EN, BOOL *ENO , STRING str1, STRING str2,  ULINT  L,  ULINT  P){ if (!EN || (  L < 0 || P < 0 )) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return (STRING){0,""}  ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  return (STRING)__replace(str1,str2,L,P);}   


     
     
     

static inline __strlen_t __pfind(STRING* IN1, STRING* IN2){
    UINT count1 = 0;  
    UINT count2 = 0;  
    while(count1 + count2 < IN1->len && count2 < IN2->len)
    {
        if(IN1->body[count1 + count2] != IN2->body[count2]){
            count1 += count2 + 1;
            count2 = 0;
        }
        else {
            count2++;
        }
    }
    return count2 == IN2->len -1 ? 0 : count1 + 1;
}






  static inline  SINT  FIND__SINT__STRING__STRING(BOOL EN, BOOL *ENO , STRING str1, STRING str2){ if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0   ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  return ( SINT )__pfind(&str1,&str2);}    static inline  INT  FIND__INT__STRING__STRING(BOOL EN, BOOL *ENO , STRING str1, STRING str2){ if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0   ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  return ( INT )__pfind(&str1,&str2);}    static inline  DINT  FIND__DINT__STRING__STRING(BOOL EN, BOOL *ENO , STRING str1, STRING str2){ if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0   ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  return ( DINT )__pfind(&str1,&str2);}    static inline  LINT  FIND__LINT__STRING__STRING(BOOL EN, BOOL *ENO , STRING str1, STRING str2){ if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0   ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  return ( LINT )__pfind(&str1,&str2);}     static inline  USINT  FIND__USINT__STRING__STRING(BOOL EN, BOOL *ENO , STRING str1, STRING str2){ if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0   ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  return ( USINT )__pfind(&str1,&str2);}    static inline  UINT  FIND__UINT__STRING__STRING(BOOL EN, BOOL *ENO , STRING str1, STRING str2){ if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0   ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  return ( UINT )__pfind(&str1,&str2);}    static inline  UDINT  FIND__UDINT__STRING__STRING(BOOL EN, BOOL *ENO , STRING str1, STRING str2){ if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0   ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  return ( UDINT )__pfind(&str1,&str2);}    static inline  ULINT  FIND__ULINT__STRING__STRING(BOOL EN, BOOL *ENO , STRING str1, STRING str2){ if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return 0   ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  return ( ULINT )__pfind(&str1,&str2);}   



   
   
 
   
   

 
 
 
 


static inline TIME ADD_TIME(BOOL EN, BOOL *ENO , TIME IN1, TIME IN2){
  if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return (TIME){0,0}  ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ; 
  return __time_add(IN1, IN2);
}

static inline TOD ADD_TOD_TIME(BOOL EN, BOOL *ENO , TOD IN1, TIME IN2){
  if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return (TOD){0,0}  ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ; 
  return __time_add(IN1, IN2);
}

static inline DT ADD_DT_TIME(BOOL EN, BOOL *ENO , DT IN1, TIME IN2){
  if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return (DT){0,0}  ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ; 
  return __time_add(IN1, IN2);
}

static inline TIME SUB_TIME(BOOL EN, BOOL *ENO , TIME IN1, TIME IN2){
  if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return (TIME){0,0}  ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ; 
  return __time_sub(IN1, IN2);
}

static inline TIME SUB_DATE_DATE(BOOL EN, BOOL *ENO , DATE IN1, DATE IN2){
  if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return (TIME){0,0}  ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ; 
  return __time_sub(IN1, IN2);
}

static inline TOD SUB_TOD_TIME(BOOL EN, BOOL *ENO , TOD IN1, TIME IN2){
  if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return (TOD){0,0}  ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ; 
  return __time_sub(IN1, IN2);
}

static inline TIME SUB_TOD_TOD(BOOL EN, BOOL *ENO , TOD IN1, TOD IN2){
  if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return (TIME){0,0}  ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ; 
  return __time_sub(IN1, IN2);
}

static inline DT SUB_DT_TIME(BOOL EN, BOOL *ENO , DT IN1, TIME IN2){
  if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return (DT){0,0}  ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ; 
  return __time_sub(IN1, IN2);
}

static inline TIME SUB_DT_DT(BOOL EN, BOOL *ENO , DT IN1, DT IN2){
  if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return (TIME){0,0}  ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ; 
  return __time_sub(IN1, IN2);
}


 





  static inline TIME MULTIME__TIME__TIME__REAL (BOOL EN, BOOL *ENO , TIME IN1,  REAL  IN2){ if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return (TIME){0,0}  ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  return __time_mul(IN1, IN2);}    static inline TIME MULTIME__TIME__TIME__LREAL (BOOL EN, BOOL *ENO , TIME IN1,  LREAL  IN2){ if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return (TIME){0,0}  ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  return __time_mul(IN1, IN2);}      static inline TIME MULTIME__TIME__TIME__SINT (BOOL EN, BOOL *ENO , TIME IN1,  SINT  IN2){ if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return (TIME){0,0}  ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  return __time_mul(IN1, IN2);}     static inline TIME MULTIME__TIME__TIME__INT (BOOL EN, BOOL *ENO , TIME IN1,  INT  IN2){ if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return (TIME){0,0}  ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  return __time_mul(IN1, IN2);}     static inline TIME MULTIME__TIME__TIME__DINT (BOOL EN, BOOL *ENO , TIME IN1,  DINT  IN2){ if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return (TIME){0,0}  ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  return __time_mul(IN1, IN2);}     static inline TIME MULTIME__TIME__TIME__LINT (BOOL EN, BOOL *ENO , TIME IN1,  LINT  IN2){ if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return (TIME){0,0}  ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  return __time_mul(IN1, IN2);}      static inline TIME MULTIME__TIME__TIME__USINT (BOOL EN, BOOL *ENO , TIME IN1,  USINT  IN2){ if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return (TIME){0,0}  ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  return __time_mul(IN1, IN2);}     static inline TIME MULTIME__TIME__TIME__UINT (BOOL EN, BOOL *ENO , TIME IN1,  UINT  IN2){ if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return (TIME){0,0}  ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  return __time_mul(IN1, IN2);}     static inline TIME MULTIME__TIME__TIME__UDINT (BOOL EN, BOOL *ENO , TIME IN1,  UDINT  IN2){ if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return (TIME){0,0}  ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  return __time_mul(IN1, IN2);}     static inline TIME MULTIME__TIME__TIME__ULINT (BOOL EN, BOOL *ENO , TIME IN1,  ULINT  IN2){ if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return (TIME){0,0}  ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  return __time_mul(IN1, IN2);}    


 





  static inline TIME MUL__TIME__TIME__REAL (BOOL EN, BOOL *ENO , TIME IN1,  REAL  IN2){ if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return (TIME){0,0}  ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  return __time_mul(IN1, IN2);}    static inline TIME MUL__TIME__TIME__LREAL (BOOL EN, BOOL *ENO , TIME IN1,  LREAL  IN2){ if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return (TIME){0,0}  ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  return __time_mul(IN1, IN2);}      static inline TIME MUL__TIME__TIME__SINT (BOOL EN, BOOL *ENO , TIME IN1,  SINT  IN2){ if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return (TIME){0,0}  ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  return __time_mul(IN1, IN2);}     static inline TIME MUL__TIME__TIME__INT (BOOL EN, BOOL *ENO , TIME IN1,  INT  IN2){ if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return (TIME){0,0}  ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  return __time_mul(IN1, IN2);}     static inline TIME MUL__TIME__TIME__DINT (BOOL EN, BOOL *ENO , TIME IN1,  DINT  IN2){ if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return (TIME){0,0}  ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  return __time_mul(IN1, IN2);}     static inline TIME MUL__TIME__TIME__LINT (BOOL EN, BOOL *ENO , TIME IN1,  LINT  IN2){ if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return (TIME){0,0}  ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  return __time_mul(IN1, IN2);}      static inline TIME MUL__TIME__TIME__USINT (BOOL EN, BOOL *ENO , TIME IN1,  USINT  IN2){ if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return (TIME){0,0}  ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  return __time_mul(IN1, IN2);}     static inline TIME MUL__TIME__TIME__UINT (BOOL EN, BOOL *ENO , TIME IN1,  UINT  IN2){ if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return (TIME){0,0}  ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  return __time_mul(IN1, IN2);}     static inline TIME MUL__TIME__TIME__UDINT (BOOL EN, BOOL *ENO , TIME IN1,  UDINT  IN2){ if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return (TIME){0,0}  ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  return __time_mul(IN1, IN2);}     static inline TIME MUL__TIME__TIME__ULINT (BOOL EN, BOOL *ENO , TIME IN1,  ULINT  IN2){ if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return (TIME){0,0}  ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  return __time_mul(IN1, IN2);}    


 





  static inline TIME DIVTIME__TIME__TIME__REAL (BOOL EN, BOOL *ENO , TIME IN1,  REAL  IN2){ if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return (TIME){0,0}  ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  return __time_div(IN1, IN2);}    static inline TIME DIVTIME__TIME__TIME__LREAL (BOOL EN, BOOL *ENO , TIME IN1,  LREAL  IN2){ if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return (TIME){0,0}  ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  return __time_div(IN1, IN2);}      static inline TIME DIVTIME__TIME__TIME__SINT (BOOL EN, BOOL *ENO , TIME IN1,  SINT  IN2){ if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return (TIME){0,0}  ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  return __time_div(IN1, IN2);}     static inline TIME DIVTIME__TIME__TIME__INT (BOOL EN, BOOL *ENO , TIME IN1,  INT  IN2){ if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return (TIME){0,0}  ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  return __time_div(IN1, IN2);}     static inline TIME DIVTIME__TIME__TIME__DINT (BOOL EN, BOOL *ENO , TIME IN1,  DINT  IN2){ if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return (TIME){0,0}  ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  return __time_div(IN1, IN2);}     static inline TIME DIVTIME__TIME__TIME__LINT (BOOL EN, BOOL *ENO , TIME IN1,  LINT  IN2){ if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return (TIME){0,0}  ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  return __time_div(IN1, IN2);}      static inline TIME DIVTIME__TIME__TIME__USINT (BOOL EN, BOOL *ENO , TIME IN1,  USINT  IN2){ if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return (TIME){0,0}  ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  return __time_div(IN1, IN2);}     static inline TIME DIVTIME__TIME__TIME__UINT (BOOL EN, BOOL *ENO , TIME IN1,  UINT  IN2){ if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return (TIME){0,0}  ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  return __time_div(IN1, IN2);}     static inline TIME DIVTIME__TIME__TIME__UDINT (BOOL EN, BOOL *ENO , TIME IN1,  UDINT  IN2){ if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return (TIME){0,0}  ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  return __time_div(IN1, IN2);}     static inline TIME DIVTIME__TIME__TIME__ULINT (BOOL EN, BOOL *ENO , TIME IN1,  ULINT  IN2){ if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return (TIME){0,0}  ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  return __time_div(IN1, IN2);}    


 





  static inline TIME DIV__TIME__TIME__REAL (BOOL EN, BOOL *ENO , TIME IN1,  REAL  IN2){ if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return (TIME){0,0}  ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  return __time_div(IN1, IN2);}    static inline TIME DIV__TIME__TIME__LREAL (BOOL EN, BOOL *ENO , TIME IN1,  LREAL  IN2){ if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return (TIME){0,0}  ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  return __time_div(IN1, IN2);}      static inline TIME DIV__TIME__TIME__SINT (BOOL EN, BOOL *ENO , TIME IN1,  SINT  IN2){ if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return (TIME){0,0}  ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  return __time_div(IN1, IN2);}     static inline TIME DIV__TIME__TIME__INT (BOOL EN, BOOL *ENO , TIME IN1,  INT  IN2){ if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return (TIME){0,0}  ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  return __time_div(IN1, IN2);}     static inline TIME DIV__TIME__TIME__DINT (BOOL EN, BOOL *ENO , TIME IN1,  DINT  IN2){ if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return (TIME){0,0}  ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  return __time_div(IN1, IN2);}     static inline TIME DIV__TIME__TIME__LINT (BOOL EN, BOOL *ENO , TIME IN1,  LINT  IN2){ if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return (TIME){0,0}  ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  return __time_div(IN1, IN2);}      static inline TIME DIV__TIME__TIME__USINT (BOOL EN, BOOL *ENO , TIME IN1,  USINT  IN2){ if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return (TIME){0,0}  ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  return __time_div(IN1, IN2);}     static inline TIME DIV__TIME__TIME__UINT (BOOL EN, BOOL *ENO , TIME IN1,  UINT  IN2){ if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return (TIME){0,0}  ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  return __time_div(IN1, IN2);}     static inline TIME DIV__TIME__TIME__UDINT (BOOL EN, BOOL *ENO , TIME IN1,  UDINT  IN2){ if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return (TIME){0,0}  ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  return __time_div(IN1, IN2);}     static inline TIME DIV__TIME__TIME__ULINT (BOOL EN, BOOL *ENO , TIME IN1,  ULINT  IN2){ if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return (TIME){0,0}  ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ;  return __time_div(IN1, IN2);}    


 
static inline DT CONCAT_DATE_TOD(BOOL EN, BOOL *ENO , DATE IN1, TOD IN2){
  if (!EN) { if (ENO != ((void *)0) ) *ENO = (  BOOL  )   0    ; return (DT){0,0}  ; } else if (ENO != ((void *)0) ) *ENO = (  BOOL  )   1    ; 
  return __time_add(IN1, IN2);
}



   
   
 
   
   

 
 
 
 

 
